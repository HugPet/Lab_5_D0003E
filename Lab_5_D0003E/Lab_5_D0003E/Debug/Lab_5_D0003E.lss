
Lab_5_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000231c  000023b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000231c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800108  00800108  000023b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031bb  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001113  00000000  00000000  0000587b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001919  00000000  00000000  0000698e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c74  00000000  00000000  000082a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3f  00000000  00000000  00008f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000340a  00000000  00000000  0000995b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000cd65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__vector_1>
       8:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_2>
       c:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_3>
      10:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__vector_4>
      14:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__vector_9>
      28:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__vector_10>
      2c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_11>
      30:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_12>
      34:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__vector_13>
      38:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_14>
      3c:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__vector_15>
      40:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_16>
      44:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__vector_17>
      48:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_18>
      4c:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__vector_19>
      50:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_20>
      54:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_21>
      58:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__vector_22>
      5c:	0f 03       	fmul	r16, r23
      5e:	be 02       	muls	r27, r30
      60:	c7 02       	muls	r28, r23
      62:	d0 02       	muls	r29, r16
      64:	d9 02       	muls	r29, r25
      66:	e2 02       	muls	r30, r18
      68:	eb 02       	muls	r30, r27
      6a:	f4 02       	muls	r31, r20
      6c:	fd 02       	muls	r31, r29
      6e:	06 03       	mulsu	r16, r22

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e1       	ldi	r30, 0x1C	; 28
      84:	f3 e2       	ldi	r31, 0x23	; 35
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 30       	cpi	r26, 0x08	; 8
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a8 e0       	ldi	r26, 0x08	; 8
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 35       	cpi	r26, 0x5B	; 91
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <main>
      a6:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <updateAll>:
 */ 

#include "Inter.h"


void updateAll(Inter *self, int trafficChange) {
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	ec 01       	movw	r28, r24
	if (trafficChange == 1) {
      b4:	61 30       	cpi	r22, 0x01	; 1
      b6:	71 05       	cpc	r23, r1
      b8:	31 f4       	brne	.+12     	; 0xc6 <updateAll+0x18>
		updateTrafficSignal(self->north->traf);
      ba:	e8 81       	ld	r30, Y
      bc:	f9 81       	ldd	r31, Y+1	; 0x01
      be:	86 81       	ldd	r24, Z+6	; 0x06
      c0:	97 81       	ldd	r25, Z+7	; 0x07
      c2:	0e 94 96 02 	call	0x52c	; 0x52c <updateTrafficSignal>
	}
	SYNC(self->l, printQN, &self->north->carsInQ);
      c6:	48 81       	ld	r20, Y
      c8:	59 81       	ldd	r21, Y+1	; 0x01
      ca:	4c 5f       	subi	r20, 0xFC	; 252
      cc:	5f 4f       	sbci	r21, 0xFF	; 255
      ce:	6a e4       	ldi	r22, 0x4A	; 74
      d0:	74 e0       	ldi	r23, 0x04	; 4
      d2:	8c 81       	ldd	r24, Y+4	; 0x04
      d4:	9d 81       	ldd	r25, Y+5	; 0x05
      d6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <sync>
	SYNC(self->l, printQS, self->south->carsInQ);
      da:	ea 81       	ldd	r30, Y+2	; 0x02
      dc:	fb 81       	ldd	r31, Y+3	; 0x03
      de:	44 81       	ldd	r20, Z+4	; 0x04
      e0:	55 81       	ldd	r21, Z+5	; 0x05
      e2:	6f e4       	ldi	r22, 0x4F	; 79
      e4:	74 e0       	ldi	r23, 0x04	; 4
      e6:	8c 81       	ldd	r24, Y+4	; 0x04
      e8:	9d 81       	ldd	r25, Y+5	; 0x05
      ea:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <sync>
	SYNC(self->l, printOnBridge, self->north->traf->bridge->carsOnBridge);
      ee:	e8 81       	ld	r30, Y
      f0:	f9 81       	ldd	r31, Y+1	; 0x01
      f2:	06 80       	ldd	r0, Z+6	; 0x06
      f4:	f7 81       	ldd	r31, Z+7	; 0x07
      f6:	e0 2d       	mov	r30, r0
      f8:	06 80       	ldd	r0, Z+6	; 0x06
      fa:	f7 81       	ldd	r31, Z+7	; 0x07
      fc:	e0 2d       	mov	r30, r0
      fe:	44 81       	ldd	r20, Z+4	; 0x04
     100:	55 81       	ldd	r21, Z+5	; 0x05
     102:	64 e5       	ldi	r22, 0x54	; 84
     104:	74 e0       	ldi	r23, 0x04	; 4
     106:	8c 81       	ldd	r24, Y+4	; 0x04
     108:	9d 81       	ldd	r25, Y+5	; 0x05
     10a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <sync>
	//update(self->north->carsInQ, self->south->carsInQ, self->north->traf->bridge->carsOnBridge);
}
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <sendToBridge>:
	self->south->carsInQ = 0;
	self->north->traf->bridge->carsOnBridge = 0;
	updateAll(self, 0);
}

void sendToBridge(Inter *self) {
     114:	cf 92       	push	r12
     116:	df 92       	push	r13
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
	if (self->running) {
     120:	fc 01       	movw	r30, r24
     122:	20 85       	ldd	r18, Z+8	; 0x08
     124:	22 23       	and	r18, r18
     126:	b1 f0       	breq	.+44     	; 0x154 <sendToBridge+0x40>
     128:	8c 01       	movw	r16, r24
			//SYNC(self->north->traf, turnNorth, false);
			//updateAll(self, 1);
			//self->timer = 0;
		//}
		//updateAll(self, 0);
		printOnBridge(11);
     12a:	8b e0       	ldi	r24, 0x0B	; 11
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <printOnBridge>
		AFTER(SEC(1), self, sendToBridge, NULL);
     132:	c1 2c       	mov	r12, r1
     134:	d1 2c       	mov	r13, r1
     136:	0f 2e       	mov	r0, r31
     138:	fa e8       	ldi	r31, 0x8A	; 138
     13a:	ef 2e       	mov	r14, r31
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	ff 2e       	mov	r15, r31
     140:	f0 2d       	mov	r31, r0
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	a9 01       	movw	r20, r18
     148:	62 e1       	ldi	r22, 0x12	; 18
     14a:	7a e7       	ldi	r23, 0x7A	; 122
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <async>
	}
}
     154:	1f 91       	pop	r17
     156:	0f 91       	pop	r16
     158:	ff 90       	pop	r15
     15a:	ef 90       	pop	r14
     15c:	df 90       	pop	r13
     15e:	cf 90       	pop	r12
     160:	08 95       	ret

00000162 <removeFromBridge>:
		self->timer++;
	}
	updateAll(self, 0);
}

void removeFromBridge(Inter *self) {
     162:	cf 92       	push	r12
     164:	df 92       	push	r13
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
	if (self->running) {
     172:	fc 01       	movw	r30, r24
     174:	20 85       	ldd	r18, Z+8	; 0x08
     176:	22 23       	and	r18, r18
     178:	f1 f0       	breq	.+60     	; 0x1b6 <removeFromBridge+0x54>
     17a:	ec 01       	movw	r28, r24
		ASYNC(self->north->traf->bridge, subCar, NULL);
     17c:	01 90       	ld	r0, Z+
     17e:	f0 81       	ld	r31, Z
     180:	e0 2d       	mov	r30, r0
     182:	06 80       	ldd	r0, Z+6	; 0x06
     184:	f7 81       	ldd	r31, Z+7	; 0x07
     186:	e0 2d       	mov	r30, r0
     188:	06 81       	ldd	r16, Z+6	; 0x06
     18a:	17 81       	ldd	r17, Z+7	; 0x07
     18c:	c1 2c       	mov	r12, r1
     18e:	d1 2c       	mov	r13, r1
     190:	0f 2e       	mov	r0, r31
     192:	fb eb       	ldi	r31, 0xBB	; 187
     194:	ef 2e       	mov	r14, r31
     196:	f4 e0       	ldi	r31, 0x04	; 4
     198:	ff 2e       	mov	r15, r31
     19a:	f0 2d       	mov	r31, r0
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	a9 01       	movw	r20, r18
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	cb 01       	movw	r24, r22
     1a8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <async>
		updateAll(self, 0);
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	ce 01       	movw	r24, r28
     1b2:	0e 94 57 00 	call	0xae	; 0xae <updateAll>
	}
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	df 90       	pop	r13
     1c4:	cf 90       	pop	r12
     1c6:	08 95       	ret

000001c8 <addToNorthQueue>:
	checkTimer(self);
	AFTER(SEC(5), self, removeFromBridge, NULL);
}

void addToNorthQueue(Inter *self) {
	self->north->carsInQ++;
     1c8:	dc 01       	movw	r26, r24
     1ca:	ed 91       	ld	r30, X+
     1cc:	fc 91       	ld	r31, X
     1ce:	24 81       	ldd	r18, Z+4	; 0x04
     1d0:	35 81       	ldd	r19, Z+5	; 0x05
     1d2:	2f 5f       	subi	r18, 0xFF	; 255
     1d4:	3f 4f       	sbci	r19, 0xFF	; 255
     1d6:	35 83       	std	Z+5, r19	; 0x05
     1d8:	24 83       	std	Z+4, r18	; 0x04
	updateAll(self, 0);
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	0e 94 57 00 	call	0xae	; 0xae <updateAll>
     1e2:	08 95       	ret

000001e4 <addToSouthQueue>:
}

void addToSouthQueue(Inter *self) {
	self->south->carsInQ++;
     1e4:	dc 01       	movw	r26, r24
     1e6:	12 96       	adiw	r26, 0x02	; 2
     1e8:	ed 91       	ld	r30, X+
     1ea:	fc 91       	ld	r31, X
     1ec:	13 97       	sbiw	r26, 0x03	; 3
     1ee:	24 81       	ldd	r18, Z+4	; 0x04
     1f0:	35 81       	ldd	r19, Z+5	; 0x05
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	3f 4f       	sbci	r19, 0xFF	; 255
     1f6:	35 83       	std	Z+5, r19	; 0x05
     1f8:	24 83       	std	Z+4, r18	; 0x04
	updateAll(self, 0);
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 57 00 	call	0xae	; 0xae <updateAll>
     202:	08 95       	ret

00000204 <onStart>:
}

void onStart(Inter *self) {
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	ec 01       	movw	r28, r24
	//self->running = true;
	//initLCD();
	//sendToBridge(self);
	addToNorthQueue(self);
     20a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <addToNorthQueue>
	updateAll(self, 0);
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	ce 01       	movw	r24, r28
     214:	0e 94 57 00 	call	0xae	; 0xae <updateAll>
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <onExit>:

void onExit(Inter *self) {
	self->running = false;
     21e:	dc 01       	movw	r26, r24
     220:	18 96       	adiw	r26, 0x08	; 8
     222:	1c 92       	st	X, r1
     224:	18 97       	sbiw	r26, 0x08	; 8
	self->north->carsInQ = 0;
     226:	ed 91       	ld	r30, X+
     228:	fc 91       	ld	r31, X
     22a:	11 97       	sbiw	r26, 0x01	; 1
     22c:	15 82       	std	Z+5, r1	; 0x05
     22e:	14 82       	std	Z+4, r1	; 0x04
	self->south->carsInQ = 0;
     230:	12 96       	adiw	r26, 0x02	; 2
     232:	ed 91       	ld	r30, X+
     234:	fc 91       	ld	r31, X
     236:	13 97       	sbiw	r26, 0x03	; 3
     238:	15 82       	std	Z+5, r1	; 0x05
     23a:	14 82       	std	Z+4, r1	; 0x04
	self->north->traf->bridge->carsOnBridge = 0;
     23c:	ed 91       	ld	r30, X+
     23e:	fc 91       	ld	r31, X
     240:	06 80       	ldd	r0, Z+6	; 0x06
     242:	f7 81       	ldd	r31, Z+7	; 0x07
     244:	e0 2d       	mov	r30, r0
     246:	06 80       	ldd	r0, Z+6	; 0x06
     248:	f7 81       	ldd	r31, Z+7	; 0x07
     24a:	e0 2d       	mov	r30, r0
     24c:	15 82       	std	Z+5, r1	; 0x05
     24e:	14 82       	std	Z+4, r1	; 0x04
	updateAll(self, 0);
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	0e 94 57 00 	call	0xae	; 0xae <updateAll>
     258:	08 95       	ret

0000025a <checkTimer>:
		printOnBridge(11);
		AFTER(SEC(1), self, sendToBridge, NULL);
	}
}

void checkTimer(Inter *self) {
     25a:	cf 92       	push	r12
     25c:	df 92       	push	r13
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	ec 01       	movw	r28, r24
	if (self->timer >= 16) {
     26c:	8e 81       	ldd	r24, Y+6	; 0x06
     26e:	9f 81       	ldd	r25, Y+7	; 0x07
     270:	80 31       	cpi	r24, 0x10	; 16
     272:	91 05       	cpc	r25, r1
     274:	0c f4       	brge	.+2      	; 0x278 <checkTimer+0x1e>
     276:	5c c0       	rjmp	.+184    	; 0x330 <checkTimer+0xd6>
		self->timer = 0;
     278:	1f 82       	std	Y+7, r1	; 0x07
     27a:	1e 82       	std	Y+6, r1	; 0x06
		if (self->north->traf->n) {
     27c:	e8 81       	ld	r30, Y
     27e:	f9 81       	ldd	r31, Y+1	; 0x01
     280:	06 80       	ldd	r0, Z+6	; 0x06
     282:	f7 81       	ldd	r31, Z+7	; 0x07
     284:	e0 2d       	mov	r30, r0
     286:	85 81       	ldd	r24, Z+5	; 0x05
     288:	88 23       	and	r24, r24
     28a:	f1 f0       	breq	.+60     	; 0x2c8 <checkTimer+0x6e>
			SYNC(self->north->traf, turnNorth, false);
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	67 e1       	ldi	r22, 0x17	; 23
     292:	71 e1       	ldi	r23, 0x11	; 17
     294:	cf 01       	movw	r24, r30
     296:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <sync>
			AFTER(SEC(5), self->north->traf, turnSouth, true);
     29a:	e8 81       	ld	r30, Y
     29c:	f9 81       	ldd	r31, Y+1	; 0x01
     29e:	06 81       	ldd	r16, Z+6	; 0x06
     2a0:	17 81       	ldd	r17, Z+7	; 0x07
     2a2:	cc 24       	eor	r12, r12
     2a4:	c3 94       	inc	r12
     2a6:	d1 2c       	mov	r13, r1
     2a8:	0f 2e       	mov	r0, r31
     2aa:	fa e1       	ldi	r31, 0x1A	; 26
     2ac:	ef 2e       	mov	r14, r31
     2ae:	f1 e1       	ldi	r31, 0x11	; 17
     2b0:	ff 2e       	mov	r15, r31
     2b2:	f0 2d       	mov	r31, r0
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	a9 01       	movw	r20, r18
     2ba:	6a e5       	ldi	r22, 0x5A	; 90
     2bc:	72 e6       	ldi	r23, 0x62	; 98
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <async>
     2c6:	20 c0       	rjmp	.+64     	; 0x308 <checkTimer+0xae>
		} else if (self->north->traf->s) {
     2c8:	84 81       	ldd	r24, Z+4	; 0x04
     2ca:	88 23       	and	r24, r24
     2cc:	e9 f0       	breq	.+58     	; 0x308 <checkTimer+0xae>
			SYNC(self->north->traf, turnSouth, false);
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	6a e1       	ldi	r22, 0x1A	; 26
     2d4:	71 e1       	ldi	r23, 0x11	; 17
     2d6:	cf 01       	movw	r24, r30
     2d8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <sync>
			AFTER(SEC(5), self->north->traf, turnNorth, true);
     2dc:	e8 81       	ld	r30, Y
     2de:	f9 81       	ldd	r31, Y+1	; 0x01
     2e0:	06 81       	ldd	r16, Z+6	; 0x06
     2e2:	17 81       	ldd	r17, Z+7	; 0x07
     2e4:	cc 24       	eor	r12, r12
     2e6:	c3 94       	inc	r12
     2e8:	d1 2c       	mov	r13, r1
     2ea:	0f 2e       	mov	r0, r31
     2ec:	f7 e1       	ldi	r31, 0x17	; 23
     2ee:	ef 2e       	mov	r14, r31
     2f0:	f1 e1       	ldi	r31, 0x11	; 17
     2f2:	ff 2e       	mov	r15, r31
     2f4:	f0 2d       	mov	r31, r0
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	a9 01       	movw	r20, r18
     2fc:	6a e5       	ldi	r22, 0x5A	; 90
     2fe:	72 e6       	ldi	r23, 0x62	; 98
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <async>
		}
		AFTER(SEC(5), self, updateAll, 1);
     308:	cc 24       	eor	r12, r12
     30a:	c3 94       	inc	r12
     30c:	d1 2c       	mov	r13, r1
     30e:	0f 2e       	mov	r0, r31
     310:	f7 e5       	ldi	r31, 0x57	; 87
     312:	ef 2e       	mov	r14, r31
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	ff 2e       	mov	r15, r31
     318:	f0 2d       	mov	r31, r0
     31a:	8e 01       	movw	r16, r28
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	a9 01       	movw	r20, r18
     322:	6a e5       	ldi	r22, 0x5A	; 90
     324:	72 e6       	ldi	r23, 0x62	; 98
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <async>
     32e:	0e c0       	rjmp	.+28     	; 0x34c <checkTimer+0xf2>
	} else if (self->north->traf->n || self->north->traf->s) {
     330:	e8 81       	ld	r30, Y
     332:	f9 81       	ldd	r31, Y+1	; 0x01
     334:	06 80       	ldd	r0, Z+6	; 0x06
     336:	f7 81       	ldd	r31, Z+7	; 0x07
     338:	e0 2d       	mov	r30, r0
     33a:	25 81       	ldd	r18, Z+5	; 0x05
     33c:	21 11       	cpse	r18, r1
     33e:	03 c0       	rjmp	.+6      	; 0x346 <checkTimer+0xec>
     340:	24 81       	ldd	r18, Z+4	; 0x04
     342:	22 23       	and	r18, r18
     344:	19 f0       	breq	.+6      	; 0x34c <checkTimer+0xf2>
		self->timer++;
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	9f 83       	std	Y+7, r25	; 0x07
     34a:	8e 83       	std	Y+6, r24	; 0x06
	}
	updateAll(self, 0);
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	ce 01       	movw	r24, r28
     352:	0e 94 57 00 	call	0xae	; 0xae <updateAll>
}
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	df 90       	pop	r13
     364:	cf 90       	pop	r12
     366:	08 95       	ret

00000368 <sendDirectlyNorth>:
		updateAll(self, 0);
	}
}


void sendDirectlyNorth(Inter *self) {
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	ec 01       	movw	r28, r24
	self->north->traf->bridge++;
     37a:	e8 81       	ld	r30, Y
     37c:	f9 81       	ldd	r31, Y+1	; 0x01
     37e:	06 80       	ldd	r0, Z+6	; 0x06
     380:	f7 81       	ldd	r31, Z+7	; 0x07
     382:	e0 2d       	mov	r30, r0
     384:	86 81       	ldd	r24, Z+6	; 0x06
     386:	97 81       	ldd	r25, Z+7	; 0x07
     388:	0a 96       	adiw	r24, 0x0a	; 10
     38a:	97 83       	std	Z+7, r25	; 0x07
     38c:	86 83       	std	Z+6, r24	; 0x06
	self->north->traf->bridge->nToS++;
     38e:	e8 81       	ld	r30, Y
     390:	f9 81       	ldd	r31, Y+1	; 0x01
     392:	06 80       	ldd	r0, Z+6	; 0x06
     394:	f7 81       	ldd	r31, Z+7	; 0x07
     396:	e0 2d       	mov	r30, r0
     398:	06 80       	ldd	r0, Z+6	; 0x06
     39a:	f7 81       	ldd	r31, Z+7	; 0x07
     39c:	e0 2d       	mov	r30, r0
     39e:	86 81       	ldd	r24, Z+6	; 0x06
     3a0:	97 81       	ldd	r25, Z+7	; 0x07
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	97 83       	std	Z+7, r25	; 0x07
     3a6:	86 83       	std	Z+6, r24	; 0x06
	checkTimer(self);
     3a8:	ce 01       	movw	r24, r28
     3aa:	0e 94 2d 01 	call	0x25a	; 0x25a <checkTimer>
	AFTER(SEC(5), self, removeFromBridge, NULL);
     3ae:	c1 2c       	mov	r12, r1
     3b0:	d1 2c       	mov	r13, r1
     3b2:	0f 2e       	mov	r0, r31
     3b4:	f1 eb       	ldi	r31, 0xB1	; 177
     3b6:	ef 2e       	mov	r14, r31
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	ff 2e       	mov	r15, r31
     3bc:	f0 2d       	mov	r31, r0
     3be:	8e 01       	movw	r16, r28
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	a9 01       	movw	r20, r18
     3c6:	6a e5       	ldi	r22, 0x5A	; 90
     3c8:	72 e6       	ldi	r23, 0x62	; 98
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <async>
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	08 95       	ret

000003e4 <sendDirectlySouth>:

void sendDirectlySouth(Inter *self) {
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	ec 01       	movw	r28, r24
	self->north->traf->bridge++;
     3f6:	e8 81       	ld	r30, Y
     3f8:	f9 81       	ldd	r31, Y+1	; 0x01
     3fa:	06 80       	ldd	r0, Z+6	; 0x06
     3fc:	f7 81       	ldd	r31, Z+7	; 0x07
     3fe:	e0 2d       	mov	r30, r0
     400:	86 81       	ldd	r24, Z+6	; 0x06
     402:	97 81       	ldd	r25, Z+7	; 0x07
     404:	0a 96       	adiw	r24, 0x0a	; 10
     406:	97 83       	std	Z+7, r25	; 0x07
     408:	86 83       	std	Z+6, r24	; 0x06
	self->north->traf->bridge->sToN++;
     40a:	e8 81       	ld	r30, Y
     40c:	f9 81       	ldd	r31, Y+1	; 0x01
     40e:	06 80       	ldd	r0, Z+6	; 0x06
     410:	f7 81       	ldd	r31, Z+7	; 0x07
     412:	e0 2d       	mov	r30, r0
     414:	06 80       	ldd	r0, Z+6	; 0x06
     416:	f7 81       	ldd	r31, Z+7	; 0x07
     418:	e0 2d       	mov	r30, r0
     41a:	80 85       	ldd	r24, Z+8	; 0x08
     41c:	91 85       	ldd	r25, Z+9	; 0x09
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	91 87       	std	Z+9, r25	; 0x09
     422:	80 87       	std	Z+8, r24	; 0x08
	checkTimer(self);
     424:	ce 01       	movw	r24, r28
     426:	0e 94 2d 01 	call	0x25a	; 0x25a <checkTimer>
	AFTER(SEC(5), self, removeFromBridge, NULL);
     42a:	c1 2c       	mov	r12, r1
     42c:	d1 2c       	mov	r13, r1
     42e:	0f 2e       	mov	r0, r31
     430:	f1 eb       	ldi	r31, 0xB1	; 177
     432:	ef 2e       	mov	r14, r31
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	ff 2e       	mov	r15, r31
     438:	f0 2d       	mov	r31, r0
     43a:	8e 01       	movw	r16, r28
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	a9 01       	movw	r20, r18
     442:	6a e5       	ldi	r22, 0x5A	; 90
     444:	72 e6       	ldi	r23, 0x62	; 98
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <async>
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	08 95       	ret

00000460 <interSignal>:
	SYNC(self->l, printQS, self->south->carsInQ);
	SYNC(self->l, printOnBridge, self->north->traf->bridge->carsOnBridge);
	//update(self->north->carsInQ, self->south->carsInQ, self->north->traf->bridge->carsOnBridge);
}

void interSignal(Inter *self, int arg) {
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	dc 01       	movw	r26, r24
	if (self->running) {
     466:	18 96       	adiw	r26, 0x08	; 8
     468:	8c 91       	ld	r24, X
     46a:	18 97       	sbiw	r26, 0x08	; 8
     46c:	88 23       	and	r24, r24
     46e:	91 f1       	breq	.+100    	; 0x4d4 <interSignal+0x74>
		while ( !(UCSR0A & (1 << RXC0)) ) {}  // Wait until data is received
     470:	e0 ec       	ldi	r30, 0xC0	; 192
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	90 81       	ld	r25, Z
     476:	99 23       	and	r25, r25
     478:	ec f7       	brge	.-6      	; 0x474 <interSignal+0x14>
     47a:	ed 01       	movw	r28, r26
										  // Read the data from the RX buffer
		//while ( !(UCSR0A & (1 << UDRE0)) ) // Wait until buffer is empty
			//UDR0 = ReceivedChar;                    // Send the data to the TX buffer
		if (UDR0 == 0x6E) {
     47c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     480:	8e 36       	cpi	r24, 0x6E	; 110
     482:	21 f4       	brne	.+8      	; 0x48c <interSignal+0x2c>
			addToNorthQueue(self);	
     484:	cd 01       	movw	r24, r26
     486:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <addToNorthQueue>
     48a:	1f c0       	rjmp	.+62     	; 0x4ca <interSignal+0x6a>
		} else if (UDR0 & 1) {
     48c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     490:	80 ff       	sbrs	r24, 0
     492:	04 c0       	rjmp	.+8      	; 0x49c <interSignal+0x3c>
			sendDirectlyNorth(self);
     494:	cd 01       	movw	r24, r26
     496:	0e 94 b4 01 	call	0x368	; 0x368 <sendDirectlyNorth>
     49a:	17 c0       	rjmp	.+46     	; 0x4ca <interSignal+0x6a>
		} else if (UDR0 == 0x73) {
     49c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     4a0:	83 37       	cpi	r24, 0x73	; 115
     4a2:	21 f4       	brne	.+8      	; 0x4ac <interSignal+0x4c>
			addToSouthQueue(self);
     4a4:	cd 01       	movw	r24, r26
     4a6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <addToSouthQueue>
     4aa:	0f c0       	rjmp	.+30     	; 0x4ca <interSignal+0x6a>
		} else if (UDR0 & 3) {
     4ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     4b0:	83 70       	andi	r24, 0x03	; 3
     4b2:	21 f0       	breq	.+8      	; 0x4bc <interSignal+0x5c>
			sendDirectlySouth(self);
     4b4:	cd 01       	movw	r24, r26
     4b6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <sendDirectlySouth>
     4ba:	07 c0       	rjmp	.+14     	; 0x4ca <interSignal+0x6a>
		} else if (UDR0 == 0x65) {
     4bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     4c0:	85 36       	cpi	r24, 0x65	; 101
     4c2:	19 f4       	brne	.+6      	; 0x4ca <interSignal+0x6a>
			onExit(self);
     4c4:	cd 01       	movw	r24, r26
     4c6:	0e 94 0f 01 	call	0x21e	; 0x21e <onExit>
		}
		updateAll(self, 0);
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	ce 01       	movw	r24, r28
     4d0:	0e 94 57 00 	call	0xae	; 0xae <updateAll>
	}
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <initScreen>:
 */ 

#include "LCD.h"

void initScreen() {
	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
     4da:	86 e3       	ldi	r24, 0x36	; 54
     4dc:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
     4e0:	87 e0       	ldi	r24, 0x07	; 7
     4e2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
     4e6:	8f e0       	ldi	r24, 0x0F	; 15
     4e8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
     4ec:	80 ec       	ldi	r24, 0xC0	; 192
     4ee:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
     4f2:	9d e0       	ldi	r25, 0x0D	; 13
     4f4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	UCSR0B = (1 << RXEN0)|(1<<TXEN0)|(1 << RXCIE0);
     4f8:	98 e9       	ldi	r25, 0x98	; 152
     4fa:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1 << USBS0)|(1 << UCSZ01) | (1 << UCSZ00);   // Set frame: 8data, 1 stp
     4fe:	9e e0       	ldi	r25, 0x0E	; 14
     500:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UBRR0H = (MYUBRR >> 8);
     504:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = MYUBRR;
     508:	93 e3       	ldi	r25, 0x33	; 51
     50a:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	PRR = (0<<2);
     50e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>

	   
	PCMSK0 = 0x0c;
     512:	9c e0       	ldi	r25, 0x0C	; 12
     514:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	PCMSK1 = 0xd0;
     518:	20 ed       	ldi	r18, 0xD0	; 208
     51a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	EIFR = 0xc0;
     51e:	8c bb       	out	0x1c, r24	; 28
	EIMSK = 0xc0;
     520:	8d bb       	out	0x1d, r24	; 29
	PORTB = (1 << PB7)|(1 << PB6)|(1 << PB4);
     522:	25 b9       	out	0x05, r18	; 5
	PORTE = (1 << PE3)|(1 << PE2);
     524:	9e b9       	out	0x0e, r25	; 14
	DDRB = (0<<DDB7)|(0<<DDB6);
     526:	14 b8       	out	0x04, r1	; 4
	MCUCR = (0 << PUD);
     528:	15 be       	out	0x35, r1	; 53
     52a:	08 95       	ret

0000052c <updateTrafficSignal>:
	printQS(n2);
	printOnBridge(n3);
}

void updateTrafficSignal(TrafficLight *traff) {
	UDR0 = (traff->n << 4)|(!(traff->n) << 5)|(traff->s << 6)|(!(traff->s) << 7);
     52c:	fc 01       	movw	r30, r24
     52e:	35 81       	ldd	r19, Z+5	; 0x05
     530:	84 81       	ldd	r24, Z+4	; 0x04
     532:	f0 e1       	ldi	r31, 0x10	; 16
     534:	3f 9f       	mul	r19, r31
     536:	b0 01       	movw	r22, r0
     538:	11 24       	eor	r1, r1
     53a:	90 e4       	ldi	r25, 0x40	; 64
     53c:	89 9f       	mul	r24, r25
     53e:	a0 01       	movw	r20, r0
     540:	11 24       	eor	r1, r1
     542:	46 2b       	or	r20, r22
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	39 27       	eor	r19, r25
     548:	e0 e2       	ldi	r30, 0x20	; 32
     54a:	3e 9f       	mul	r19, r30
     54c:	90 01       	movw	r18, r0
     54e:	11 24       	eor	r1, r1
     550:	24 2b       	or	r18, r20
     552:	98 27       	eor	r25, r24
     554:	f0 e8       	ldi	r31, 0x80	; 128
     556:	9f 9f       	mul	r25, r31
     558:	c0 01       	movw	r24, r0
     55a:	11 24       	eor	r1, r1
     55c:	82 2b       	or	r24, r18
     55e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     562:	08 95       	ret

00000564 <writeChar>:
	pp++;
	writeChar( num % 10 + '0', pp);
}

void writeChar(char ch, int pos) {
	DISABLE;
     564:	78 94       	sei
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	fc 01       	movw	r30, r24
     56a:	f0 97       	sbiw	r30, 0x30	; 48
     56c:	ea 30       	cpi	r30, 0x0A	; 10
     56e:	f1 05       	cpc	r31, r1
     570:	08 f0       	brcs	.+2      	; 0x574 <writeChar+0x10>
     572:	69 c1       	rjmp	.+722    	; 0x846 <writeChar+0x2e2>
     574:	e2 5d       	subi	r30, 0xD2	; 210
     576:	ff 4f       	sbci	r31, 0xFF	; 255
     578:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__tablejump2__>
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
     584:	e1 e0       	ldi	r30, 0x01	; 1
     586:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	50 c0       	rjmp	.+160    	; 0x62e <writeChar+0xca>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
     592:	4e e0       	ldi	r20, 0x0E	; 14
     594:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     596:	e1 e0       	ldi	r30, 0x01	; 1
     598:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
     59e:	47 c0       	rjmp	.+142    	; 0x62e <writeChar+0xca>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
     5a4:	4b e0       	ldi	r20, 0x0B	; 11
     5a6:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     5a8:	e1 e0       	ldi	r30, 0x01	; 1
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     5b0:	3e c0       	rjmp	.+124    	; 0x62e <writeChar+0xca>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     5b6:	4b e0       	ldi	r20, 0x0B	; 11
     5b8:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
     5ba:	e5 e0       	ldi	r30, 0x05	; 5
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
     5c2:	35 c0       	rjmp	.+106    	; 0x62e <writeChar+0xca>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     5c4:	21 e0       	ldi	r18, 0x01	; 1
     5c6:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
     5c8:	4b e0       	ldi	r20, 0x0B	; 11
     5ca:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     5cc:	e4 e0       	ldi	r30, 0x04	; 4
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     5d4:	2c c0       	rjmp	.+88     	; 0x62e <writeChar+0xca>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
     5da:	4f e0       	ldi	r20, 0x0F	; 15
     5dc:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     5de:	e4 e0       	ldi	r30, 0x04	; 4
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     5e6:	23 c0       	rjmp	.+70     	; 0x62e <writeChar+0xca>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     5f0:	e1 e0       	ldi	r30, 0x01	; 1
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
     5f8:	1a c0       	rjmp	.+52     	; 0x62e <writeChar+0xca>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
     5fe:	4f e0       	ldi	r20, 0x0F	; 15
     600:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     602:	e5 e0       	ldi	r30, 0x05	; 5
     604:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     60a:	11 c0       	rjmp	.+34     	; 0x62e <writeChar+0xca>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     610:	4b e0       	ldi	r20, 0x0B	; 11
     612:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     614:	e5 e0       	ldi	r30, 0x05	; 5
     616:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     61c:	08 c0       	rjmp	.+16     	; 0x62e <writeChar+0xca>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
     622:	45 e0       	ldi	r20, 0x05	; 5
     624:	50 e0       	ldi	r21, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     626:	e5 e0       	ldi	r30, 0x05	; 5
     628:	f0 e0       	ldi	r31, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
     62e:	62 30       	cpi	r22, 0x02	; 2
     630:	71 05       	cpc	r23, r1
     632:	09 f4       	brne	.+2      	; 0x636 <writeChar+0xd2>
     634:	67 c0       	rjmp	.+206    	; 0x704 <writeChar+0x1a0>
     636:	3c f4       	brge	.+14     	; 0x646 <writeChar+0xe2>
     638:	61 15       	cp	r22, r1
     63a:	71 05       	cpc	r23, r1
     63c:	79 f0       	breq	.+30     	; 0x65c <writeChar+0xf8>
     63e:	61 30       	cpi	r22, 0x01	; 1
     640:	71 05       	cpc	r23, r1
     642:	51 f1       	breq	.+84     	; 0x698 <writeChar+0x134>
     644:	fd c0       	rjmp	.+506    	; 0x840 <writeChar+0x2dc>
     646:	64 30       	cpi	r22, 0x04	; 4
     648:	71 05       	cpc	r23, r1
     64a:	09 f4       	brne	.+2      	; 0x64e <writeChar+0xea>
     64c:	a5 c0       	rjmp	.+330    	; 0x798 <writeChar+0x234>
     64e:	0c f4       	brge	.+2      	; 0x652 <writeChar+0xee>
     650:	72 c0       	rjmp	.+228    	; 0x736 <writeChar+0x1d2>
     652:	65 30       	cpi	r22, 0x05	; 5
     654:	71 05       	cpc	r23, r1
     656:	09 f4       	brne	.+2      	; 0x65a <writeChar+0xf6>
     658:	bd c0       	rjmp	.+378    	; 0x7d4 <writeChar+0x270>
     65a:	f2 c0       	rjmp	.+484    	; 0x840 <writeChar+0x2dc>
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
     65c:	ac ee       	ldi	r26, 0xEC	; 236
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	6c 91       	ld	r22, X
     662:	66 7f       	andi	r22, 0xF6	; 246
     664:	6c 93       	st	X, r22
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
     666:	6c 91       	ld	r22, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     668:	60 7f       	andi	r22, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
     66a:	7c 91       	ld	r23, X
     66c:	86 2b       	or	r24, r22
     66e:	87 2b       	or	r24, r23
     670:	8c 93       	st	X, r24
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     672:	a1 ef       	ldi	r26, 0xF1	; 241
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	8c 91       	ld	r24, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     678:	80 7f       	andi	r24, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     67a:	e8 2b       	or	r30, r24
     67c:	ec 93       	st	X, r30
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     67e:	e6 ef       	ldi	r30, 0xF6	; 246
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     684:	80 7f       	andi	r24, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     686:	48 2b       	or	r20, r24
     688:	40 83       	st	Z, r20
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     68a:	eb ef       	ldi	r30, 0xFB	; 251
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     690:	80 7f       	andi	r24, 0xF0	; 240
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     692:	28 2b       	or	r18, r24
     694:	20 83       	st	Z, r18
		break;
     696:	d6 c0       	rjmp	.+428    	; 0x844 <writeChar+0x2e0>
	case 1:
		LCDDR0 &= 0x6F;
     698:	ac ee       	ldi	r26, 0xEC	; 236
     69a:	b0 e0       	ldi	r27, 0x00	; 0
     69c:	6c 91       	ld	r22, X
     69e:	6f 76       	andi	r22, 0x6F	; 111
     6a0:	6c 93       	st	X, r22
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
     6a2:	6c 91       	ld	r22, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     6a4:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
     6a6:	7c 91       	ld	r23, X
     6a8:	82 95       	swap	r24
     6aa:	92 95       	swap	r25
     6ac:	90 7f       	andi	r25, 0xF0	; 240
     6ae:	98 27       	eor	r25, r24
     6b0:	80 7f       	andi	r24, 0xF0	; 240
     6b2:	98 27       	eor	r25, r24
     6b4:	86 2b       	or	r24, r22
     6b6:	87 2b       	or	r24, r23
     6b8:	8c 93       	st	X, r24
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     6ba:	a1 ef       	ldi	r26, 0xF1	; 241
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	8c 91       	ld	r24, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     6c0:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     6c2:	e2 95       	swap	r30
     6c4:	f2 95       	swap	r31
     6c6:	f0 7f       	andi	r31, 0xF0	; 240
     6c8:	fe 27       	eor	r31, r30
     6ca:	e0 7f       	andi	r30, 0xF0	; 240
     6cc:	fe 27       	eor	r31, r30
     6ce:	e8 2b       	or	r30, r24
     6d0:	ec 93       	st	X, r30
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     6d2:	e6 ef       	ldi	r30, 0xF6	; 246
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     6d8:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     6da:	42 95       	swap	r20
     6dc:	52 95       	swap	r21
     6de:	50 7f       	andi	r21, 0xF0	; 240
     6e0:	54 27       	eor	r21, r20
     6e2:	40 7f       	andi	r20, 0xF0	; 240
     6e4:	54 27       	eor	r21, r20
     6e6:	48 2b       	or	r20, r24
     6e8:	40 83       	st	Z, r20
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     6ea:	eb ef       	ldi	r30, 0xFB	; 251
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     6f0:	8f 70       	andi	r24, 0x0F	; 15
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     6f2:	22 95       	swap	r18
     6f4:	32 95       	swap	r19
     6f6:	30 7f       	andi	r19, 0xF0	; 240
     6f8:	32 27       	eor	r19, r18
     6fa:	20 7f       	andi	r18, 0xF0	; 240
     6fc:	32 27       	eor	r19, r18
     6fe:	28 2b       	or	r18, r24
     700:	20 83       	st	Z, r18
		break;
     702:	a0 c0       	rjmp	.+320    	; 0x844 <writeChar+0x2e0>
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     704:	ad ee       	ldi	r26, 0xED	; 237
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	6c 91       	ld	r22, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     70a:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     70c:	86 2b       	or	r24, r22
     70e:	8c 93       	st	X, r24
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     710:	a2 ef       	ldi	r26, 0xF2	; 242
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	8c 91       	ld	r24, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     716:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     718:	e8 2b       	or	r30, r24
     71a:	ec 93       	st	X, r30
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     71c:	e7 ef       	ldi	r30, 0xF7	; 247
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     722:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     724:	48 2b       	or	r20, r24
     726:	40 83       	st	Z, r20
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     728:	ec ef       	ldi	r30, 0xFC	; 252
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     72e:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     730:	28 2b       	or	r18, r24
     732:	20 83       	st	Z, r18
		break;
     734:	87 c0       	rjmp	.+270    	; 0x844 <writeChar+0x2e0>
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     736:	ad ee       	ldi	r26, 0xED	; 237
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	6c 91       	ld	r22, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     73c:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     73e:	82 95       	swap	r24
     740:	92 95       	swap	r25
     742:	90 7f       	andi	r25, 0xF0	; 240
     744:	98 27       	eor	r25, r24
     746:	80 7f       	andi	r24, 0xF0	; 240
     748:	98 27       	eor	r25, r24
     74a:	86 2b       	or	r24, r22
     74c:	8c 93       	st	X, r24
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     74e:	a2 ef       	ldi	r26, 0xF2	; 242
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	8c 91       	ld	r24, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     754:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     756:	e2 95       	swap	r30
     758:	f2 95       	swap	r31
     75a:	f0 7f       	andi	r31, 0xF0	; 240
     75c:	fe 27       	eor	r31, r30
     75e:	e0 7f       	andi	r30, 0xF0	; 240
     760:	fe 27       	eor	r31, r30
     762:	e8 2b       	or	r30, r24
     764:	ec 93       	st	X, r30
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     766:	e7 ef       	ldi	r30, 0xF7	; 247
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     76c:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     76e:	42 95       	swap	r20
     770:	52 95       	swap	r21
     772:	50 7f       	andi	r21, 0xF0	; 240
     774:	54 27       	eor	r21, r20
     776:	40 7f       	andi	r20, 0xF0	; 240
     778:	54 27       	eor	r21, r20
     77a:	48 2b       	or	r20, r24
     77c:	40 83       	st	Z, r20
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     77e:	ec ef       	ldi	r30, 0xFC	; 252
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     784:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     786:	22 95       	swap	r18
     788:	32 95       	swap	r19
     78a:	30 7f       	andi	r19, 0xF0	; 240
     78c:	32 27       	eor	r19, r18
     78e:	20 7f       	andi	r18, 0xF0	; 240
     790:	32 27       	eor	r19, r18
     792:	28 2b       	or	r18, r24
     794:	20 83       	st	Z, r18
		break;
     796:	56 c0       	rjmp	.+172    	; 0x844 <writeChar+0x2e0>
	case 4:
		LCDDR2 &= 0xF6;
     798:	ae ee       	ldi	r26, 0xEE	; 238
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	6c 91       	ld	r22, X
     79e:	66 7f       	andi	r22, 0xF6	; 246
     7a0:	6c 93       	st	X, r22
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     7a2:	6c 91       	ld	r22, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     7a4:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     7a6:	7c 91       	ld	r23, X
     7a8:	86 2b       	or	r24, r22
     7aa:	87 2b       	or	r24, r23
     7ac:	8c 93       	st	X, r24
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     7ae:	a3 ef       	ldi	r26, 0xF3	; 243
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	8c 91       	ld	r24, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     7b4:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     7b6:	e8 2b       	or	r30, r24
     7b8:	ec 93       	st	X, r30
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     7ba:	e8 ef       	ldi	r30, 0xF8	; 248
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     7c0:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     7c2:	48 2b       	or	r20, r24
     7c4:	40 83       	st	Z, r20
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     7c6:	ed ef       	ldi	r30, 0xFD	; 253
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     7cc:	80 7f       	andi	r24, 0xF0	; 240
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     7ce:	28 2b       	or	r18, r24
     7d0:	20 83       	st	Z, r18
		break;
     7d2:	38 c0       	rjmp	.+112    	; 0x844 <writeChar+0x2e0>
	case 5:
		LCDDR2 &= 0x6F;
     7d4:	ae ee       	ldi	r26, 0xEE	; 238
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	6c 91       	ld	r22, X
     7da:	6f 76       	andi	r22, 0x6F	; 111
     7dc:	6c 93       	st	X, r22
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
     7de:	6c 91       	ld	r22, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     7e0:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
     7e2:	7c 91       	ld	r23, X
     7e4:	82 95       	swap	r24
     7e6:	92 95       	swap	r25
     7e8:	90 7f       	andi	r25, 0xF0	; 240
     7ea:	98 27       	eor	r25, r24
     7ec:	80 7f       	andi	r24, 0xF0	; 240
     7ee:	98 27       	eor	r25, r24
     7f0:	86 2b       	or	r24, r22
     7f2:	87 2b       	or	r24, r23
     7f4:	8c 93       	st	X, r24
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     7f6:	a3 ef       	ldi	r26, 0xF3	; 243
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	8c 91       	ld	r24, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     7fc:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     7fe:	e2 95       	swap	r30
     800:	f2 95       	swap	r31
     802:	f0 7f       	andi	r31, 0xF0	; 240
     804:	fe 27       	eor	r31, r30
     806:	e0 7f       	andi	r30, 0xF0	; 240
     808:	fe 27       	eor	r31, r30
     80a:	e8 2b       	or	r30, r24
     80c:	ec 93       	st	X, r30
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     80e:	e8 ef       	ldi	r30, 0xF8	; 248
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     814:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     816:	42 95       	swap	r20
     818:	52 95       	swap	r21
     81a:	50 7f       	andi	r21, 0xF0	; 240
     81c:	54 27       	eor	r21, r20
     81e:	40 7f       	andi	r20, 0xF0	; 240
     820:	54 27       	eor	r21, r20
     822:	48 2b       	or	r20, r24
     824:	40 83       	st	Z, r20
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     826:	ed ef       	ldi	r30, 0xFD	; 253
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     82c:	8f 70       	andi	r24, 0x0F	; 15
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     82e:	22 95       	swap	r18
     830:	32 95       	swap	r19
     832:	30 7f       	andi	r19, 0xF0	; 240
     834:	32 27       	eor	r19, r18
     836:	20 7f       	andi	r18, 0xF0	; 240
     838:	32 27       	eor	r19, r18
     83a:	28 2b       	or	r18, r24
     83c:	20 83       	st	Z, r18
		break;
     83e:	02 c0       	rjmp	.+4      	; 0x844 <writeChar+0x2e0>
	default:
		ENABLE;
     840:	f8 94       	cli
		return;
     842:	08 95       	ret
	}
	ENABLE;
     844:	f8 94       	cli
     846:	08 95       	ret

00000848 <printAt>:

void printOnBridge(int num) {
	printAt(num, 4);
}

void printAt(int num, int pos) {
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	7c 01       	movw	r14, r24
     856:	eb 01       	movw	r28, r22
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     858:	64 e6       	ldi	r22, 0x64	; 100
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	0e 94 1d 11 	call	0x223a	; 0x223a <__divmodhi4>
     860:	0a e0       	ldi	r16, 0x0A	; 10
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	b8 01       	movw	r22, r16
     866:	0e 94 1d 11 	call	0x223a	; 0x223a <__divmodhi4>
     86a:	86 2f       	mov	r24, r22
     86c:	be 01       	movw	r22, r28
     86e:	80 5d       	subi	r24, 0xD0	; 208
     870:	0e 94 b2 02 	call	0x564	; 0x564 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     874:	21 96       	adiw	r28, 0x01	; 1
     876:	c7 01       	movw	r24, r14
     878:	b8 01       	movw	r22, r16
     87a:	0e 94 1d 11 	call	0x223a	; 0x223a <__divmodhi4>
     87e:	be 01       	movw	r22, r28
     880:	80 5d       	subi	r24, 0xD0	; 208
     882:	0e 94 b2 02 	call	0x564	; 0x564 <writeChar>
}
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret

00000894 <printQN>:
void updateTrafficSignal(TrafficLight *traff) {
	UDR0 = (traff->n << 4)|(!(traff->n) << 5)|(traff->s << 6)|(!(traff->s) << 7);
}

void printQN(int num) {
	printAt(num, 0);
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	0e 94 24 04 	call	0x848	; 0x848 <printAt>
     89c:	08 95       	ret

0000089e <printQS>:
}

void printQS(int num) {
	printAt(num, 2);
     89e:	62 e0       	ldi	r22, 0x02	; 2
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	0e 94 24 04 	call	0x848	; 0x848 <printAt>
     8a6:	08 95       	ret

000008a8 <printOnBridge>:
}

void printOnBridge(int num) {
	printAt(num, 4);
     8a8:	64 e0       	ldi	r22, 0x04	; 4
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 24 04 	call	0x848	; 0x848 <printAt>
     8b0:	08 95       	ret

000008b2 <main>:
#include <avr/io.h>
#include "TinyTimber.h"
#include "Inter.h"

int main(void)
{
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	af 97       	sbiw	r28, 0x2f	; 47
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
	initScreen();
     8c6:	0e 94 6d 02 	call	0x4da	; 0x4da <initScreen>
	LCD l = initLCD();
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	19 82       	std	Y+1, r1	; 0x01
     8ce:	1c 82       	std	Y+4, r1	; 0x04
     8d0:	1b 82       	std	Y+3, r1	; 0x03
	OnBridge bridge = initOnBridge();
     8d2:	fe 01       	movw	r30, r28
     8d4:	35 96       	adiw	r30, 0x05	; 5
     8d6:	8a e0       	ldi	r24, 0x0A	; 10
     8d8:	df 01       	movw	r26, r30
     8da:	1d 92       	st	X+, r1
     8dc:	8a 95       	dec	r24
     8de:	e9 f7       	brne	.-6      	; 0x8da <main+0x28>
	TrafficLight tL = initTrafficLight(&bridge);
     8e0:	18 8a       	std	Y+16, r1	; 0x10
     8e2:	1f 86       	std	Y+15, r1	; 0x0f
     8e4:	1a 8a       	std	Y+18, r1	; 0x12
     8e6:	19 8a       	std	Y+17, r1	; 0x11
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	8b 8b       	std	Y+19, r24	; 0x13
     8ec:	1c 8a       	std	Y+20, r1	; 0x14
     8ee:	fe 8b       	std	Y+22, r31	; 0x16
     8f0:	ed 8b       	std	Y+21, r30	; 0x15
	BeforeBridge norr = initBeforeBridge(99, &tL);
     8f2:	18 8e       	std	Y+24, r1	; 0x18
     8f4:	1f 8a       	std	Y+23, r1	; 0x17
     8f6:	1a 8e       	std	Y+26, r1	; 0x1a
     8f8:	19 8e       	std	Y+25, r1	; 0x19
     8fa:	23 e6       	ldi	r18, 0x63	; 99
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	3c 8f       	std	Y+28, r19	; 0x1c
     900:	2b 8f       	std	Y+27, r18	; 0x1b
     902:	9e 01       	movw	r18, r28
     904:	21 5f       	subi	r18, 0xF1	; 241
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	3e 8f       	std	Y+30, r19	; 0x1e
     90a:	2d 8f       	std	Y+29, r18	; 0x1d
	BeforeBridge syd = initBeforeBridge(55, &tL);
     90c:	18 a2       	std	Y+32, r1	; 0x20
     90e:	1f 8e       	std	Y+31, r1	; 0x1f
     910:	1a a2       	std	Y+34, r1	; 0x22
     912:	19 a2       	std	Y+33, r1	; 0x21
     914:	47 e3       	ldi	r20, 0x37	; 55
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	5c a3       	std	Y+36, r21	; 0x24
     91a:	4b a3       	std	Y+35, r20	; 0x23
     91c:	3e a3       	std	Y+38, r19	; 0x26
     91e:	2d a3       	std	Y+37, r18	; 0x25
    Inter i = initInter(&norr, &syd, &l);
     920:	28 5f       	subi	r18, 0xF8	; 248
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	38 a7       	std	Y+40, r19	; 0x28
     926:	2f a3       	std	Y+39, r18	; 0x27
     928:	28 5f       	subi	r18, 0xF8	; 248
     92a:	3f 4f       	sbci	r19, 0xFF	; 255
     92c:	3a a7       	std	Y+42, r19	; 0x2a
     92e:	29 a7       	std	Y+41, r18	; 0x29
     930:	2e 51       	subi	r18, 0x1E	; 30
     932:	31 09       	sbc	r19, r1
     934:	3c a7       	std	Y+44, r19	; 0x2c
     936:	2b a7       	std	Y+43, r18	; 0x2b
     938:	1e a6       	std	Y+46, r1	; 0x2e
     93a:	1d a6       	std	Y+45, r1	; 0x2d
     93c:	8f a7       	std	Y+47, r24	; 0x2f
	onStart(&i);
     93e:	ce 01       	movw	r24, r28
     940:	87 96       	adiw	r24, 0x27	; 39
     942:	0e 94 02 01 	call	0x204	; 0x204 <onStart>
	INSTALL(&i, interSignal, IRQ_USART0_RX);
     946:	48 e0       	ldi	r20, 0x08	; 8
     948:	60 e3       	ldi	r22, 0x30	; 48
     94a:	72 e0       	ldi	r23, 0x02	; 2
     94c:	ce 01       	movw	r24, r28
     94e:	87 96       	adiw	r24, 0x27	; 39
     950:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <install>
	//INSTALL(&i, interSignal, IRQ_USART0_TX);
	//INSTALL(&i, interSignal, IRQ_USART0_UDRE);
	//return TINYTIMBER(&i, sendToBridge, NULL);
	return TINYTIMBER(&i, sendToBridge, NULL);
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	6a e8       	ldi	r22, 0x8A	; 138
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	ce 01       	movw	r24, r28
     95e:	87 96       	adiw	r24, 0x27	; 39
     960:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <tinytimber>


}
     964:	af 96       	adiw	r28, 0x2f	; 47
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <subCar>:

void addCar(OnBridge *self) {
	self->carsOnBridge++;
}

void subCar(OnBridge *self) {
     976:	fc 01       	movw	r30, r24
	self->carsOnBridge--;
     978:	84 81       	ldd	r24, Z+4	; 0x04
     97a:	95 81       	ldd	r25, Z+5	; 0x05
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	95 83       	std	Z+5, r25	; 0x05
     980:	84 83       	std	Z+4, r24	; 0x04
	if (self->nToS > 0) {
     982:	86 81       	ldd	r24, Z+6	; 0x06
     984:	97 81       	ldd	r25, Z+7	; 0x07
     986:	18 16       	cp	r1, r24
     988:	19 06       	cpc	r1, r25
     98a:	24 f4       	brge	.+8      	; 0x994 <subCar+0x1e>
		self->nToS--;
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	97 83       	std	Z+7, r25	; 0x07
     990:	86 83       	std	Z+6, r24	; 0x06
     992:	08 95       	ret
	} else if (self->sToN > 0) {
     994:	80 85       	ldd	r24, Z+8	; 0x08
     996:	91 85       	ldd	r25, Z+9	; 0x09
     998:	18 16       	cp	r1, r24
     99a:	19 06       	cpc	r1, r25
     99c:	1c f4       	brge	.+6      	; 0x9a4 <subCar+0x2e>
		self->sToN--;
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	91 87       	std	Z+9, r25	; 0x09
     9a2:	80 87       	std	Z+8, r24	; 0x08
     9a4:	08 95       	ret

000009a6 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <initialize+0x6>
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <initialize+0x8>
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	8b ef       	ldi	r24, 0xFB	; 251
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	2b ed       	ldi	r18, 0xDB	; 219
     9b8:	32 e0       	ldi	r19, 0x02	; 2
     9ba:	fc 01       	movw	r30, r24
     9bc:	70 97       	sbiw	r30, 0x10	; 16
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	80 83       	st	Z, r24
     9c2:	40 96       	adiw	r24, 0x10	; 16
     9c4:	82 17       	cp	r24, r18
     9c6:	93 07       	cpc	r25, r19
     9c8:	c1 f7       	brne	.-16     	; 0x9ba <initialize+0x14>
     9ca:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <messages+0xe1>
     9ce:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <messages+0xe0>
     9d2:	e6 e3       	ldi	r30, 0x36	; 54
     9d4:	f1 e0       	ldi	r31, 0x01	; 1
     9d6:	83 e5       	ldi	r24, 0x53	; 83
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	91 83       	std	Z+1, r25	; 0x01
     9dc:	80 83       	st	Z, r24
     9de:	80 e7       	ldi	r24, 0x70	; 112
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	96 8f       	std	Z+30, r25	; 0x1e
     9e4:	85 8f       	std	Z+29, r24	; 0x1d
     9e6:	ad e8       	ldi	r26, 0x8D	; 141
     9e8:	b1 e0       	ldi	r27, 0x01	; 1
     9ea:	b3 af       	std	Z+59, r27	; 0x3b
     9ec:	a2 af       	std	Z+58, r26	; 0x3a
     9ee:	1d 92       	st	X+, r1
     9f0:	1c 92       	st	X, r1
     9f2:	fa 83       	std	Y+2, r31	; 0x02
     9f4:	e9 83       	std	Y+1, r30	; 0x01
     9f6:	e7 e3       	ldi	r30, 0x37	; 55
     9f8:	f3 e0       	ldi	r31, 0x03	; 3
     9fa:	fc 83       	std	Y+4, r31	; 0x04
     9fc:	eb 83       	std	Y+3, r30	; 0x03
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	9a 81       	ldd	r25, Y+2	; 0x02
     a02:	06 96       	adiw	r24, 0x06	; 6
     a04:	0e 94 4b 11 	call	0x2296	; 0x2296 <setjmp>
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	e9 81       	ldd	r30, Y+1	; 0x01
     a0e:	fa 81       	ldd	r31, Y+2	; 0x02
     a10:	97 8b       	std	Z+23, r25	; 0x17
     a12:	86 8b       	std	Z+22, r24	; 0x16
     a14:	91 8f       	std	Z+25, r25	; 0x19
     a16:	80 8f       	std	Z+24, r24	; 0x18
     a18:	83 e7       	ldi	r24, 0x73	; 115
     a1a:	90 e1       	ldi	r25, 0x10	; 16
     a1c:	94 8f       	std	Z+28, r25	; 0x1c
     a1e:	83 8f       	std	Z+27, r24	; 0x1b
     a20:	15 82       	std	Z+5, r1	; 0x05
     a22:	14 82       	std	Z+4, r1	; 0x04
     a24:	7d 96       	adiw	r30, 0x1d	; 29
     a26:	fa 83       	std	Y+2, r31	; 0x02
     a28:	e9 83       	std	Y+1, r30	; 0x01
     a2a:	eb 81       	ldd	r30, Y+3	; 0x03
     a2c:	fc 81       	ldd	r31, Y+4	; 0x04
     a2e:	e0 5a       	subi	r30, 0xA0	; 160
     a30:	ff 4f       	sbci	r31, 0xFF	; 255
     a32:	fc 83       	std	Y+4, r31	; 0x04
     a34:	eb 83       	std	Y+3, r30	; 0x03
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	9a 81       	ldd	r25, Y+2	; 0x02
     a3a:	8a 5a       	subi	r24, 0xAA	; 170
     a3c:	91 40       	sbci	r25, 0x01	; 1
     a3e:	f9 f6       	brne	.-66     	; 0x9fe <initialize+0x58>
     a40:	ee ec       	ldi	r30, 0xCE	; 206
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	11 82       	std	Z+1, r1	; 0x01
     a46:	10 82       	st	Z, r1
     a48:	15 82       	std	Z+5, r1	; 0x05
     a4a:	14 82       	std	Z+4, r1	; 0x04
     a4c:	13 82       	std	Z+3, r1	; 0x03
     a4e:	12 82       	std	Z+2, r1	; 0x02
     a50:	e1 e6       	ldi	r30, 0x61	; 97
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 e8       	ldi	r24, 0x80	; 128
     a56:	80 83       	st	Z, r24
     a58:	10 82       	st	Z, r1
     a5a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a5e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <dispatch>:
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	00 d0       	rcall	.+0      	; 0xa82 <dispatch+0x6>
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	9a 83       	std	Y+2, r25	; 0x02
     a88:	89 83       	std	Y+1, r24	; 0x01
     a8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a8e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     a92:	06 96       	adiw	r24, 0x06	; 6
     a94:	0e 94 4b 11 	call	0x2296	; 0x2296 <setjmp>
     a98:	89 2b       	or	r24, r25
     a9a:	59 f4       	brne	.+22     	; 0xab2 <dispatch+0x36>
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     aa4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	06 96       	adiw	r24, 0x06	; 6
     aae:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <longjmp>
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <schedule>:
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <msgQ>
     ac8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <msgQ+0x1>
     acc:	30 97       	sbiw	r30, 0x00	; 0
     ace:	61 f1       	breq	.+88     	; 0xb28 <schedule+0x6c>
     ad0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     ad4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	31 f1       	breq	.+76     	; 0xb28 <schedule+0x6c>
     adc:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     ae0:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     ae4:	aa 81       	ldd	r26, Y+2	; 0x02
     ae6:	bb 81       	ldd	r27, Y+3	; 0x03
     ae8:	10 97       	sbiw	r26, 0x00	; 0
     aea:	79 f0       	breq	.+30     	; 0xb0a <schedule+0x4e>
     aec:	46 81       	ldd	r20, Z+6	; 0x06
     aee:	57 81       	ldd	r21, Z+7	; 0x07
     af0:	60 85       	ldd	r22, Z+8	; 0x08
     af2:	71 85       	ldd	r23, Z+9	; 0x09
     af4:	16 96       	adiw	r26, 0x06	; 6
     af6:	0d 91       	ld	r16, X+
     af8:	1d 91       	ld	r17, X+
     afa:	2d 91       	ld	r18, X+
     afc:	3c 91       	ld	r19, X
     afe:	19 97       	sbiw	r26, 0x09	; 9
     b00:	40 1b       	sub	r20, r16
     b02:	51 0b       	sbc	r21, r17
     b04:	62 0b       	sbc	r22, r18
     b06:	73 0b       	sbc	r23, r19
     b08:	7a f4       	brpl	.+30     	; 0xb28 <schedule+0x6c>
     b0a:	fc 01       	movw	r30, r24
     b0c:	20 81       	ld	r18, Z
     b0e:	31 81       	ldd	r19, Z+1	; 0x01
     b10:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     b14:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     b18:	d1 83       	std	Z+1, r29	; 0x01
     b1a:	c0 83       	st	Z, r28
     b1c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     b20:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     b24:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <__vector_1>:
     b32:	1f 92       	push	r1
     b34:	0f 92       	push	r0
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
     b54:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     b58:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     b5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b64:	c9 01       	movw	r24, r18
     b66:	03 2e       	mov	r0, r19
     b68:	00 0c       	add	r0, r0
     b6a:	aa 0b       	sbc	r26, r26
     b6c:	bb 0b       	sbc	r27, r27
     b6e:	dc 01       	movw	r26, r24
     b70:	99 27       	eor	r25, r25
     b72:	88 27       	eor	r24, r24
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	84 2b       	or	r24, r20
     b7a:	95 2b       	or	r25, r21
     b7c:	a6 2b       	or	r26, r22
     b7e:	b7 2b       	or	r27, r23
     b80:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     b84:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     b88:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     b8c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     b90:	b0 9b       	sbis	0x16, 0	; 22
     b92:	1b c0       	rjmp	.+54     	; 0xbca <__vector_1+0x98>
     b94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b9c:	c9 01       	movw	r24, r18
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	09 2e       	mov	r0, r25
     ba2:	00 0c       	add	r0, r0
     ba4:	aa 0b       	sbc	r26, r26
     ba6:	bb 0b       	sbc	r27, r27
     ba8:	dc 01       	movw	r26, r24
     baa:	99 27       	eor	r25, r25
     bac:	88 27       	eor	r24, r24
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	84 2b       	or	r24, r20
     bb4:	95 2b       	or	r25, r21
     bb6:	a6 2b       	or	r26, r22
     bb8:	b7 2b       	or	r27, r23
     bba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     bbe:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     bc2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     bc6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     bca:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <mtable>
     bce:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <mtable+0x1>
     bd2:	30 97       	sbiw	r30, 0x00	; 0
     bd4:	39 f0       	breq	.+14     	; 0xbe4 <__vector_1+0xb2>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <otable>
     bde:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <otable+0x1>
     be2:	09 95       	icall
     be4:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
     be8:	ff 91       	pop	r31
     bea:	ef 91       	pop	r30
     bec:	bf 91       	pop	r27
     bee:	af 91       	pop	r26
     bf0:	9f 91       	pop	r25
     bf2:	8f 91       	pop	r24
     bf4:	7f 91       	pop	r23
     bf6:	6f 91       	pop	r22
     bf8:	5f 91       	pop	r21
     bfa:	4f 91       	pop	r20
     bfc:	3f 91       	pop	r19
     bfe:	2f 91       	pop	r18
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <__vector_2>:
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	2f 93       	push	r18
     c16:	3f 93       	push	r19
     c18:	4f 93       	push	r20
     c1a:	5f 93       	push	r21
     c1c:	6f 93       	push	r22
     c1e:	7f 93       	push	r23
     c20:	8f 93       	push	r24
     c22:	9f 93       	push	r25
     c24:	af 93       	push	r26
     c26:	bf 93       	push	r27
     c28:	ef 93       	push	r30
     c2a:	ff 93       	push	r31
     c2c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     c30:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     c34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c3c:	c9 01       	movw	r24, r18
     c3e:	03 2e       	mov	r0, r19
     c40:	00 0c       	add	r0, r0
     c42:	aa 0b       	sbc	r26, r26
     c44:	bb 0b       	sbc	r27, r27
     c46:	dc 01       	movw	r26, r24
     c48:	99 27       	eor	r25, r25
     c4a:	88 27       	eor	r24, r24
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	84 2b       	or	r24, r20
     c52:	95 2b       	or	r25, r21
     c54:	a6 2b       	or	r26, r22
     c56:	b7 2b       	or	r27, r23
     c58:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     c5c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     c60:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     c64:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     c68:	b0 9b       	sbis	0x16, 0	; 22
     c6a:	1b c0       	rjmp	.+54     	; 0xca2 <__vector_2+0x98>
     c6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c74:	c9 01       	movw	r24, r18
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	09 2e       	mov	r0, r25
     c7a:	00 0c       	add	r0, r0
     c7c:	aa 0b       	sbc	r26, r26
     c7e:	bb 0b       	sbc	r27, r27
     c80:	dc 01       	movw	r26, r24
     c82:	99 27       	eor	r25, r25
     c84:	88 27       	eor	r24, r24
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	84 2b       	or	r24, r20
     c8c:	95 2b       	or	r25, r21
     c8e:	a6 2b       	or	r26, r22
     c90:	b7 2b       	or	r27, r23
     c92:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     c96:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     c9a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     c9e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     ca2:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <mtable+0x2>
     ca6:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <mtable+0x3>
     caa:	30 97       	sbiw	r30, 0x00	; 0
     cac:	39 f0       	breq	.+14     	; 0xcbc <__vector_2+0xb2>
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <otable+0x2>
     cb6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <otable+0x3>
     cba:	09 95       	icall
     cbc:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <__vector_3>:
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	2f 93       	push	r18
     cee:	3f 93       	push	r19
     cf0:	4f 93       	push	r20
     cf2:	5f 93       	push	r21
     cf4:	6f 93       	push	r22
     cf6:	7f 93       	push	r23
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	af 93       	push	r26
     cfe:	bf 93       	push	r27
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
     d04:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     d08:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     d0c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d10:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d14:	c9 01       	movw	r24, r18
     d16:	03 2e       	mov	r0, r19
     d18:	00 0c       	add	r0, r0
     d1a:	aa 0b       	sbc	r26, r26
     d1c:	bb 0b       	sbc	r27, r27
     d1e:	dc 01       	movw	r26, r24
     d20:	99 27       	eor	r25, r25
     d22:	88 27       	eor	r24, r24
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	84 2b       	or	r24, r20
     d2a:	95 2b       	or	r25, r21
     d2c:	a6 2b       	or	r26, r22
     d2e:	b7 2b       	or	r27, r23
     d30:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     d34:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     d38:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     d3c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     d40:	b0 9b       	sbis	0x16, 0	; 22
     d42:	1b c0       	rjmp	.+54     	; 0xd7a <__vector_3+0x98>
     d44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d4c:	c9 01       	movw	r24, r18
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	09 2e       	mov	r0, r25
     d52:	00 0c       	add	r0, r0
     d54:	aa 0b       	sbc	r26, r26
     d56:	bb 0b       	sbc	r27, r27
     d58:	dc 01       	movw	r26, r24
     d5a:	99 27       	eor	r25, r25
     d5c:	88 27       	eor	r24, r24
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	84 2b       	or	r24, r20
     d64:	95 2b       	or	r25, r21
     d66:	a6 2b       	or	r26, r22
     d68:	b7 2b       	or	r27, r23
     d6a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     d6e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     d72:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     d76:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     d7a:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <mtable+0x4>
     d7e:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <mtable+0x5>
     d82:	30 97       	sbiw	r30, 0x00	; 0
     d84:	39 f0       	breq	.+14     	; 0xd94 <__vector_3+0xb2>
     d86:	62 e0       	ldi	r22, 0x02	; 2
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <otable+0x4>
     d8e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <otable+0x5>
     d92:	09 95       	icall
     d94:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
     d98:	ff 91       	pop	r31
     d9a:	ef 91       	pop	r30
     d9c:	bf 91       	pop	r27
     d9e:	af 91       	pop	r26
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	7f 91       	pop	r23
     da6:	6f 91       	pop	r22
     da8:	5f 91       	pop	r21
     daa:	4f 91       	pop	r20
     dac:	3f 91       	pop	r19
     dae:	2f 91       	pop	r18
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_4>:
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
     ddc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     de0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     de4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     de8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dec:	c9 01       	movw	r24, r18
     dee:	03 2e       	mov	r0, r19
     df0:	00 0c       	add	r0, r0
     df2:	aa 0b       	sbc	r26, r26
     df4:	bb 0b       	sbc	r27, r27
     df6:	dc 01       	movw	r26, r24
     df8:	99 27       	eor	r25, r25
     dfa:	88 27       	eor	r24, r24
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	84 2b       	or	r24, r20
     e02:	95 2b       	or	r25, r21
     e04:	a6 2b       	or	r26, r22
     e06:	b7 2b       	or	r27, r23
     e08:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     e0c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     e10:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     e14:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     e18:	b0 9b       	sbis	0x16, 0	; 22
     e1a:	1b c0       	rjmp	.+54     	; 0xe52 <__vector_4+0x98>
     e1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e24:	c9 01       	movw	r24, r18
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	09 2e       	mov	r0, r25
     e2a:	00 0c       	add	r0, r0
     e2c:	aa 0b       	sbc	r26, r26
     e2e:	bb 0b       	sbc	r27, r27
     e30:	dc 01       	movw	r26, r24
     e32:	99 27       	eor	r25, r25
     e34:	88 27       	eor	r24, r24
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	84 2b       	or	r24, r20
     e3c:	95 2b       	or	r25, r21
     e3e:	a6 2b       	or	r26, r22
     e40:	b7 2b       	or	r27, r23
     e42:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     e46:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     e4a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     e4e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     e52:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mtable+0x6>
     e56:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mtable+0x7>
     e5a:	30 97       	sbiw	r30, 0x00	; 0
     e5c:	39 f0       	breq	.+14     	; 0xe6c <__vector_4+0xb2>
     e5e:	63 e0       	ldi	r22, 0x03	; 3
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <otable+0x6>
     e66:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <otable+0x7>
     e6a:	09 95       	icall
     e6c:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <__vector_5>:
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	2f 93       	push	r18
     e9e:	3f 93       	push	r19
     ea0:	4f 93       	push	r20
     ea2:	5f 93       	push	r21
     ea4:	6f 93       	push	r22
     ea6:	7f 93       	push	r23
     ea8:	8f 93       	push	r24
     eaa:	9f 93       	push	r25
     eac:	af 93       	push	r26
     eae:	bf 93       	push	r27
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
     eb4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     eb8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     ebc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ec0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ec4:	c9 01       	movw	r24, r18
     ec6:	03 2e       	mov	r0, r19
     ec8:	00 0c       	add	r0, r0
     eca:	aa 0b       	sbc	r26, r26
     ecc:	bb 0b       	sbc	r27, r27
     ece:	dc 01       	movw	r26, r24
     ed0:	99 27       	eor	r25, r25
     ed2:	88 27       	eor	r24, r24
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	84 2b       	or	r24, r20
     eda:	95 2b       	or	r25, r21
     edc:	a6 2b       	or	r26, r22
     ede:	b7 2b       	or	r27, r23
     ee0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     ee4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     ee8:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     eec:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     ef0:	b0 9b       	sbis	0x16, 0	; 22
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <__vector_5+0x98>
     ef4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ef8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     efc:	c9 01       	movw	r24, r18
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	09 2e       	mov	r0, r25
     f02:	00 0c       	add	r0, r0
     f04:	aa 0b       	sbc	r26, r26
     f06:	bb 0b       	sbc	r27, r27
     f08:	dc 01       	movw	r26, r24
     f0a:	99 27       	eor	r25, r25
     f0c:	88 27       	eor	r24, r24
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	84 2b       	or	r24, r20
     f14:	95 2b       	or	r25, r21
     f16:	a6 2b       	or	r26, r22
     f18:	b7 2b       	or	r27, r23
     f1a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     f1e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     f22:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     f26:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     f2a:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <mtable+0x8>
     f2e:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <mtable+0x9>
     f32:	30 97       	sbiw	r30, 0x00	; 0
     f34:	39 f0       	breq	.+14     	; 0xf44 <__vector_5+0xb2>
     f36:	64 e0       	ldi	r22, 0x04	; 4
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <otable+0x8>
     f3e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <otable+0x9>
     f42:	09 95       	icall
     f44:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
     f48:	ff 91       	pop	r31
     f4a:	ef 91       	pop	r30
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	7f 91       	pop	r23
     f56:	6f 91       	pop	r22
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <__vector_10>:
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	5f 93       	push	r21
     f7c:	6f 93       	push	r22
     f7e:	7f 93       	push	r23
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	ef 93       	push	r30
     f8a:	ff 93       	push	r31
     f8c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     f90:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     f94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f9c:	c9 01       	movw	r24, r18
     f9e:	03 2e       	mov	r0, r19
     fa0:	00 0c       	add	r0, r0
     fa2:	aa 0b       	sbc	r26, r26
     fa4:	bb 0b       	sbc	r27, r27
     fa6:	dc 01       	movw	r26, r24
     fa8:	99 27       	eor	r25, r25
     faa:	88 27       	eor	r24, r24
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	84 2b       	or	r24, r20
     fb2:	95 2b       	or	r25, r21
     fb4:	a6 2b       	or	r26, r22
     fb6:	b7 2b       	or	r27, r23
     fb8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     fbc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     fc0:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     fc4:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     fc8:	b0 9b       	sbis	0x16, 0	; 22
     fca:	1b c0       	rjmp	.+54     	; 0x1002 <__vector_10+0x98>
     fcc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fd0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fd4:	c9 01       	movw	r24, r18
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	09 2e       	mov	r0, r25
     fda:	00 0c       	add	r0, r0
     fdc:	aa 0b       	sbc	r26, r26
     fde:	bb 0b       	sbc	r27, r27
     fe0:	dc 01       	movw	r26, r24
     fe2:	99 27       	eor	r25, r25
     fe4:	88 27       	eor	r24, r24
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	84 2b       	or	r24, r20
     fec:	95 2b       	or	r25, r21
     fee:	a6 2b       	or	r26, r22
     ff0:	b7 2b       	or	r27, r23
     ff2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     ff6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     ffa:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     ffe:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1002:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable+0xa>
    1006:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0xb>
    100a:	30 97       	sbiw	r30, 0x00	; 0
    100c:	39 f0       	breq	.+14     	; 0x101c <__vector_10+0xb2>
    100e:	65 e0       	ldi	r22, 0x05	; 5
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable+0xa>
    1016:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0xb>
    101a:	09 95       	icall
    101c:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <__vector_11>:
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	6f 93       	push	r22
    1056:	7f 93       	push	r23
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	af 93       	push	r26
    105e:	bf 93       	push	r27
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
    1064:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1068:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    106c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1070:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1074:	c9 01       	movw	r24, r18
    1076:	03 2e       	mov	r0, r19
    1078:	00 0c       	add	r0, r0
    107a:	aa 0b       	sbc	r26, r26
    107c:	bb 0b       	sbc	r27, r27
    107e:	dc 01       	movw	r26, r24
    1080:	99 27       	eor	r25, r25
    1082:	88 27       	eor	r24, r24
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	84 2b       	or	r24, r20
    108a:	95 2b       	or	r25, r21
    108c:	a6 2b       	or	r26, r22
    108e:	b7 2b       	or	r27, r23
    1090:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1094:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1098:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    109c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    10a0:	b0 9b       	sbis	0x16, 0	; 22
    10a2:	1b c0       	rjmp	.+54     	; 0x10da <__vector_11+0x98>
    10a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10ac:	c9 01       	movw	r24, r18
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	09 2e       	mov	r0, r25
    10b2:	00 0c       	add	r0, r0
    10b4:	aa 0b       	sbc	r26, r26
    10b6:	bb 0b       	sbc	r27, r27
    10b8:	dc 01       	movw	r26, r24
    10ba:	99 27       	eor	r25, r25
    10bc:	88 27       	eor	r24, r24
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	84 2b       	or	r24, r20
    10c4:	95 2b       	or	r25, r21
    10c6:	a6 2b       	or	r26, r22
    10c8:	b7 2b       	or	r27, r23
    10ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    10ce:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    10d2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    10d6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    10da:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0xc>
    10de:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0xd>
    10e2:	30 97       	sbiw	r30, 0x00	; 0
    10e4:	39 f0       	breq	.+14     	; 0x10f4 <__vector_11+0xb2>
    10e6:	66 e0       	ldi	r22, 0x06	; 6
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0xc>
    10ee:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0xd>
    10f2:	09 95       	icall
    10f4:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_12>:
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    113c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1140:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1144:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1148:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    114c:	c9 01       	movw	r24, r18
    114e:	03 2e       	mov	r0, r19
    1150:	00 0c       	add	r0, r0
    1152:	aa 0b       	sbc	r26, r26
    1154:	bb 0b       	sbc	r27, r27
    1156:	dc 01       	movw	r26, r24
    1158:	99 27       	eor	r25, r25
    115a:	88 27       	eor	r24, r24
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	84 2b       	or	r24, r20
    1162:	95 2b       	or	r25, r21
    1164:	a6 2b       	or	r26, r22
    1166:	b7 2b       	or	r27, r23
    1168:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    116c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1170:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1174:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1178:	b0 9b       	sbis	0x16, 0	; 22
    117a:	1b c0       	rjmp	.+54     	; 0x11b2 <__vector_12+0x98>
    117c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1180:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1184:	c9 01       	movw	r24, r18
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	09 2e       	mov	r0, r25
    118a:	00 0c       	add	r0, r0
    118c:	aa 0b       	sbc	r26, r26
    118e:	bb 0b       	sbc	r27, r27
    1190:	dc 01       	movw	r26, r24
    1192:	99 27       	eor	r25, r25
    1194:	88 27       	eor	r24, r24
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	84 2b       	or	r24, r20
    119c:	95 2b       	or	r25, r21
    119e:	a6 2b       	or	r26, r22
    11a0:	b7 2b       	or	r27, r23
    11a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    11a6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    11aa:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    11ae:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    11b2:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0xe>
    11b6:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0xf>
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	39 f0       	breq	.+14     	; 0x11cc <__vector_12+0xb2>
    11be:	67 e0       	ldi	r22, 0x07	; 7
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0xe>
    11c6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0xf>
    11ca:	09 95       	icall
    11cc:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	bf 91       	pop	r27
    11d6:	af 91       	pop	r26
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	7f 91       	pop	r23
    11de:	6f 91       	pop	r22
    11e0:	5f 91       	pop	r21
    11e2:	4f 91       	pop	r20
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti

000011f2 <__vector_13>:
    11f2:	1f 92       	push	r1
    11f4:	0f 92       	push	r0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	0f 92       	push	r0
    11fa:	11 24       	eor	r1, r1
    11fc:	2f 93       	push	r18
    11fe:	3f 93       	push	r19
    1200:	4f 93       	push	r20
    1202:	5f 93       	push	r21
    1204:	6f 93       	push	r22
    1206:	7f 93       	push	r23
    1208:	8f 93       	push	r24
    120a:	9f 93       	push	r25
    120c:	af 93       	push	r26
    120e:	bf 93       	push	r27
    1210:	ef 93       	push	r30
    1212:	ff 93       	push	r31
    1214:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1218:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    121c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1220:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1224:	c9 01       	movw	r24, r18
    1226:	03 2e       	mov	r0, r19
    1228:	00 0c       	add	r0, r0
    122a:	aa 0b       	sbc	r26, r26
    122c:	bb 0b       	sbc	r27, r27
    122e:	dc 01       	movw	r26, r24
    1230:	99 27       	eor	r25, r25
    1232:	88 27       	eor	r24, r24
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	84 2b       	or	r24, r20
    123a:	95 2b       	or	r25, r21
    123c:	a6 2b       	or	r26, r22
    123e:	b7 2b       	or	r27, r23
    1240:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1244:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1248:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    124c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1250:	b0 9b       	sbis	0x16, 0	; 22
    1252:	1b c0       	rjmp	.+54     	; 0x128a <__vector_13+0x98>
    1254:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1258:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    125c:	c9 01       	movw	r24, r18
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	09 2e       	mov	r0, r25
    1262:	00 0c       	add	r0, r0
    1264:	aa 0b       	sbc	r26, r26
    1266:	bb 0b       	sbc	r27, r27
    1268:	dc 01       	movw	r26, r24
    126a:	99 27       	eor	r25, r25
    126c:	88 27       	eor	r24, r24
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	84 2b       	or	r24, r20
    1274:	95 2b       	or	r25, r21
    1276:	a6 2b       	or	r26, r22
    1278:	b7 2b       	or	r27, r23
    127a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    127e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1282:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1286:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    128a:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x10>
    128e:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x11>
    1292:	30 97       	sbiw	r30, 0x00	; 0
    1294:	39 f0       	breq	.+14     	; 0x12a4 <__vector_13+0xb2>
    1296:	68 e0       	ldi	r22, 0x08	; 8
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x10>
    129e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x11>
    12a2:	09 95       	icall
    12a4:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <__vector_14>:
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	2f 93       	push	r18
    12d6:	3f 93       	push	r19
    12d8:	4f 93       	push	r20
    12da:	5f 93       	push	r21
    12dc:	6f 93       	push	r22
    12de:	7f 93       	push	r23
    12e0:	8f 93       	push	r24
    12e2:	9f 93       	push	r25
    12e4:	af 93       	push	r26
    12e6:	bf 93       	push	r27
    12e8:	ef 93       	push	r30
    12ea:	ff 93       	push	r31
    12ec:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    12f0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    12f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12fc:	c9 01       	movw	r24, r18
    12fe:	03 2e       	mov	r0, r19
    1300:	00 0c       	add	r0, r0
    1302:	aa 0b       	sbc	r26, r26
    1304:	bb 0b       	sbc	r27, r27
    1306:	dc 01       	movw	r26, r24
    1308:	99 27       	eor	r25, r25
    130a:	88 27       	eor	r24, r24
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	84 2b       	or	r24, r20
    1312:	95 2b       	or	r25, r21
    1314:	a6 2b       	or	r26, r22
    1316:	b7 2b       	or	r27, r23
    1318:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    131c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1320:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1324:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1328:	b0 9b       	sbis	0x16, 0	; 22
    132a:	1b c0       	rjmp	.+54     	; 0x1362 <__vector_14+0x98>
    132c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1330:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1334:	c9 01       	movw	r24, r18
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	09 2e       	mov	r0, r25
    133a:	00 0c       	add	r0, r0
    133c:	aa 0b       	sbc	r26, r26
    133e:	bb 0b       	sbc	r27, r27
    1340:	dc 01       	movw	r26, r24
    1342:	99 27       	eor	r25, r25
    1344:	88 27       	eor	r24, r24
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	84 2b       	or	r24, r20
    134c:	95 2b       	or	r25, r21
    134e:	a6 2b       	or	r26, r22
    1350:	b7 2b       	or	r27, r23
    1352:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1356:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    135a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    135e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1362:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x12>
    1366:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x13>
    136a:	30 97       	sbiw	r30, 0x00	; 0
    136c:	39 f0       	breq	.+14     	; 0x137c <__vector_14+0xb2>
    136e:	69 e0       	ldi	r22, 0x09	; 9
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x12>
    1376:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x13>
    137a:	09 95       	icall
    137c:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    1380:	ff 91       	pop	r31
    1382:	ef 91       	pop	r30
    1384:	bf 91       	pop	r27
    1386:	af 91       	pop	r26
    1388:	9f 91       	pop	r25
    138a:	8f 91       	pop	r24
    138c:	7f 91       	pop	r23
    138e:	6f 91       	pop	r22
    1390:	5f 91       	pop	r21
    1392:	4f 91       	pop	r20
    1394:	3f 91       	pop	r19
    1396:	2f 91       	pop	r18
    1398:	0f 90       	pop	r0
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	0f 90       	pop	r0
    139e:	1f 90       	pop	r1
    13a0:	18 95       	reti

000013a2 <__vector_15>:
    13a2:	1f 92       	push	r1
    13a4:	0f 92       	push	r0
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	0f 92       	push	r0
    13aa:	11 24       	eor	r1, r1
    13ac:	2f 93       	push	r18
    13ae:	3f 93       	push	r19
    13b0:	4f 93       	push	r20
    13b2:	5f 93       	push	r21
    13b4:	6f 93       	push	r22
    13b6:	7f 93       	push	r23
    13b8:	8f 93       	push	r24
    13ba:	9f 93       	push	r25
    13bc:	af 93       	push	r26
    13be:	bf 93       	push	r27
    13c0:	ef 93       	push	r30
    13c2:	ff 93       	push	r31
    13c4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    13c8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    13cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13d4:	c9 01       	movw	r24, r18
    13d6:	03 2e       	mov	r0, r19
    13d8:	00 0c       	add	r0, r0
    13da:	aa 0b       	sbc	r26, r26
    13dc:	bb 0b       	sbc	r27, r27
    13de:	dc 01       	movw	r26, r24
    13e0:	99 27       	eor	r25, r25
    13e2:	88 27       	eor	r24, r24
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	84 2b       	or	r24, r20
    13ea:	95 2b       	or	r25, r21
    13ec:	a6 2b       	or	r26, r22
    13ee:	b7 2b       	or	r27, r23
    13f0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    13f4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    13f8:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    13fc:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1400:	b0 9b       	sbis	0x16, 0	; 22
    1402:	1b c0       	rjmp	.+54     	; 0x143a <__vector_15+0x98>
    1404:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1408:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    140c:	c9 01       	movw	r24, r18
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	09 2e       	mov	r0, r25
    1412:	00 0c       	add	r0, r0
    1414:	aa 0b       	sbc	r26, r26
    1416:	bb 0b       	sbc	r27, r27
    1418:	dc 01       	movw	r26, r24
    141a:	99 27       	eor	r25, r25
    141c:	88 27       	eor	r24, r24
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	84 2b       	or	r24, r20
    1424:	95 2b       	or	r25, r21
    1426:	a6 2b       	or	r26, r22
    1428:	b7 2b       	or	r27, r23
    142a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    142e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1432:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1436:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    143a:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0x14>
    143e:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x15>
    1442:	30 97       	sbiw	r30, 0x00	; 0
    1444:	39 f0       	breq	.+14     	; 0x1454 <__vector_15+0xb2>
    1446:	6a e0       	ldi	r22, 0x0A	; 10
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0x14>
    144e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x15>
    1452:	09 95       	icall
    1454:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_16>:
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	2f 93       	push	r18
    1486:	3f 93       	push	r19
    1488:	4f 93       	push	r20
    148a:	5f 93       	push	r21
    148c:	6f 93       	push	r22
    148e:	7f 93       	push	r23
    1490:	8f 93       	push	r24
    1492:	9f 93       	push	r25
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31
    149c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    14a0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    14a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14ac:	c9 01       	movw	r24, r18
    14ae:	03 2e       	mov	r0, r19
    14b0:	00 0c       	add	r0, r0
    14b2:	aa 0b       	sbc	r26, r26
    14b4:	bb 0b       	sbc	r27, r27
    14b6:	dc 01       	movw	r26, r24
    14b8:	99 27       	eor	r25, r25
    14ba:	88 27       	eor	r24, r24
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	84 2b       	or	r24, r20
    14c2:	95 2b       	or	r25, r21
    14c4:	a6 2b       	or	r26, r22
    14c6:	b7 2b       	or	r27, r23
    14c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    14cc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    14d0:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    14d4:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    14d8:	b0 9b       	sbis	0x16, 0	; 22
    14da:	1b c0       	rjmp	.+54     	; 0x1512 <__vector_16+0x98>
    14dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14e4:	c9 01       	movw	r24, r18
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	09 2e       	mov	r0, r25
    14ea:	00 0c       	add	r0, r0
    14ec:	aa 0b       	sbc	r26, r26
    14ee:	bb 0b       	sbc	r27, r27
    14f0:	dc 01       	movw	r26, r24
    14f2:	99 27       	eor	r25, r25
    14f4:	88 27       	eor	r24, r24
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	84 2b       	or	r24, r20
    14fc:	95 2b       	or	r25, r21
    14fe:	a6 2b       	or	r26, r22
    1500:	b7 2b       	or	r27, r23
    1502:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1506:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    150a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    150e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1512:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x16>
    1516:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x17>
    151a:	30 97       	sbiw	r30, 0x00	; 0
    151c:	39 f0       	breq	.+14     	; 0x152c <__vector_16+0xb2>
    151e:	6b e0       	ldi	r22, 0x0B	; 11
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x16>
    1526:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x17>
    152a:	09 95       	icall
    152c:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    1530:	ff 91       	pop	r31
    1532:	ef 91       	pop	r30
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	0f 90       	pop	r0
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	0f 90       	pop	r0
    154e:	1f 90       	pop	r1
    1550:	18 95       	reti

00001552 <__vector_17>:
    1552:	1f 92       	push	r1
    1554:	0f 92       	push	r0
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	0f 92       	push	r0
    155a:	11 24       	eor	r1, r1
    155c:	2f 93       	push	r18
    155e:	3f 93       	push	r19
    1560:	4f 93       	push	r20
    1562:	5f 93       	push	r21
    1564:	6f 93       	push	r22
    1566:	7f 93       	push	r23
    1568:	8f 93       	push	r24
    156a:	9f 93       	push	r25
    156c:	af 93       	push	r26
    156e:	bf 93       	push	r27
    1570:	ef 93       	push	r30
    1572:	ff 93       	push	r31
    1574:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1578:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    157c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1580:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1584:	c9 01       	movw	r24, r18
    1586:	03 2e       	mov	r0, r19
    1588:	00 0c       	add	r0, r0
    158a:	aa 0b       	sbc	r26, r26
    158c:	bb 0b       	sbc	r27, r27
    158e:	dc 01       	movw	r26, r24
    1590:	99 27       	eor	r25, r25
    1592:	88 27       	eor	r24, r24
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	84 2b       	or	r24, r20
    159a:	95 2b       	or	r25, r21
    159c:	a6 2b       	or	r26, r22
    159e:	b7 2b       	or	r27, r23
    15a0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    15a4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    15a8:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    15ac:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    15b0:	b0 9b       	sbis	0x16, 0	; 22
    15b2:	1b c0       	rjmp	.+54     	; 0x15ea <__vector_17+0x98>
    15b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15bc:	c9 01       	movw	r24, r18
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	09 2e       	mov	r0, r25
    15c2:	00 0c       	add	r0, r0
    15c4:	aa 0b       	sbc	r26, r26
    15c6:	bb 0b       	sbc	r27, r27
    15c8:	dc 01       	movw	r26, r24
    15ca:	99 27       	eor	r25, r25
    15cc:	88 27       	eor	r24, r24
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	84 2b       	or	r24, r20
    15d4:	95 2b       	or	r25, r21
    15d6:	a6 2b       	or	r26, r22
    15d8:	b7 2b       	or	r27, r23
    15da:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    15de:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    15e2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    15e6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    15ea:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x18>
    15ee:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x19>
    15f2:	30 97       	sbiw	r30, 0x00	; 0
    15f4:	39 f0       	breq	.+14     	; 0x1604 <__vector_17+0xb2>
    15f6:	6c e0       	ldi	r22, 0x0C	; 12
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x18>
    15fe:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x19>
    1602:	09 95       	icall
    1604:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    1608:	ff 91       	pop	r31
    160a:	ef 91       	pop	r30
    160c:	bf 91       	pop	r27
    160e:	af 91       	pop	r26
    1610:	9f 91       	pop	r25
    1612:	8f 91       	pop	r24
    1614:	7f 91       	pop	r23
    1616:	6f 91       	pop	r22
    1618:	5f 91       	pop	r21
    161a:	4f 91       	pop	r20
    161c:	3f 91       	pop	r19
    161e:	2f 91       	pop	r18
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	0f 90       	pop	r0
    1626:	1f 90       	pop	r1
    1628:	18 95       	reti

0000162a <__vector_18>:
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	2f 93       	push	r18
    1636:	3f 93       	push	r19
    1638:	4f 93       	push	r20
    163a:	5f 93       	push	r21
    163c:	6f 93       	push	r22
    163e:	7f 93       	push	r23
    1640:	8f 93       	push	r24
    1642:	9f 93       	push	r25
    1644:	af 93       	push	r26
    1646:	bf 93       	push	r27
    1648:	ef 93       	push	r30
    164a:	ff 93       	push	r31
    164c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1650:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1654:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1658:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    165c:	c9 01       	movw	r24, r18
    165e:	03 2e       	mov	r0, r19
    1660:	00 0c       	add	r0, r0
    1662:	aa 0b       	sbc	r26, r26
    1664:	bb 0b       	sbc	r27, r27
    1666:	dc 01       	movw	r26, r24
    1668:	99 27       	eor	r25, r25
    166a:	88 27       	eor	r24, r24
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	84 2b       	or	r24, r20
    1672:	95 2b       	or	r25, r21
    1674:	a6 2b       	or	r26, r22
    1676:	b7 2b       	or	r27, r23
    1678:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    167c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1680:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1684:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1688:	b0 9b       	sbis	0x16, 0	; 22
    168a:	1b c0       	rjmp	.+54     	; 0x16c2 <__vector_18+0x98>
    168c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1690:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1694:	c9 01       	movw	r24, r18
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	09 2e       	mov	r0, r25
    169a:	00 0c       	add	r0, r0
    169c:	aa 0b       	sbc	r26, r26
    169e:	bb 0b       	sbc	r27, r27
    16a0:	dc 01       	movw	r26, r24
    16a2:	99 27       	eor	r25, r25
    16a4:	88 27       	eor	r24, r24
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	84 2b       	or	r24, r20
    16ac:	95 2b       	or	r25, r21
    16ae:	a6 2b       	or	r26, r22
    16b0:	b7 2b       	or	r27, r23
    16b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    16b6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    16ba:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    16be:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    16c2:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x1a>
    16c6:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x1b>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	39 f0       	breq	.+14     	; 0x16dc <__vector_18+0xb2>
    16ce:	6d e0       	ldi	r22, 0x0D	; 13
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x1a>
    16d6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x1b>
    16da:	09 95       	icall
    16dc:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    16e0:	ff 91       	pop	r31
    16e2:	ef 91       	pop	r30
    16e4:	bf 91       	pop	r27
    16e6:	af 91       	pop	r26
    16e8:	9f 91       	pop	r25
    16ea:	8f 91       	pop	r24
    16ec:	7f 91       	pop	r23
    16ee:	6f 91       	pop	r22
    16f0:	5f 91       	pop	r21
    16f2:	4f 91       	pop	r20
    16f4:	3f 91       	pop	r19
    16f6:	2f 91       	pop	r18
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	0f 90       	pop	r0
    16fe:	1f 90       	pop	r1
    1700:	18 95       	reti

00001702 <__vector_19>:
    1702:	1f 92       	push	r1
    1704:	0f 92       	push	r0
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	0f 92       	push	r0
    170a:	11 24       	eor	r1, r1
    170c:	2f 93       	push	r18
    170e:	3f 93       	push	r19
    1710:	4f 93       	push	r20
    1712:	5f 93       	push	r21
    1714:	6f 93       	push	r22
    1716:	7f 93       	push	r23
    1718:	8f 93       	push	r24
    171a:	9f 93       	push	r25
    171c:	af 93       	push	r26
    171e:	bf 93       	push	r27
    1720:	ef 93       	push	r30
    1722:	ff 93       	push	r31
    1724:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1728:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    172c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1730:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1734:	c9 01       	movw	r24, r18
    1736:	03 2e       	mov	r0, r19
    1738:	00 0c       	add	r0, r0
    173a:	aa 0b       	sbc	r26, r26
    173c:	bb 0b       	sbc	r27, r27
    173e:	dc 01       	movw	r26, r24
    1740:	99 27       	eor	r25, r25
    1742:	88 27       	eor	r24, r24
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	84 2b       	or	r24, r20
    174a:	95 2b       	or	r25, r21
    174c:	a6 2b       	or	r26, r22
    174e:	b7 2b       	or	r27, r23
    1750:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1754:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1758:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    175c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1760:	b0 9b       	sbis	0x16, 0	; 22
    1762:	1b c0       	rjmp	.+54     	; 0x179a <__vector_19+0x98>
    1764:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1768:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    176c:	c9 01       	movw	r24, r18
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	09 2e       	mov	r0, r25
    1772:	00 0c       	add	r0, r0
    1774:	aa 0b       	sbc	r26, r26
    1776:	bb 0b       	sbc	r27, r27
    1778:	dc 01       	movw	r26, r24
    177a:	99 27       	eor	r25, r25
    177c:	88 27       	eor	r24, r24
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	84 2b       	or	r24, r20
    1784:	95 2b       	or	r25, r21
    1786:	a6 2b       	or	r26, r22
    1788:	b7 2b       	or	r27, r23
    178a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    178e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1792:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1796:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    179a:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x1c>
    179e:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x1d>
    17a2:	30 97       	sbiw	r30, 0x00	; 0
    17a4:	39 f0       	breq	.+14     	; 0x17b4 <__vector_19+0xb2>
    17a6:	6e e0       	ldi	r22, 0x0E	; 14
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x1c>
    17ae:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x1d>
    17b2:	09 95       	icall
    17b4:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    17b8:	ff 91       	pop	r31
    17ba:	ef 91       	pop	r30
    17bc:	bf 91       	pop	r27
    17be:	af 91       	pop	r26
    17c0:	9f 91       	pop	r25
    17c2:	8f 91       	pop	r24
    17c4:	7f 91       	pop	r23
    17c6:	6f 91       	pop	r22
    17c8:	5f 91       	pop	r21
    17ca:	4f 91       	pop	r20
    17cc:	3f 91       	pop	r19
    17ce:	2f 91       	pop	r18
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	0f 90       	pop	r0
    17d6:	1f 90       	pop	r1
    17d8:	18 95       	reti

000017da <__vector_20>:
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	2f 93       	push	r18
    17e6:	3f 93       	push	r19
    17e8:	4f 93       	push	r20
    17ea:	5f 93       	push	r21
    17ec:	6f 93       	push	r22
    17ee:	7f 93       	push	r23
    17f0:	8f 93       	push	r24
    17f2:	9f 93       	push	r25
    17f4:	af 93       	push	r26
    17f6:	bf 93       	push	r27
    17f8:	ef 93       	push	r30
    17fa:	ff 93       	push	r31
    17fc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1800:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1804:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1808:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    180c:	c9 01       	movw	r24, r18
    180e:	03 2e       	mov	r0, r19
    1810:	00 0c       	add	r0, r0
    1812:	aa 0b       	sbc	r26, r26
    1814:	bb 0b       	sbc	r27, r27
    1816:	dc 01       	movw	r26, r24
    1818:	99 27       	eor	r25, r25
    181a:	88 27       	eor	r24, r24
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	84 2b       	or	r24, r20
    1822:	95 2b       	or	r25, r21
    1824:	a6 2b       	or	r26, r22
    1826:	b7 2b       	or	r27, r23
    1828:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    182c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1830:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1834:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1838:	b0 9b       	sbis	0x16, 0	; 22
    183a:	1b c0       	rjmp	.+54     	; 0x1872 <__vector_20+0x98>
    183c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1840:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1844:	c9 01       	movw	r24, r18
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	09 2e       	mov	r0, r25
    184a:	00 0c       	add	r0, r0
    184c:	aa 0b       	sbc	r26, r26
    184e:	bb 0b       	sbc	r27, r27
    1850:	dc 01       	movw	r26, r24
    1852:	99 27       	eor	r25, r25
    1854:	88 27       	eor	r24, r24
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	84 2b       	or	r24, r20
    185c:	95 2b       	or	r25, r21
    185e:	a6 2b       	or	r26, r22
    1860:	b7 2b       	or	r27, r23
    1862:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1866:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    186a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    186e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1872:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x1e>
    1876:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x1f>
    187a:	30 97       	sbiw	r30, 0x00	; 0
    187c:	39 f0       	breq	.+14     	; 0x188c <__vector_20+0xb2>
    187e:	6f e0       	ldi	r22, 0x0F	; 15
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x1e>
    1886:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x1f>
    188a:	09 95       	icall
    188c:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	0f 90       	pop	r0
    18ae:	1f 90       	pop	r1
    18b0:	18 95       	reti

000018b2 <__vector_21>:
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	0f 92       	push	r0
    18ba:	11 24       	eor	r1, r1
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	4f 93       	push	r20
    18c2:	5f 93       	push	r21
    18c4:	6f 93       	push	r22
    18c6:	7f 93       	push	r23
    18c8:	8f 93       	push	r24
    18ca:	9f 93       	push	r25
    18cc:	af 93       	push	r26
    18ce:	bf 93       	push	r27
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
    18d4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    18d8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    18dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18e4:	c9 01       	movw	r24, r18
    18e6:	03 2e       	mov	r0, r19
    18e8:	00 0c       	add	r0, r0
    18ea:	aa 0b       	sbc	r26, r26
    18ec:	bb 0b       	sbc	r27, r27
    18ee:	dc 01       	movw	r26, r24
    18f0:	99 27       	eor	r25, r25
    18f2:	88 27       	eor	r24, r24
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	84 2b       	or	r24, r20
    18fa:	95 2b       	or	r25, r21
    18fc:	a6 2b       	or	r26, r22
    18fe:	b7 2b       	or	r27, r23
    1900:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1904:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1908:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    190c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1910:	b0 9b       	sbis	0x16, 0	; 22
    1912:	1b c0       	rjmp	.+54     	; 0x194a <__vector_21+0x98>
    1914:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1918:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    191c:	c9 01       	movw	r24, r18
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	09 2e       	mov	r0, r25
    1922:	00 0c       	add	r0, r0
    1924:	aa 0b       	sbc	r26, r26
    1926:	bb 0b       	sbc	r27, r27
    1928:	dc 01       	movw	r26, r24
    192a:	99 27       	eor	r25, r25
    192c:	88 27       	eor	r24, r24
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	84 2b       	or	r24, r20
    1934:	95 2b       	or	r25, r21
    1936:	a6 2b       	or	r26, r22
    1938:	b7 2b       	or	r27, r23
    193a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    193e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1942:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1946:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    194a:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x20>
    194e:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x21>
    1952:	30 97       	sbiw	r30, 0x00	; 0
    1954:	39 f0       	breq	.+14     	; 0x1964 <__vector_21+0xb2>
    1956:	60 e1       	ldi	r22, 0x10	; 16
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x20>
    195e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x21>
    1962:	09 95       	icall
    1964:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    1968:	ff 91       	pop	r31
    196a:	ef 91       	pop	r30
    196c:	bf 91       	pop	r27
    196e:	af 91       	pop	r26
    1970:	9f 91       	pop	r25
    1972:	8f 91       	pop	r24
    1974:	7f 91       	pop	r23
    1976:	6f 91       	pop	r22
    1978:	5f 91       	pop	r21
    197a:	4f 91       	pop	r20
    197c:	3f 91       	pop	r19
    197e:	2f 91       	pop	r18
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	0f 90       	pop	r0
    1986:	1f 90       	pop	r1
    1988:	18 95       	reti

0000198a <__vector_22>:
    198a:	1f 92       	push	r1
    198c:	0f 92       	push	r0
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	0f 92       	push	r0
    1992:	11 24       	eor	r1, r1
    1994:	2f 93       	push	r18
    1996:	3f 93       	push	r19
    1998:	4f 93       	push	r20
    199a:	5f 93       	push	r21
    199c:	6f 93       	push	r22
    199e:	7f 93       	push	r23
    19a0:	8f 93       	push	r24
    19a2:	9f 93       	push	r25
    19a4:	af 93       	push	r26
    19a6:	bf 93       	push	r27
    19a8:	ef 93       	push	r30
    19aa:	ff 93       	push	r31
    19ac:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    19b0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    19b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19bc:	c9 01       	movw	r24, r18
    19be:	03 2e       	mov	r0, r19
    19c0:	00 0c       	add	r0, r0
    19c2:	aa 0b       	sbc	r26, r26
    19c4:	bb 0b       	sbc	r27, r27
    19c6:	dc 01       	movw	r26, r24
    19c8:	99 27       	eor	r25, r25
    19ca:	88 27       	eor	r24, r24
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	84 2b       	or	r24, r20
    19d2:	95 2b       	or	r25, r21
    19d4:	a6 2b       	or	r26, r22
    19d6:	b7 2b       	or	r27, r23
    19d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    19dc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    19e0:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    19e4:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    19e8:	b0 9b       	sbis	0x16, 0	; 22
    19ea:	1b c0       	rjmp	.+54     	; 0x1a22 <__vector_22+0x98>
    19ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19f4:	c9 01       	movw	r24, r18
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	09 2e       	mov	r0, r25
    19fa:	00 0c       	add	r0, r0
    19fc:	aa 0b       	sbc	r26, r26
    19fe:	bb 0b       	sbc	r27, r27
    1a00:	dc 01       	movw	r26, r24
    1a02:	99 27       	eor	r25, r25
    1a04:	88 27       	eor	r24, r24
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	84 2b       	or	r24, r20
    1a0c:	95 2b       	or	r25, r21
    1a0e:	a6 2b       	or	r26, r22
    1a10:	b7 2b       	or	r27, r23
    1a12:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1a16:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1a1a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1a1e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1a22:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0x22>
    1a26:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0x23>
    1a2a:	30 97       	sbiw	r30, 0x00	; 0
    1a2c:	39 f0       	breq	.+14     	; 0x1a3c <__vector_22+0xb2>
    1a2e:	61 e1       	ldi	r22, 0x11	; 17
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0x22>
    1a36:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0x23>
    1a3a:	09 95       	icall
    1a3c:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	bf 91       	pop	r27
    1a46:	af 91       	pop	r26
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <enqueueByDeadline>:
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	7b 01       	movw	r14, r22
    1a70:	eb 01       	movw	r28, r22
    1a72:	a8 81       	ld	r26, Y
    1a74:	b9 81       	ldd	r27, Y+1	; 0x01
    1a76:	10 97       	sbiw	r26, 0x00	; 0
    1a78:	61 f1       	breq	.+88     	; 0x1ad2 <enqueueByDeadline+0x70>
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	06 81       	ldd	r16, Z+6	; 0x06
    1a7e:	17 81       	ldd	r17, Z+7	; 0x07
    1a80:	20 85       	ldd	r18, Z+8	; 0x08
    1a82:	31 85       	ldd	r19, Z+9	; 0x09
    1a84:	16 96       	adiw	r26, 0x06	; 6
    1a86:	4d 91       	ld	r20, X+
    1a88:	5d 91       	ld	r21, X+
    1a8a:	6d 91       	ld	r22, X+
    1a8c:	7c 91       	ld	r23, X
    1a8e:	19 97       	sbiw	r26, 0x09	; 9
    1a90:	04 17       	cp	r16, r20
    1a92:	15 07       	cpc	r17, r21
    1a94:	26 07       	cpc	r18, r22
    1a96:	37 07       	cpc	r19, r23
    1a98:	14 f4       	brge	.+4      	; 0x1a9e <enqueueByDeadline+0x3c>
    1a9a:	1b c0       	rjmp	.+54     	; 0x1ad2 <enqueueByDeadline+0x70>
    1a9c:	df 01       	movw	r26, r30
    1a9e:	ed 91       	ld	r30, X+
    1aa0:	fc 91       	ld	r31, X
    1aa2:	11 97       	sbiw	r26, 0x01	; 1
    1aa4:	30 97       	sbiw	r30, 0x00	; 0
    1aa6:	49 f0       	breq	.+18     	; 0x1aba <enqueueByDeadline+0x58>
    1aa8:	46 81       	ldd	r20, Z+6	; 0x06
    1aaa:	57 81       	ldd	r21, Z+7	; 0x07
    1aac:	60 85       	ldd	r22, Z+8	; 0x08
    1aae:	71 85       	ldd	r23, Z+9	; 0x09
    1ab0:	04 17       	cp	r16, r20
    1ab2:	15 07       	cpc	r17, r21
    1ab4:	26 07       	cpc	r18, r22
    1ab6:	37 07       	cpc	r19, r23
    1ab8:	8c f7       	brge	.-30     	; 0x1a9c <enqueueByDeadline+0x3a>
    1aba:	ec 01       	movw	r28, r24
    1abc:	f9 83       	std	Y+1, r31	; 0x01
    1abe:	e8 83       	st	Y, r30
    1ac0:	10 97       	sbiw	r26, 0x00	; 0
    1ac2:	21 f4       	brne	.+8      	; 0x1acc <enqueueByDeadline+0x6a>
    1ac4:	f7 01       	movw	r30, r14
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <enqueueByDeadline+0x78>
    1acc:	8d 93       	st	X+, r24
    1ace:	9c 93       	st	X, r25
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <enqueueByDeadline+0x78>
    1ad2:	ec 01       	movw	r28, r24
    1ad4:	b9 83       	std	Y+1, r27	; 0x01
    1ad6:	a8 83       	st	Y, r26
    1ad8:	f5 cf       	rjmp	.-22     	; 0x1ac4 <enqueueByDeadline+0x62>
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	08 95       	ret

00001ae8 <enqueueByBaseline>:
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	7b 01       	movw	r14, r22
    1af6:	eb 01       	movw	r28, r22
    1af8:	a8 81       	ld	r26, Y
    1afa:	b9 81       	ldd	r27, Y+1	; 0x01
    1afc:	10 97       	sbiw	r26, 0x00	; 0
    1afe:	61 f1       	breq	.+88     	; 0x1b58 <enqueueByBaseline+0x70>
    1b00:	fc 01       	movw	r30, r24
    1b02:	02 81       	ldd	r16, Z+2	; 0x02
    1b04:	13 81       	ldd	r17, Z+3	; 0x03
    1b06:	24 81       	ldd	r18, Z+4	; 0x04
    1b08:	35 81       	ldd	r19, Z+5	; 0x05
    1b0a:	12 96       	adiw	r26, 0x02	; 2
    1b0c:	4d 91       	ld	r20, X+
    1b0e:	5d 91       	ld	r21, X+
    1b10:	6d 91       	ld	r22, X+
    1b12:	7c 91       	ld	r23, X
    1b14:	15 97       	sbiw	r26, 0x05	; 5
    1b16:	04 17       	cp	r16, r20
    1b18:	15 07       	cpc	r17, r21
    1b1a:	26 07       	cpc	r18, r22
    1b1c:	37 07       	cpc	r19, r23
    1b1e:	14 f4       	brge	.+4      	; 0x1b24 <enqueueByBaseline+0x3c>
    1b20:	1b c0       	rjmp	.+54     	; 0x1b58 <enqueueByBaseline+0x70>
    1b22:	df 01       	movw	r26, r30
    1b24:	ed 91       	ld	r30, X+
    1b26:	fc 91       	ld	r31, X
    1b28:	11 97       	sbiw	r26, 0x01	; 1
    1b2a:	30 97       	sbiw	r30, 0x00	; 0
    1b2c:	49 f0       	breq	.+18     	; 0x1b40 <enqueueByBaseline+0x58>
    1b2e:	42 81       	ldd	r20, Z+2	; 0x02
    1b30:	53 81       	ldd	r21, Z+3	; 0x03
    1b32:	64 81       	ldd	r22, Z+4	; 0x04
    1b34:	75 81       	ldd	r23, Z+5	; 0x05
    1b36:	04 17       	cp	r16, r20
    1b38:	15 07       	cpc	r17, r21
    1b3a:	26 07       	cpc	r18, r22
    1b3c:	37 07       	cpc	r19, r23
    1b3e:	8c f7       	brge	.-30     	; 0x1b22 <enqueueByBaseline+0x3a>
    1b40:	ec 01       	movw	r28, r24
    1b42:	f9 83       	std	Y+1, r31	; 0x01
    1b44:	e8 83       	st	Y, r30
    1b46:	10 97       	sbiw	r26, 0x00	; 0
    1b48:	21 f4       	brne	.+8      	; 0x1b52 <enqueueByBaseline+0x6a>
    1b4a:	f7 01       	movw	r30, r14
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
    1b50:	07 c0       	rjmp	.+14     	; 0x1b60 <enqueueByBaseline+0x78>
    1b52:	8d 93       	st	X+, r24
    1b54:	9c 93       	st	X, r25
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <enqueueByBaseline+0x78>
    1b58:	ec 01       	movw	r28, r24
    1b5a:	b9 83       	std	Y+1, r27	; 0x01
    1b5c:	a8 83       	st	Y, r26
    1b5e:	f5 cf       	rjmp	.-22     	; 0x1b4a <enqueueByBaseline+0x62>
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	08 95       	ret

00001b6e <dequeue>:
    1b6e:	dc 01       	movw	r26, r24
    1b70:	ed 91       	ld	r30, X+
    1b72:	fc 91       	ld	r31, X
    1b74:	11 97       	sbiw	r26, 0x01	; 1
    1b76:	30 97       	sbiw	r30, 0x00	; 0
    1b78:	59 f4       	brne	.+22     	; 0x1b90 <dequeue+0x22>
    1b7a:	8f ef       	ldi	r24, 0xFF	; 255
    1b7c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1b80:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1b84:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	83 bf       	out	0x33, r24	; 51
    1b8c:	88 95       	sleep
    1b8e:	fd cf       	rjmp	.-6      	; 0x1b8a <dequeue+0x1c>
    1b90:	20 81       	ld	r18, Z
    1b92:	31 81       	ldd	r19, Z+1	; 0x01
    1b94:	2d 93       	st	X+, r18
    1b96:	3c 93       	st	X, r19
    1b98:	cf 01       	movw	r24, r30
    1b9a:	08 95       	ret

00001b9c <__vector_9>:
    1b9c:	1f 92       	push	r1
    1b9e:	0f 92       	push	r0
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	0f 92       	push	r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	2f 93       	push	r18
    1ba8:	3f 93       	push	r19
    1baa:	4f 93       	push	r20
    1bac:	5f 93       	push	r21
    1bae:	6f 93       	push	r22
    1bb0:	7f 93       	push	r23
    1bb2:	8f 93       	push	r24
    1bb4:	9f 93       	push	r25
    1bb6:	ef 93       	push	r30
    1bb8:	ff 93       	push	r31
    1bba:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
    1bbe:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
    1bc8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
    1bcc:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1bd0:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1bd4:	30 97       	sbiw	r30, 0x00	; 0
    1bd6:	01 f1       	breq	.+64     	; 0x1c18 <__vector_9+0x7c>
    1bd8:	42 81       	ldd	r20, Z+2	; 0x02
    1bda:	53 81       	ldd	r21, Z+3	; 0x03
    1bdc:	64 81       	ldd	r22, Z+4	; 0x04
    1bde:	75 81       	ldd	r23, Z+5	; 0x05
    1be0:	86 17       	cp	r24, r22
    1be2:	97 07       	cpc	r25, r23
    1be4:	c9 f4       	brne	.+50     	; 0x1c18 <__vector_9+0x7c>
    1be6:	ca 01       	movw	r24, r20
    1be8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bec:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bf0:	42 1b       	sub	r20, r18
    1bf2:	53 0b       	sbc	r21, r19
    1bf4:	41 30       	cpi	r20, 0x01	; 1
    1bf6:	51 05       	cpc	r21, r1
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <__vector_9+0x68>
    1bfa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bfe:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c08:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c0c:	ef e6       	ldi	r30, 0x6F	; 111
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	82 60       	ori	r24, 0x02	; 2
    1c14:	80 83       	st	Z, r24
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <__vector_9+0x86>
    1c18:	ef e6       	ldi	r30, 0x6F	; 111
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8d 7f       	andi	r24, 0xFD	; 253
    1c20:	80 83       	st	Z, r24
    1c22:	ff 91       	pop	r31
    1c24:	ef 91       	pop	r30
    1c26:	9f 91       	pop	r25
    1c28:	8f 91       	pop	r24
    1c2a:	7f 91       	pop	r23
    1c2c:	6f 91       	pop	r22
    1c2e:	5f 91       	pop	r21
    1c30:	4f 91       	pop	r20
    1c32:	3f 91       	pop	r19
    1c34:	2f 91       	pop	r18
    1c36:	0f 90       	pop	r0
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	0f 90       	pop	r0
    1c3c:	1f 90       	pop	r1
    1c3e:	18 95       	reti

00001c40 <__vector_7>:
    1c40:	1f 92       	push	r1
    1c42:	0f 92       	push	r0
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	0f 92       	push	r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	2f 93       	push	r18
    1c54:	3f 93       	push	r19
    1c56:	4f 93       	push	r20
    1c58:	5f 93       	push	r21
    1c5a:	6f 93       	push	r22
    1c5c:	7f 93       	push	r23
    1c5e:	8f 93       	push	r24
    1c60:	9f 93       	push	r25
    1c62:	af 93       	push	r26
    1c64:	bf 93       	push	r27
    1c66:	ef 93       	push	r30
    1c68:	ff 93       	push	r31
    1c6a:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <__data_end>
    1c6e:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <__data_end+0x1>
    1c72:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c76:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c7a:	b0 99       	sbic	0x16, 0	; 22
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <__vector_7+0x5c>
    1c7e:	0d 2c       	mov	r0, r13
    1c80:	00 0c       	add	r0, r0
    1c82:	ee 08       	sbc	r14, r14
    1c84:	ff 08       	sbc	r15, r15
    1c86:	d6 01       	movw	r26, r12
    1c88:	99 27       	eor	r25, r25
    1c8a:	88 27       	eor	r24, r24
    1c8c:	69 01       	movw	r12, r18
    1c8e:	e1 2c       	mov	r14, r1
    1c90:	f1 2c       	mov	r15, r1
    1c92:	c8 2a       	or	r12, r24
    1c94:	d9 2a       	or	r13, r25
    1c96:	ea 2a       	or	r14, r26
    1c98:	fb 2a       	or	r15, r27
    1c9a:	15 c0       	rjmp	.+42     	; 0x1cc6 <__vector_7+0x86>
    1c9c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ca0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ca4:	8f ef       	ldi	r24, 0xFF	; 255
    1ca6:	c8 1a       	sub	r12, r24
    1ca8:	d8 0a       	sbc	r13, r24
    1caa:	0d 2c       	mov	r0, r13
    1cac:	00 0c       	add	r0, r0
    1cae:	ee 08       	sbc	r14, r14
    1cb0:	ff 08       	sbc	r15, r15
    1cb2:	d6 01       	movw	r26, r12
    1cb4:	99 27       	eor	r25, r25
    1cb6:	88 27       	eor	r24, r24
    1cb8:	69 01       	movw	r12, r18
    1cba:	e1 2c       	mov	r14, r1
    1cbc:	f1 2c       	mov	r15, r1
    1cbe:	c8 2a       	or	r12, r24
    1cc0:	d9 2a       	or	r13, r25
    1cc2:	ea 2a       	or	r14, r26
    1cc4:	fb 2a       	or	r15, r27
    1cc6:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1cca:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1cce:	30 97       	sbiw	r30, 0x00	; 0
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <__vector_7+0x94>
    1cd2:	42 c0       	rjmp	.+132    	; 0x1d58 <__vector_7+0x118>
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	a4 81       	ldd	r26, Z+4	; 0x04
    1cda:	b5 81       	ldd	r27, Z+5	; 0x05
    1cdc:	8c 19       	sub	r24, r12
    1cde:	9d 09       	sbc	r25, r13
    1ce0:	ae 09       	sbc	r26, r14
    1ce2:	bf 09       	sbc	r27, r15
    1ce4:	18 16       	cp	r1, r24
    1ce6:	19 06       	cpc	r1, r25
    1ce8:	1a 06       	cpc	r1, r26
    1cea:	1b 06       	cpc	r1, r27
    1cec:	ec f1       	brlt	.+122    	; 0x1d68 <__vector_7+0x128>
    1cee:	8e e0       	ldi	r24, 0x0E	; 14
    1cf0:	91 e0       	ldi	r25, 0x01	; 1
    1cf2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <dequeue>
    1cf6:	60 e1       	ldi	r22, 0x10	; 16
    1cf8:	71 e0       	ldi	r23, 0x01	; 1
    1cfa:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <enqueueByDeadline>
    1cfe:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1d02:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1d06:	30 97       	sbiw	r30, 0x00	; 0
    1d08:	39 f1       	breq	.+78     	; 0x1d58 <__vector_7+0x118>
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	a4 81       	ldd	r26, Z+4	; 0x04
    1d10:	b5 81       	ldd	r27, Z+5	; 0x05
    1d12:	8c 19       	sub	r24, r12
    1d14:	9d 09       	sbc	r25, r13
    1d16:	ae 09       	sbc	r26, r14
    1d18:	bf 09       	sbc	r27, r15
    1d1a:	18 16       	cp	r1, r24
    1d1c:	19 06       	cpc	r1, r25
    1d1e:	1a 06       	cpc	r1, r26
    1d20:	1b 06       	cpc	r1, r27
    1d22:	2c f7       	brge	.-54     	; 0x1cee <__vector_7+0xae>
    1d24:	21 c0       	rjmp	.+66     	; 0x1d68 <__vector_7+0x128>
    1d26:	9c 01       	movw	r18, r24
    1d28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d30:	84 1b       	sub	r24, r20
    1d32:	95 0b       	sbc	r25, r21
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	31 f4       	brne	.+12     	; 0x1d44 <__vector_7+0x104>
    1d38:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d3c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d40:	2f 5f       	subi	r18, 0xFF	; 255
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1d48:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1d4c:	ef e6       	ldi	r30, 0x6F	; 111
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	82 60       	ori	r24, 0x02	; 2
    1d54:	80 83       	st	Z, r24
    1d56:	05 c0       	rjmp	.+10     	; 0x1d62 <__vector_7+0x122>
    1d58:	ef e6       	ldi	r30, 0x6F	; 111
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8d 7f       	andi	r24, 0xFD	; 253
    1d60:	80 83       	st	Z, r24
    1d62:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    1d66:	0c c0       	rjmp	.+24     	; 0x1d80 <__vector_7+0x140>
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	a4 81       	ldd	r26, Z+4	; 0x04
    1d6e:	b5 81       	ldd	r27, Z+5	; 0x05
    1d70:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1d74:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1d78:	2a 17       	cp	r18, r26
    1d7a:	3b 07       	cpc	r19, r27
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <__vector_7+0x118>
    1d7e:	d3 cf       	rjmp	.-90     	; 0x1d26 <__vector_7+0xe6>
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	0f 90       	pop	r0
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	0f 90       	pop	r0
    1da6:	1f 90       	pop	r1
    1da8:	18 95       	reti

00001daa <async>:
    1daa:	3f 92       	push	r3
    1dac:	4f 92       	push	r4
    1dae:	5f 92       	push	r5
    1db0:	6f 92       	push	r6
    1db2:	7f 92       	push	r7
    1db4:	8f 92       	push	r8
    1db6:	9f 92       	push	r9
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	2b 01       	movw	r4, r22
    1dce:	3c 01       	movw	r6, r24
    1dd0:	49 01       	movw	r8, r18
    1dd2:	5a 01       	movw	r10, r20
    1dd4:	8f b7       	in	r24, 0x3f	; 63
    1dd6:	80 78       	andi	r24, 0x80	; 128
    1dd8:	38 2e       	mov	r3, r24
    1dda:	f8 94       	cli
    1ddc:	86 e0       	ldi	r24, 0x06	; 6
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <dequeue>
    1de4:	ec 01       	movw	r28, r24
    1de6:	1b 87       	std	Y+11, r17	; 0x0b
    1de8:	0a 87       	std	Y+10, r16	; 0x0a
    1dea:	fd 86       	std	Y+13, r15	; 0x0d
    1dec:	ec 86       	std	Y+12, r14	; 0x0c
    1dee:	df 86       	std	Y+15, r13	; 0x0f
    1df0:	ce 86       	std	Y+14, r12	; 0x0e
    1df2:	33 20       	and	r3, r3
    1df4:	61 f0       	breq	.+24     	; 0x1e0e <async+0x64>
    1df6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1dfa:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1dfe:	02 80       	ldd	r0, Z+2	; 0x02
    1e00:	f3 81       	ldd	r31, Z+3	; 0x03
    1e02:	e0 2d       	mov	r30, r0
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	a4 81       	ldd	r26, Z+4	; 0x04
    1e0a:	b5 81       	ldd	r27, Z+5	; 0x05
    1e0c:	08 c0       	rjmp	.+16     	; 0x1e1e <async+0x74>
    1e0e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timestamp>
    1e12:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timestamp+0x1>
    1e16:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <timestamp+0x2>
    1e1a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <timestamp+0x3>
    1e1e:	48 0e       	add	r4, r24
    1e20:	59 1e       	adc	r5, r25
    1e22:	6a 1e       	adc	r6, r26
    1e24:	7b 1e       	adc	r7, r27
    1e26:	4a 82       	std	Y+2, r4	; 0x02
    1e28:	5b 82       	std	Y+3, r5	; 0x03
    1e2a:	6c 82       	std	Y+4, r6	; 0x04
    1e2c:	7d 82       	std	Y+5, r7	; 0x05
    1e2e:	18 14       	cp	r1, r8
    1e30:	19 04       	cpc	r1, r9
    1e32:	1a 04       	cpc	r1, r10
    1e34:	1b 04       	cpc	r1, r11
    1e36:	44 f0       	brlt	.+16     	; 0x1e48 <async+0x9e>
    1e38:	0f 2e       	mov	r0, r31
    1e3a:	88 24       	eor	r8, r8
    1e3c:	8a 94       	dec	r8
    1e3e:	98 2c       	mov	r9, r8
    1e40:	a8 2c       	mov	r10, r8
    1e42:	ff e7       	ldi	r31, 0x7F	; 127
    1e44:	bf 2e       	mov	r11, r31
    1e46:	f0 2d       	mov	r31, r0
    1e48:	84 0c       	add	r8, r4
    1e4a:	95 1c       	adc	r9, r5
    1e4c:	a6 1c       	adc	r10, r6
    1e4e:	b7 1c       	adc	r11, r7
    1e50:	8e 82       	std	Y+6, r8	; 0x06
    1e52:	9f 82       	std	Y+7, r9	; 0x07
    1e54:	a8 86       	std	Y+8, r10	; 0x08
    1e56:	b9 86       	std	Y+9, r11	; 0x09
    1e58:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
    1e5c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
    1e60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e68:	b0 99       	sbic	0x16, 0	; 22
    1e6a:	0e c0       	rjmp	.+28     	; 0x1e88 <async+0xde>
    1e6c:	09 2e       	mov	r0, r25
    1e6e:	00 0c       	add	r0, r0
    1e70:	aa 0b       	sbc	r26, r26
    1e72:	bb 0b       	sbc	r27, r27
    1e74:	dc 01       	movw	r26, r24
    1e76:	99 27       	eor	r25, r25
    1e78:	88 27       	eor	r24, r24
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	84 2b       	or	r24, r20
    1e80:	95 2b       	or	r25, r21
    1e82:	a6 2b       	or	r26, r22
    1e84:	b7 2b       	or	r27, r23
    1e86:	13 c0       	rjmp	.+38     	; 0x1eae <async+0x104>
    1e88:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e8c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e90:	01 96       	adiw	r24, 0x01	; 1
    1e92:	09 2e       	mov	r0, r25
    1e94:	00 0c       	add	r0, r0
    1e96:	aa 0b       	sbc	r26, r26
    1e98:	bb 0b       	sbc	r27, r27
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	99 27       	eor	r25, r25
    1e9e:	88 27       	eor	r24, r24
    1ea0:	a9 01       	movw	r20, r18
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	84 2b       	or	r24, r20
    1ea8:	95 2b       	or	r25, r21
    1eaa:	a6 2b       	or	r26, r22
    1eac:	b7 2b       	or	r27, r23
    1eae:	48 1a       	sub	r4, r24
    1eb0:	59 0a       	sbc	r5, r25
    1eb2:	6a 0a       	sbc	r6, r26
    1eb4:	7b 0a       	sbc	r7, r27
    1eb6:	14 14       	cp	r1, r4
    1eb8:	15 04       	cpc	r1, r5
    1eba:	16 04       	cpc	r1, r6
    1ebc:	17 04       	cpc	r1, r7
    1ebe:	ac f5       	brge	.+106    	; 0x1f2a <async+0x180>
    1ec0:	6e e0       	ldi	r22, 0x0E	; 14
    1ec2:	71 e0       	ldi	r23, 0x01	; 1
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <enqueueByBaseline>
    1eca:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1ece:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1ed2:	30 97       	sbiw	r30, 0x00	; 0
    1ed4:	21 f1       	breq	.+72     	; 0x1f1e <async+0x174>
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	93 81       	ldd	r25, Z+3	; 0x03
    1eda:	a4 81       	ldd	r26, Z+4	; 0x04
    1edc:	b5 81       	ldd	r27, Z+5	; 0x05
    1ede:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1ee2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1ee6:	2a 17       	cp	r18, r26
    1ee8:	3b 07       	cpc	r19, r27
    1eea:	c9 f4       	brne	.+50     	; 0x1f1e <async+0x174>
    1eec:	9c 01       	movw	r18, r24
    1eee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ef2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ef6:	84 1b       	sub	r24, r20
    1ef8:	95 0b       	sbc	r25, r21
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	31 f4       	brne	.+12     	; 0x1f0a <async+0x160>
    1efe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1f02:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f06:	2f 5f       	subi	r18, 0xFF	; 255
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1f0e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1f12:	ef e6       	ldi	r30, 0x6F	; 111
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	82 60       	ori	r24, 0x02	; 2
    1f1a:	80 83       	st	Z, r24
    1f1c:	41 c0       	rjmp	.+130    	; 0x1fa0 <async+0x1f6>
    1f1e:	ef e6       	ldi	r30, 0x6F	; 111
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8d 7f       	andi	r24, 0xFD	; 253
    1f26:	80 83       	st	Z, r24
    1f28:	3b c0       	rjmp	.+118    	; 0x1fa0 <async+0x1f6>
    1f2a:	60 e1       	ldi	r22, 0x10	; 16
    1f2c:	71 e0       	ldi	r23, 0x01	; 1
    1f2e:	ce 01       	movw	r24, r28
    1f30:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <enqueueByDeadline>
    1f34:	33 20       	and	r3, r3
    1f36:	b9 f1       	breq	.+110    	; 0x1fa6 <async+0x1fc>
    1f38:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f3c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	81 f1       	breq	.+96     	; 0x1fa4 <async+0x1fa>
    1f44:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1f48:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1f4c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <msgQ>
    1f50:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <msgQ+0x1>
    1f54:	02 81       	ldd	r16, Z+2	; 0x02
    1f56:	13 81       	ldd	r17, Z+3	; 0x03
    1f58:	d9 01       	movw	r26, r18
    1f5a:	16 96       	adiw	r26, 0x06	; 6
    1f5c:	4d 91       	ld	r20, X+
    1f5e:	5d 91       	ld	r21, X+
    1f60:	6d 91       	ld	r22, X+
    1f62:	7c 91       	ld	r23, X
    1f64:	19 97       	sbiw	r26, 0x09	; 9
    1f66:	d8 01       	movw	r26, r16
    1f68:	16 96       	adiw	r26, 0x06	; 6
    1f6a:	0d 91       	ld	r16, X+
    1f6c:	1d 91       	ld	r17, X+
    1f6e:	2d 91       	ld	r18, X+
    1f70:	3c 91       	ld	r19, X
    1f72:	19 97       	sbiw	r26, 0x09	; 9
    1f74:	40 1b       	sub	r20, r16
    1f76:	51 0b       	sbc	r21, r17
    1f78:	62 0b       	sbc	r22, r18
    1f7a:	73 0b       	sbc	r23, r19
    1f7c:	9a f4       	brpl	.+38     	; 0x1fa4 <async+0x1fa>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	2d 91       	ld	r18, X+
    1f82:	3c 91       	ld	r19, X
    1f84:	11 97       	sbiw	r26, 0x01	; 1
    1f86:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1f8a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1f8e:	ed 93       	st	X+, r30
    1f90:	fc 93       	st	X, r31
    1f92:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1f96:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1f9a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <async+0x1fa>
    1fa0:	33 20       	and	r3, r3
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <async+0x1fc>
    1fa4:	78 94       	sei
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	ff 90       	pop	r15
    1fb2:	ef 90       	pop	r14
    1fb4:	df 90       	pop	r13
    1fb6:	cf 90       	pop	r12
    1fb8:	bf 90       	pop	r11
    1fba:	af 90       	pop	r10
    1fbc:	9f 90       	pop	r9
    1fbe:	8f 90       	pop	r8
    1fc0:	7f 90       	pop	r7
    1fc2:	6f 90       	pop	r6
    1fc4:	5f 90       	pop	r5
    1fc6:	4f 90       	pop	r4
    1fc8:	3f 90       	pop	r3
    1fca:	08 95       	ret

00001fcc <sync>:
    1fcc:	cf 92       	push	r12
    1fce:	df 92       	push	r13
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	ec 01       	movw	r28, r24
    1fde:	7b 01       	movw	r14, r22
    1fe0:	6a 01       	movw	r12, r20
    1fe2:	1f b7       	in	r17, 0x3f	; 63
    1fe4:	10 78       	andi	r17, 0x80	; 128
    1fe6:	f8 94       	cli
    1fe8:	a8 81       	ld	r26, Y
    1fea:	b9 81       	ldd	r27, Y+1	; 0x01
    1fec:	10 97       	sbiw	r26, 0x00	; 0
    1fee:	61 f1       	breq	.+88     	; 0x2048 <sync+0x7c>
    1ff0:	14 96       	adiw	r26, 0x04	; 4
    1ff2:	ed 91       	ld	r30, X+
    1ff4:	fc 91       	ld	r31, X
    1ff6:	15 97       	sbiw	r26, 0x05	; 5
    1ff8:	30 97       	sbiw	r30, 0x00	; 0
    1ffa:	41 f0       	breq	.+16     	; 0x200c <sync+0x40>
    1ffc:	a0 81       	ld	r26, Z
    1ffe:	b1 81       	ldd	r27, Z+1	; 0x01
    2000:	14 96       	adiw	r26, 0x04	; 4
    2002:	ed 91       	ld	r30, X+
    2004:	fc 91       	ld	r31, X
    2006:	15 97       	sbiw	r26, 0x05	; 5
    2008:	30 97       	sbiw	r30, 0x00	; 0
    200a:	c1 f7       	brne	.-16     	; 0x1ffc <sync+0x30>
    200c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2010:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2014:	2a 17       	cp	r18, r26
    2016:	3b 07       	cpc	r19, r27
    2018:	21 f0       	breq	.+8      	; 0x2022 <sync+0x56>
    201a:	11 23       	and	r17, r17
    201c:	09 f4       	brne	.+2      	; 0x2020 <sync+0x54>
    201e:	3d c0       	rjmp	.+122    	; 0x209a <sync+0xce>
    2020:	07 c0       	rjmp	.+14     	; 0x2030 <sync+0x64>
    2022:	11 23       	and	r17, r17
    2024:	09 f4       	brne	.+2      	; 0x2028 <sync+0x5c>
    2026:	3c c0       	rjmp	.+120    	; 0x20a0 <sync+0xd4>
    2028:	78 94       	sei
    202a:	8f ef       	ldi	r24, 0xFF	; 255
    202c:	9f ef       	ldi	r25, 0xFF	; 255
    202e:	52 c0       	rjmp	.+164    	; 0x20d4 <sync+0x108>
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	9b 81       	ldd	r25, Y+3	; 0x03
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	d1 f1       	breq	.+116    	; 0x20ac <sync+0xe0>
    2038:	fc 01       	movw	r30, r24
    203a:	15 82       	std	Z+5, r1	; 0x05
    203c:	14 82       	std	Z+4, r1	; 0x04
    203e:	36 c0       	rjmp	.+108    	; 0x20ac <sync+0xe0>
    2040:	78 94       	sei
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	46 c0       	rjmp	.+140    	; 0x20d4 <sync+0x108>
    2048:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    204c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2050:	99 83       	std	Y+1, r25	; 0x01
    2052:	88 83       	st	Y, r24
    2054:	11 23       	and	r17, r17
    2056:	29 f0       	breq	.+10     	; 0x2062 <sync+0x96>
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	9b 81       	ldd	r25, Y+3	; 0x03
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	09 f0       	breq	.+2      	; 0x2062 <sync+0x96>
    2060:	78 94       	sei
    2062:	b6 01       	movw	r22, r12
    2064:	ce 01       	movw	r24, r28
    2066:	f7 01       	movw	r30, r14
    2068:	09 95       	icall
    206a:	f8 2e       	mov	r15, r24
    206c:	09 2f       	mov	r16, r25
    206e:	8f b7       	in	r24, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	19 82       	std	Y+1, r1	; 0x01
    2074:	18 82       	st	Y, r1
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	82 30       	cpi	r24, 0x02	; 2
    207c:	91 05       	cpc	r25, r1
    207e:	38 f0       	brcs	.+14     	; 0x208e <sync+0xc2>
    2080:	1b 82       	std	Y+3, r1	; 0x03
    2082:	1a 82       	std	Y+2, r1	; 0x02
    2084:	fc 01       	movw	r30, r24
    2086:	15 82       	std	Z+5, r1	; 0x05
    2088:	14 82       	std	Z+4, r1	; 0x04
    208a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
    208e:	11 23       	and	r17, r17
    2090:	51 f0       	breq	.+20     	; 0x20a6 <sync+0xda>
    2092:	78 94       	sei
    2094:	8f 2d       	mov	r24, r15
    2096:	90 2f       	mov	r25, r16
    2098:	1d c0       	rjmp	.+58     	; 0x20d4 <sync+0x108>
    209a:	8f ef       	ldi	r24, 0xFF	; 255
    209c:	9f ef       	ldi	r25, 0xFF	; 255
    209e:	1a c0       	rjmp	.+52     	; 0x20d4 <sync+0x108>
    20a0:	8f ef       	ldi	r24, 0xFF	; 255
    20a2:	9f ef       	ldi	r25, 0xFF	; 255
    20a4:	17 c0       	rjmp	.+46     	; 0x20d4 <sync+0x108>
    20a6:	8f 2d       	mov	r24, r15
    20a8:	90 2f       	mov	r25, r16
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <sync+0x108>
    20ac:	3b 83       	std	Y+3, r19	; 0x03
    20ae:	2a 83       	std	Y+2, r18	; 0x02
    20b0:	f9 01       	movw	r30, r18
    20b2:	d5 83       	std	Z+5, r29	; 0x05
    20b4:	c4 83       	std	Z+4, r28	; 0x04
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
    20bc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    20c0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	89 2b       	or	r24, r25
    20ca:	09 f4       	brne	.+2      	; 0x20ce <sync+0x102>
    20cc:	b9 cf       	rjmp	.-142    	; 0x2040 <sync+0x74>
    20ce:	f9 83       	std	Y+1, r31	; 0x01
    20d0:	e8 83       	st	Y, r30
    20d2:	c2 cf       	rjmp	.-124    	; 0x2058 <sync+0x8c>
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	df 90       	pop	r13
    20e2:	cf 90       	pop	r12
    20e4:	08 95       	ret

000020e6 <run>:
    20e6:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
    20ea:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
    20ee:	80 e1       	ldi	r24, 0x10	; 16
    20f0:	91 e0       	ldi	r25, 0x01	; 1
    20f2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <dequeue>
    20f6:	ec 01       	movw	r28, r24
    20f8:	d8 01       	movw	r26, r16
    20fa:	13 96       	adiw	r26, 0x03	; 3
    20fc:	9c 93       	st	X, r25
    20fe:	8e 93       	st	-X, r24
    2100:	12 97       	sbiw	r26, 0x02	; 2
    2102:	78 94       	sei
    2104:	4e 85       	ldd	r20, Y+14	; 0x0e
    2106:	5f 85       	ldd	r21, Y+15	; 0x0f
    2108:	6c 85       	ldd	r22, Y+12	; 0x0c
    210a:	7d 85       	ldd	r23, Y+13	; 0x0d
    210c:	8a 85       	ldd	r24, Y+10	; 0x0a
    210e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2110:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <sync>
    2114:	8f b7       	in	r24, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    211c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    2120:	99 83       	std	Y+1, r25	; 0x01
    2122:	88 83       	st	Y, r24
    2124:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    2128:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    212c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2130:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2134:	00 81       	ld	r16, Z
    2136:	11 81       	ldd	r17, Z+1	; 0x01
    2138:	e8 01       	movw	r28, r16
    213a:	2a 81       	ldd	r18, Y+2	; 0x02
    213c:	3b 81       	ldd	r19, Y+3	; 0x03
    213e:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <msgQ>
    2142:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <msgQ+0x1>
    2146:	10 97       	sbiw	r26, 0x00	; 0
    2148:	c1 f0       	breq	.+48     	; 0x217a <run+0x94>
    214a:	21 15       	cp	r18, r1
    214c:	31 05       	cpc	r19, r1
    214e:	59 f2       	breq	.-106    	; 0x20e6 <run>
    2150:	16 96       	adiw	r26, 0x06	; 6
    2152:	8d 91       	ld	r24, X+
    2154:	9d 91       	ld	r25, X+
    2156:	0d 90       	ld	r0, X+
    2158:	bc 91       	ld	r27, X
    215a:	a0 2d       	mov	r26, r0
    215c:	e9 01       	movw	r28, r18
    215e:	4e 81       	ldd	r20, Y+6	; 0x06
    2160:	5f 81       	ldd	r21, Y+7	; 0x07
    2162:	68 85       	ldd	r22, Y+8	; 0x08
    2164:	79 85       	ldd	r23, Y+9	; 0x09
    2166:	84 1b       	sub	r24, r20
    2168:	95 0b       	sbc	r25, r21
    216a:	a6 0b       	sbc	r26, r22
    216c:	b7 0b       	sbc	r27, r23
    216e:	18 16       	cp	r1, r24
    2170:	19 06       	cpc	r1, r25
    2172:	1a 06       	cpc	r1, r26
    2174:	1b 06       	cpc	r1, r27
    2176:	0c f0       	brlt	.+2      	; 0x217a <run+0x94>
    2178:	b6 cf       	rjmp	.-148    	; 0x20e6 <run>
    217a:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <activeStack+0x1>
    217e:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <activeStack>
    2182:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    2186:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
    218e:	f0 93 05 01 	sts	0x0105, r31	; 0x800105 <threadPool+0x1>
    2192:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <threadPool>
    2196:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    219a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    219e:	14 96       	adiw	r26, 0x04	; 4
    21a0:	ed 91       	ld	r30, X+
    21a2:	fc 91       	ld	r31, X
    21a4:	15 97       	sbiw	r26, 0x05	; 5
    21a6:	30 97       	sbiw	r30, 0x00	; 0
    21a8:	41 f0       	breq	.+16     	; 0x21ba <run+0xd4>
    21aa:	a0 81       	ld	r26, Z
    21ac:	b1 81       	ldd	r27, Z+1	; 0x01
    21ae:	14 96       	adiw	r26, 0x04	; 4
    21b0:	ed 91       	ld	r30, X+
    21b2:	fc 91       	ld	r31, X
    21b4:	15 97       	sbiw	r26, 0x05	; 5
    21b6:	30 97       	sbiw	r30, 0x00	; 0
    21b8:	c1 f7       	brne	.-16     	; 0x21aa <run+0xc4>
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
    21c0:	92 cf       	rjmp	.-220    	; 0x20e6 <run>

000021c2 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    21c2:	42 31       	cpi	r20, 0x12	; 18
    21c4:	b8 f4       	brcc	.+46     	; 0x21f4 <install+0x32>
        char status;
        DISABLE(status);
    21c6:	2f b7       	in	r18, 0x3f	; 63
    21c8:	f8 94       	cli
        otable[i] = obj;
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	44 0f       	add	r20, r20
    21ce:	55 1f       	adc	r21, r21
    21d0:	fa 01       	movw	r30, r20
    21d2:	ee 5e       	subi	r30, 0xEE	; 238
    21d4:	fe 4f       	sbci	r31, 0xFE	; 254
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	80 83       	st	Z, r24
        mtable[i] = m;
    21da:	fa 01       	movw	r30, r20
    21dc:	e6 55       	subi	r30, 0x56	; 86
    21de:	fe 4f       	sbci	r31, 0xFE	; 254
    21e0:	71 83       	std	Z+1, r23	; 0x01
    21e2:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21e4:	41 e0       	ldi	r20, 0x01	; 1
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	fc 01       	movw	r30, r24
    21ea:	53 83       	std	Z+3, r21	; 0x03
    21ec:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    21ee:	22 23       	and	r18, r18
    21f0:	0c f4       	brge	.+2      	; 0x21f4 <install+0x32>
    21f2:	78 94       	sei
    21f4:	08 95       	ret

000021f6 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21f6:	8c 01       	movw	r16, r24
    21f8:	7b 01       	movw	r14, r22
    21fa:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    21fc:	8f b7       	in	r24, 0x3f	; 63
    21fe:	f8 94       	cli
    initialize();
    2200:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <initialize>
    ENABLE(1);
    2204:	78 94       	sei
    if (m != NULL)
    2206:	e1 14       	cp	r14, r1
    2208:	f1 04       	cpc	r15, r1
    220a:	41 f0       	breq	.+16     	; 0x221c <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	a9 01       	movw	r20, r18
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	cb 01       	movw	r24, r22
    2218:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <async>
    DISABLE(status);
    221c:	8f b7       	in	r24, 0x3f	; 63
    221e:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2220:	0e 94 5e 05 	call	0xabc	; 0xabc <schedule>
    ENABLE(1);
    2224:	78 94       	sei
    while (1) {
        SLEEP();
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	83 bf       	out	0x33, r24	; 51
    222a:	88 95       	sleep
    222c:	fd cf       	rjmp	.-6      	; 0x2228 <tinytimber+0x32>

0000222e <turnNorth>:
 */ 

#include "TrafficLight.h"

void turnNorth(TrafficLight *self, bool val) {
	self->n = val;
    222e:	fc 01       	movw	r30, r24
    2230:	65 83       	std	Z+5, r22	; 0x05
    2232:	08 95       	ret

00002234 <turnSouth>:
}

void turnSouth(TrafficLight *self, bool val) {
	self->s = val;
    2234:	fc 01       	movw	r30, r24
    2236:	64 83       	std	Z+4, r22	; 0x04
    2238:	08 95       	ret

0000223a <__divmodhi4>:
    223a:	97 fb       	bst	r25, 7
    223c:	07 2e       	mov	r0, r23
    223e:	16 f4       	brtc	.+4      	; 0x2244 <__divmodhi4+0xa>
    2240:	00 94       	com	r0
    2242:	07 d0       	rcall	.+14     	; 0x2252 <__divmodhi4_neg1>
    2244:	77 fd       	sbrc	r23, 7
    2246:	09 d0       	rcall	.+18     	; 0x225a <__divmodhi4_neg2>
    2248:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodhi4>
    224c:	07 fc       	sbrc	r0, 7
    224e:	05 d0       	rcall	.+10     	; 0x225a <__divmodhi4_neg2>
    2250:	3e f4       	brtc	.+14     	; 0x2260 <__divmodhi4_exit>

00002252 <__divmodhi4_neg1>:
    2252:	90 95       	com	r25
    2254:	81 95       	neg	r24
    2256:	9f 4f       	sbci	r25, 0xFF	; 255
    2258:	08 95       	ret

0000225a <__divmodhi4_neg2>:
    225a:	70 95       	com	r23
    225c:	61 95       	neg	r22
    225e:	7f 4f       	sbci	r23, 0xFF	; 255

00002260 <__divmodhi4_exit>:
    2260:	08 95       	ret

00002262 <__tablejump2__>:
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	05 90       	lpm	r0, Z+
    2268:	f4 91       	lpm	r31, Z
    226a:	e0 2d       	mov	r30, r0
    226c:	09 94       	ijmp

0000226e <__udivmodhi4>:
    226e:	aa 1b       	sub	r26, r26
    2270:	bb 1b       	sub	r27, r27
    2272:	51 e1       	ldi	r21, 0x11	; 17
    2274:	07 c0       	rjmp	.+14     	; 0x2284 <__udivmodhi4_ep>

00002276 <__udivmodhi4_loop>:
    2276:	aa 1f       	adc	r26, r26
    2278:	bb 1f       	adc	r27, r27
    227a:	a6 17       	cp	r26, r22
    227c:	b7 07       	cpc	r27, r23
    227e:	10 f0       	brcs	.+4      	; 0x2284 <__udivmodhi4_ep>
    2280:	a6 1b       	sub	r26, r22
    2282:	b7 0b       	sbc	r27, r23

00002284 <__udivmodhi4_ep>:
    2284:	88 1f       	adc	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	5a 95       	dec	r21
    228a:	a9 f7       	brne	.-22     	; 0x2276 <__udivmodhi4_loop>
    228c:	80 95       	com	r24
    228e:	90 95       	com	r25
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	08 95       	ret

00002296 <setjmp>:
    2296:	dc 01       	movw	r26, r24
    2298:	2d 92       	st	X+, r2
    229a:	3d 92       	st	X+, r3
    229c:	4d 92       	st	X+, r4
    229e:	5d 92       	st	X+, r5
    22a0:	6d 92       	st	X+, r6
    22a2:	7d 92       	st	X+, r7
    22a4:	8d 92       	st	X+, r8
    22a6:	9d 92       	st	X+, r9
    22a8:	ad 92       	st	X+, r10
    22aa:	bd 92       	st	X+, r11
    22ac:	cd 92       	st	X+, r12
    22ae:	dd 92       	st	X+, r13
    22b0:	ed 92       	st	X+, r14
    22b2:	fd 92       	st	X+, r15
    22b4:	0d 93       	st	X+, r16
    22b6:	1d 93       	st	X+, r17
    22b8:	cd 93       	st	X+, r28
    22ba:	dd 93       	st	X+, r29
    22bc:	ff 91       	pop	r31
    22be:	ef 91       	pop	r30
    22c0:	8d b7       	in	r24, 0x3d	; 61
    22c2:	8d 93       	st	X+, r24
    22c4:	8e b7       	in	r24, 0x3e	; 62
    22c6:	8d 93       	st	X+, r24
    22c8:	8f b7       	in	r24, 0x3f	; 63
    22ca:	8d 93       	st	X+, r24
    22cc:	ed 93       	st	X+, r30
    22ce:	fd 93       	st	X+, r31
    22d0:	88 27       	eor	r24, r24
    22d2:	99 27       	eor	r25, r25
    22d4:	09 94       	ijmp

000022d6 <longjmp>:
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	91 05       	cpc	r25, r1
    22de:	81 1d       	adc	r24, r1
    22e0:	2d 90       	ld	r2, X+
    22e2:	3d 90       	ld	r3, X+
    22e4:	4d 90       	ld	r4, X+
    22e6:	5d 90       	ld	r5, X+
    22e8:	6d 90       	ld	r6, X+
    22ea:	7d 90       	ld	r7, X+
    22ec:	8d 90       	ld	r8, X+
    22ee:	9d 90       	ld	r9, X+
    22f0:	ad 90       	ld	r10, X+
    22f2:	bd 90       	ld	r11, X+
    22f4:	cd 90       	ld	r12, X+
    22f6:	dd 90       	ld	r13, X+
    22f8:	ed 90       	ld	r14, X+
    22fa:	fd 90       	ld	r15, X+
    22fc:	0d 91       	ld	r16, X+
    22fe:	1d 91       	ld	r17, X+
    2300:	cd 91       	ld	r28, X+
    2302:	dd 91       	ld	r29, X+
    2304:	ed 91       	ld	r30, X+
    2306:	fd 91       	ld	r31, X+
    2308:	0d 90       	ld	r0, X+
    230a:	f8 94       	cli
    230c:	fe bf       	out	0x3e, r31	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	ed bf       	out	0x3d, r30	; 61
    2312:	ed 91       	ld	r30, X+
    2314:	fd 91       	ld	r31, X+
    2316:	09 94       	ijmp

00002318 <_exit>:
    2318:	f8 94       	cli

0000231a <__stop_program>:
    231a:	ff cf       	rjmp	.-2      	; 0x231a <__stop_program>
