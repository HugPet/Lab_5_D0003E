
Lab_5_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00002538  000025cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002538  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800108  00800108  000025d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003615  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ce  00000000  00000000  00005f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aa3  00000000  00000000  000070ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d00  00000000  00000000  00008b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a52  00000000  00000000  00009894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000359b  00000000  00000000  0000a2e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000d881  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_1>
       8:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_2>
       c:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_3>
      10:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_4>
      14:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__vector_9>
      28:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_10>
      2c:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_11>
      30:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_12>
      34:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_13>
      38:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__vector_14>
      3c:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_15>
      40:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__vector_16>
      44:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_17>
      48:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__vector_18>
      4c:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_19>
      50:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__vector_20>
      54:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__vector_21>
      58:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__vector_22>
      5c:	0f 04       	cpc	r0, r15
      5e:	be 03       	fmulsu	r19, r22
      60:	c7 03       	fmuls	r20, r23
      62:	d0 03       	fmuls	r21, r16
      64:	d9 03       	fmulsu	r21, r17
      66:	e2 03       	fmuls	r22, r18
      68:	eb 03       	fmulsu	r22, r19
      6a:	f4 03       	fmuls	r23, r20
      6c:	fd 03       	fmulsu	r23, r21
      6e:	06 04       	cpc	r0, r6

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 e3       	ldi	r30, 0x38	; 56
      84:	f5 e2       	ldi	r31, 0x25	; 37
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 30       	cpi	r26, 0x08	; 8
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a8 e0       	ldi	r26, 0x08	; 8
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 35       	cpi	r26, 0x5B	; 91
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 6c 05 	call	0xad8	; 0xad8 <main>
      a6:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <enQ>:
 */ 

#include "BeforeBridge.h"

void enQ(BeforeBridge *self) {
	self->carsInQ++;
      ae:	fc 01       	movw	r30, r24
      b0:	24 81       	ldd	r18, Z+4	; 0x04
      b2:	35 81       	ldd	r19, Z+5	; 0x05
      b4:	2f 5f       	subi	r18, 0xFF	; 255
      b6:	3f 4f       	sbci	r19, 0xFF	; 255
      b8:	35 83       	std	Z+5, r19	; 0x05
      ba:	24 83       	std	Z+4, r18	; 0x04
      bc:	08 95       	ret

000000be <deQ>:
}

void deQ(BeforeBridge *self) {
      be:	fc 01       	movw	r30, r24
	self->carsInQ--;
      c0:	84 81       	ldd	r24, Z+4	; 0x04
      c2:	95 81       	ldd	r25, Z+5	; 0x05
      c4:	01 97       	sbiw	r24, 0x01	; 1
      c6:	95 83       	std	Z+5, r25	; 0x05
      c8:	84 83       	std	Z+4, r24	; 0x04
	self->traf->bridge++;
      ca:	a6 81       	ldd	r26, Z+6	; 0x06
      cc:	b7 81       	ldd	r27, Z+7	; 0x07
      ce:	16 96       	adiw	r26, 0x06	; 6
      d0:	8d 91       	ld	r24, X+
      d2:	9c 91       	ld	r25, X
      d4:	17 97       	sbiw	r26, 0x07	; 7
      d6:	0a 96       	adiw	r24, 0x0a	; 10
      d8:	17 96       	adiw	r26, 0x07	; 7
      da:	9c 93       	st	X, r25
      dc:	8e 93       	st	-X, r24
      de:	16 97       	sbiw	r26, 0x06	; 6
	if (self->traf->n) {
      e0:	06 80       	ldd	r0, Z+6	; 0x06
      e2:	f7 81       	ldd	r31, Z+7	; 0x07
      e4:	e0 2d       	mov	r30, r0
      e6:	85 81       	ldd	r24, Z+5	; 0x05
      e8:	88 23       	and	r24, r24
      ea:	49 f0       	breq	.+18     	; 0xfe <deQ+0x40>
		self->traf->bridge->nToS++;
      ec:	06 80       	ldd	r0, Z+6	; 0x06
      ee:	f7 81       	ldd	r31, Z+7	; 0x07
      f0:	e0 2d       	mov	r30, r0
      f2:	86 81       	ldd	r24, Z+6	; 0x06
      f4:	97 81       	ldd	r25, Z+7	; 0x07
      f6:	01 96       	adiw	r24, 0x01	; 1
      f8:	97 83       	std	Z+7, r25	; 0x07
      fa:	86 83       	std	Z+6, r24	; 0x06
      fc:	08 95       	ret
	} else if (self->traf->s) {
      fe:	84 81       	ldd	r24, Z+4	; 0x04
     100:	88 23       	and	r24, r24
     102:	41 f0       	breq	.+16     	; 0x114 <deQ+0x56>
		self->traf->bridge->sToN++;
     104:	06 80       	ldd	r0, Z+6	; 0x06
     106:	f7 81       	ldd	r31, Z+7	; 0x07
     108:	e0 2d       	mov	r30, r0
     10a:	80 85       	ldd	r24, Z+8	; 0x08
     10c:	91 85       	ldd	r25, Z+9	; 0x09
     10e:	01 96       	adiw	r24, 0x01	; 1
     110:	91 87       	std	Z+9, r25	; 0x09
     112:	80 87       	std	Z+8, r24	; 0x08
     114:	08 95       	ret

00000116 <updateAll>:
 */ 

#include "Inter.h"


void updateAll(Inter *self, int trafficChange) {
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	ec 01       	movw	r28, r24
	if (trafficChange == 1) {
     11c:	61 30       	cpi	r22, 0x01	; 1
     11e:	71 05       	cpc	r23, r1
     120:	31 f4       	brne	.+12     	; 0x12e <updateAll+0x18>
		updateTrafficSignal(self->north->traf);
     122:	e8 81       	ld	r30, Y
     124:	f9 81       	ldd	r31, Y+1	; 0x01
     126:	86 81       	ldd	r24, Z+6	; 0x06
     128:	97 81       	ldd	r25, Z+7	; 0x07
     12a:	0e 94 96 03 	call	0x72c	; 0x72c <updateTrafficSignal>
	}
	update(self->north->carsInQ, self->south->carsInQ, self->north->traf->bridge->carsOnBridge);
     12e:	e8 81       	ld	r30, Y
     130:	f9 81       	ldd	r31, Y+1	; 0x01
     132:	a6 81       	ldd	r26, Z+6	; 0x06
     134:	b7 81       	ldd	r27, Z+7	; 0x07
     136:	16 96       	adiw	r26, 0x06	; 6
     138:	0d 90       	ld	r0, X+
     13a:	bc 91       	ld	r27, X
     13c:	a0 2d       	mov	r26, r0
     13e:	14 96       	adiw	r26, 0x04	; 4
     140:	4d 91       	ld	r20, X+
     142:	5c 91       	ld	r21, X
     144:	15 97       	sbiw	r26, 0x05	; 5
     146:	aa 81       	ldd	r26, Y+2	; 0x02
     148:	bb 81       	ldd	r27, Y+3	; 0x03
     14a:	14 96       	adiw	r26, 0x04	; 4
     14c:	6d 91       	ld	r22, X+
     14e:	7c 91       	ld	r23, X
     150:	15 97       	sbiw	r26, 0x05	; 5
     152:	84 81       	ldd	r24, Z+4	; 0x04
     154:	95 81       	ldd	r25, Z+5	; 0x05
     156:	0e 94 59 05 	call	0xab2	; 0xab2 <update>
}
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <removeFromBridge>:
		self->timer++;
	}
	updateAll(self, 0);
}

void removeFromBridge(Inter *self) {
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
	if (self->running) {
     170:	fc 01       	movw	r30, r24
     172:	26 81       	ldd	r18, Z+6	; 0x06
     174:	22 23       	and	r18, r18
     176:	e9 f0       	breq	.+58     	; 0x1b2 <removeFromBridge+0x52>
     178:	ec 01       	movw	r28, r24
		ASYNC(&self->north->traf->bridge, subCar, NULL);
     17a:	01 90       	ld	r0, Z+
     17c:	f0 81       	ld	r31, Z
     17e:	e0 2d       	mov	r30, r0
     180:	06 81       	ldd	r16, Z+6	; 0x06
     182:	17 81       	ldd	r17, Z+7	; 0x07
     184:	0a 5f       	subi	r16, 0xFA	; 250
     186:	1f 4f       	sbci	r17, 0xFF	; 255
     188:	c1 2c       	mov	r12, r1
     18a:	d1 2c       	mov	r13, r1
     18c:	0f 2e       	mov	r0, r31
     18e:	f9 ec       	ldi	r31, 0xC9	; 201
     190:	ef 2e       	mov	r14, r31
     192:	f5 e0       	ldi	r31, 0x05	; 5
     194:	ff 2e       	mov	r15, r31
     196:	f0 2d       	mov	r31, r0
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	a9 01       	movw	r20, r18
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	cb 01       	movw	r24, r22
     1a4:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
		updateAll(self, 0);
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	ce 01       	movw	r24, r28
     1ae:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
	}
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	ff 90       	pop	r15
     1bc:	ef 90       	pop	r14
     1be:	df 90       	pop	r13
     1c0:	cf 90       	pop	r12
     1c2:	08 95       	ret

000001c4 <sendToBridge>:
	self->south->carsInQ = 0;
	self->north->traf->bridge->carsOnBridge = 0;
	updateAll(self, 0);
}

void sendToBridge(Inter *self) {
     1c4:	cf 92       	push	r12
     1c6:	df 92       	push	r13
     1c8:	ef 92       	push	r14
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	ec 01       	movw	r28, r24
	if (self->north->traf->n) {
     1d6:	e8 81       	ld	r30, Y
     1d8:	f9 81       	ldd	r31, Y+1	; 0x01
     1da:	06 80       	ldd	r0, Z+6	; 0x06
     1dc:	f7 81       	ldd	r31, Z+7	; 0x07
     1de:	e0 2d       	mov	r30, r0
     1e0:	85 81       	ldd	r24, Z+5	; 0x05
     1e2:	88 23       	and	r24, r24
     1e4:	09 f1       	breq	.+66     	; 0x228 <sendToBridge+0x64>
		ASYNC(&self->north, deQ, NULL);
     1e6:	c1 2c       	mov	r12, r1
     1e8:	d1 2c       	mov	r13, r1
     1ea:	0f 2e       	mov	r0, r31
     1ec:	ff e5       	ldi	r31, 0x5F	; 95
     1ee:	ef 2e       	mov	r14, r31
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	ff 2e       	mov	r15, r31
     1f4:	f0 2d       	mov	r31, r0
     1f6:	8e 01       	movw	r16, r28
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	a9 01       	movw	r20, r18
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	cb 01       	movw	r24, r22
     204:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
		AFTER(SEC(5), self, removeFromBridge, NULL);
     208:	0f 2e       	mov	r0, r31
     20a:	f0 eb       	ldi	r31, 0xB0	; 176
     20c:	ef 2e       	mov	r14, r31
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	ff 2e       	mov	r15, r31
     212:	f0 2d       	mov	r31, r0
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	a9 01       	movw	r20, r18
     21a:	6a e5       	ldi	r22, 0x5A	; 90
     21c:	72 e6       	ldi	r23, 0x62	; 98
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
     226:	2b c0       	rjmp	.+86     	; 0x27e <sendToBridge+0xba>
	} else if (self->south->traf->s){
     228:	ea 81       	ldd	r30, Y+2	; 0x02
     22a:	fb 81       	ldd	r31, Y+3	; 0x03
     22c:	06 80       	ldd	r0, Z+6	; 0x06
     22e:	f7 81       	ldd	r31, Z+7	; 0x07
     230:	e0 2d       	mov	r30, r0
     232:	84 81       	ldd	r24, Z+4	; 0x04
     234:	88 23       	and	r24, r24
     236:	19 f1       	breq	.+70     	; 0x27e <sendToBridge+0xba>
		ASYNC(&self->south, deQ, NULL);
     238:	c1 2c       	mov	r12, r1
     23a:	d1 2c       	mov	r13, r1
     23c:	0f 2e       	mov	r0, r31
     23e:	ff e5       	ldi	r31, 0x5F	; 95
     240:	ef 2e       	mov	r14, r31
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	ff 2e       	mov	r15, r31
     246:	f0 2d       	mov	r31, r0
     248:	8e 01       	movw	r16, r28
     24a:	0e 5f       	subi	r16, 0xFE	; 254
     24c:	1f 4f       	sbci	r17, 0xFF	; 255
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	a9 01       	movw	r20, r18
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	cb 01       	movw	r24, r22
     25a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
		AFTER(SEC(5), self, removeFromBridge, NULL);
     25e:	0f 2e       	mov	r0, r31
     260:	f0 eb       	ldi	r31, 0xB0	; 176
     262:	ef 2e       	mov	r14, r31
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	ff 2e       	mov	r15, r31
     268:	f0 2d       	mov	r31, r0
     26a:	8e 01       	movw	r16, r28
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	a9 01       	movw	r20, r18
     272:	6a e5       	ldi	r22, 0x5A	; 90
     274:	72 e6       	ldi	r23, 0x62	; 98
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
	}

	if (self->north->carsInQ > 0 && (self->south->carsInQ == 0 || !self->north->traf->s) && self->north->traf->bridge->sToN == 0) {
     27e:	e8 81       	ld	r30, Y
     280:	f9 81       	ldd	r31, Y+1	; 0x01
     282:	84 81       	ldd	r24, Z+4	; 0x04
     284:	95 81       	ldd	r25, Z+5	; 0x05
     286:	18 16       	cp	r1, r24
     288:	19 06       	cpc	r1, r25
     28a:	9c f5       	brge	.+102    	; 0x2f2 <sendToBridge+0x12e>
     28c:	aa 81       	ldd	r26, Y+2	; 0x02
     28e:	bb 81       	ldd	r27, Y+3	; 0x03
     290:	14 96       	adiw	r26, 0x04	; 4
     292:	2d 91       	ld	r18, X+
     294:	3c 91       	ld	r19, X
     296:	15 97       	sbiw	r26, 0x05	; 5
     298:	23 2b       	or	r18, r19
     29a:	09 f4       	brne	.+2      	; 0x29e <sendToBridge+0xda>
     29c:	77 c0       	rjmp	.+238    	; 0x38c <sendToBridge+0x1c8>
     29e:	a6 81       	ldd	r26, Z+6	; 0x06
     2a0:	b7 81       	ldd	r27, Z+7	; 0x07
     2a2:	14 96       	adiw	r26, 0x04	; 4
     2a4:	2c 91       	ld	r18, X
     2a6:	14 97       	sbiw	r26, 0x04	; 4
     2a8:	21 11       	cpse	r18, r1
     2aa:	23 c0       	rjmp	.+70     	; 0x2f2 <sendToBridge+0x12e>
     2ac:	16 96       	adiw	r26, 0x06	; 6
     2ae:	0d 90       	ld	r0, X+
     2b0:	bc 91       	ld	r27, X
     2b2:	a0 2d       	mov	r26, r0
     2b4:	18 96       	adiw	r26, 0x08	; 8
     2b6:	2d 91       	ld	r18, X+
     2b8:	3c 91       	ld	r19, X
     2ba:	19 97       	sbiw	r26, 0x09	; 9
     2bc:	23 2b       	or	r18, r19
     2be:	c9 f4       	brne	.+50     	; 0x2f2 <sendToBridge+0x12e>
		SYNC(&self->north->traf, turnNorth, true);
     2c0:	41 e0       	ldi	r20, 0x01	; 1
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	65 e2       	ldi	r22, 0x25	; 37
     2c6:	72 e1       	ldi	r23, 0x12	; 18
     2c8:	cf 01       	movw	r24, r30
     2ca:	06 96       	adiw	r24, 0x06	; 6
     2cc:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <sync>
		SYNC(&self->north->traf, turnSouth, false);
     2d0:	88 81       	ld	r24, Y
     2d2:	99 81       	ldd	r25, Y+1	; 0x01
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	68 e2       	ldi	r22, 0x28	; 40
     2da:	72 e1       	ldi	r23, 0x12	; 18
     2dc:	06 96       	adiw	r24, 0x06	; 6
     2de:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <sync>
		updateAll(self, 1);
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	ce 01       	movw	r24, r28
     2e8:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
		self->timer = 0;
     2ec:	1d 82       	std	Y+5, r1	; 0x05
     2ee:	1c 82       	std	Y+4, r1	; 0x04
     2f0:	35 c0       	rjmp	.+106    	; 0x35c <sendToBridge+0x198>
	} else if (self->south->carsInQ > 0 && (self->north->carsInQ == 0 || !self->north->traf->n) && self->north->traf->bridge->nToS == 0) {
     2f2:	aa 81       	ldd	r26, Y+2	; 0x02
     2f4:	bb 81       	ldd	r27, Y+3	; 0x03
     2f6:	14 96       	adiw	r26, 0x04	; 4
     2f8:	2d 91       	ld	r18, X+
     2fa:	3c 91       	ld	r19, X
     2fc:	15 97       	sbiw	r26, 0x05	; 5
     2fe:	12 16       	cp	r1, r18
     300:	13 06       	cpc	r1, r19
     302:	64 f5       	brge	.+88     	; 0x35c <sendToBridge+0x198>
     304:	89 2b       	or	r24, r25
     306:	31 f0       	breq	.+12     	; 0x314 <sendToBridge+0x150>
     308:	a6 81       	ldd	r26, Z+6	; 0x06
     30a:	b7 81       	ldd	r27, Z+7	; 0x07
     30c:	15 96       	adiw	r26, 0x05	; 5
     30e:	8c 91       	ld	r24, X
     310:	81 11       	cpse	r24, r1
     312:	24 c0       	rjmp	.+72     	; 0x35c <sendToBridge+0x198>
     314:	a6 81       	ldd	r26, Z+6	; 0x06
     316:	b7 81       	ldd	r27, Z+7	; 0x07
     318:	16 96       	adiw	r26, 0x06	; 6
     31a:	0d 90       	ld	r0, X+
     31c:	bc 91       	ld	r27, X
     31e:	a0 2d       	mov	r26, r0
     320:	16 96       	adiw	r26, 0x06	; 6
     322:	8d 91       	ld	r24, X+
     324:	9c 91       	ld	r25, X
     326:	17 97       	sbiw	r26, 0x07	; 7
     328:	89 2b       	or	r24, r25
     32a:	c1 f4       	brne	.+48     	; 0x35c <sendToBridge+0x198>
		SYNC(&self->north->traf, turnSouth, true);
     32c:	41 e0       	ldi	r20, 0x01	; 1
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	68 e2       	ldi	r22, 0x28	; 40
     332:	72 e1       	ldi	r23, 0x12	; 18
     334:	cf 01       	movw	r24, r30
     336:	06 96       	adiw	r24, 0x06	; 6
     338:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <sync>
		SYNC(&self->north->traf, turnNorth, false);
     33c:	88 81       	ld	r24, Y
     33e:	99 81       	ldd	r25, Y+1	; 0x01
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	65 e2       	ldi	r22, 0x25	; 37
     346:	72 e1       	ldi	r23, 0x12	; 18
     348:	06 96       	adiw	r24, 0x06	; 6
     34a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <sync>
		updateAll(self, 1);
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	ce 01       	movw	r24, r28
     354:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
		self->timer = 0;
     358:	1d 82       	std	Y+5, r1	; 0x05
     35a:	1c 82       	std	Y+4, r1	; 0x04
	}
	updateAll(self, 0);
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	ce 01       	movw	r24, r28
     362:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
	AFTER(SEC(1), self, sendToBridge, NULL);
     366:	c1 2c       	mov	r12, r1
     368:	d1 2c       	mov	r13, r1
     36a:	0f 2e       	mov	r0, r31
     36c:	f2 ee       	ldi	r31, 0xE2	; 226
     36e:	ef 2e       	mov	r14, r31
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	ff 2e       	mov	r15, r31
     374:	f0 2d       	mov	r31, r0
     376:	8e 01       	movw	r16, r28
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	a9 01       	movw	r20, r18
     37e:	62 e1       	ldi	r22, 0x12	; 18
     380:	7a e7       	ldi	r23, 0x7A	; 122
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
}
     38a:	0e c0       	rjmp	.+28     	; 0x3a8 <sendToBridge+0x1e4>
	} else if (self->south->traf->s){
		ASYNC(&self->south, deQ, NULL);
		AFTER(SEC(5), self, removeFromBridge, NULL);
	}

	if (self->north->carsInQ > 0 && (self->south->carsInQ == 0 || !self->north->traf->s) && self->north->traf->bridge->sToN == 0) {
     38c:	a6 81       	ldd	r26, Z+6	; 0x06
     38e:	b7 81       	ldd	r27, Z+7	; 0x07
     390:	16 96       	adiw	r26, 0x06	; 6
     392:	0d 90       	ld	r0, X+
     394:	bc 91       	ld	r27, X
     396:	a0 2d       	mov	r26, r0
     398:	18 96       	adiw	r26, 0x08	; 8
     39a:	8d 91       	ld	r24, X+
     39c:	9c 91       	ld	r25, X
     39e:	19 97       	sbiw	r26, 0x09	; 9
     3a0:	89 2b       	or	r24, r25
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <sendToBridge+0x1e2>
     3a4:	8d cf       	rjmp	.-230    	; 0x2c0 <sendToBridge+0xfc>
     3a6:	da cf       	rjmp	.-76     	; 0x35c <sendToBridge+0x198>
		updateAll(self, 1);
		self->timer = 0;
	}
	updateAll(self, 0);
	AFTER(SEC(1), self, sendToBridge, NULL);
}
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
     3b4:	df 90       	pop	r13
     3b6:	cf 90       	pop	r12
     3b8:	08 95       	ret

000003ba <addToNorthQueue>:
	self->north->traf->bridge->sToN++;
	checkTimer(self);
	AFTER(SEC(5), self, removeFromBridge, NULL);
}

void addToNorthQueue(Inter *self) {
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ec 01       	movw	r28, r24
	SYNC(&self->north, enQ, NULL);
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	67 e5       	ldi	r22, 0x57	; 87
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <sync>
	updateAll(self, 0);
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	ce 01       	movw	r24, r28
     3d2:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <addToSouthQueue>:

void addToSouthQueue(Inter *self) {
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	ec 01       	movw	r28, r24
	SYNC(&self->south, enQ, NULL);
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	67 e5       	ldi	r22, 0x57	; 87
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	02 96       	adiw	r24, 0x02	; 2
     3ec:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <sync>
	updateAll(self, 0);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	ce 01       	movw	r24, r28
     3f6:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <onStart>:

void onStart(Inter *self) {
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
	//initLCD();
	sendToBridge(self);
     406:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <sendToBridge>
	self->running = true;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	8e 83       	std	Y+6, r24	; 0x06
	addToNorthQueue(self);
     40e:	ce 01       	movw	r24, r28
     410:	0e 94 dd 01 	call	0x3ba	; 0x3ba <addToNorthQueue>
	updateAll(self, 0);
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	ce 01       	movw	r24, r28
     41a:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
}
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <onExit>:

void onExit(Inter *self) {
	self->running = false;
     424:	dc 01       	movw	r26, r24
     426:	16 96       	adiw	r26, 0x06	; 6
     428:	1c 92       	st	X, r1
     42a:	16 97       	sbiw	r26, 0x06	; 6
	self->north->carsInQ = 0;
     42c:	ed 91       	ld	r30, X+
     42e:	fc 91       	ld	r31, X
     430:	11 97       	sbiw	r26, 0x01	; 1
     432:	15 82       	std	Z+5, r1	; 0x05
     434:	14 82       	std	Z+4, r1	; 0x04
	self->south->carsInQ = 0;
     436:	12 96       	adiw	r26, 0x02	; 2
     438:	ed 91       	ld	r30, X+
     43a:	fc 91       	ld	r31, X
     43c:	13 97       	sbiw	r26, 0x03	; 3
     43e:	15 82       	std	Z+5, r1	; 0x05
     440:	14 82       	std	Z+4, r1	; 0x04
	self->north->traf->bridge->carsOnBridge = 0;
     442:	ed 91       	ld	r30, X+
     444:	fc 91       	ld	r31, X
     446:	06 80       	ldd	r0, Z+6	; 0x06
     448:	f7 81       	ldd	r31, Z+7	; 0x07
     44a:	e0 2d       	mov	r30, r0
     44c:	06 80       	ldd	r0, Z+6	; 0x06
     44e:	f7 81       	ldd	r31, Z+7	; 0x07
     450:	e0 2d       	mov	r30, r0
     452:	15 82       	std	Z+5, r1	; 0x05
     454:	14 82       	std	Z+4, r1	; 0x04
	updateAll(self, 0);
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
     45e:	08 95       	ret

00000460 <checkTimer>:
	}
	updateAll(self, 0);
	AFTER(SEC(1), self, sendToBridge, NULL);
}

void checkTimer(Inter *self) {
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	ec 01       	movw	r28, r24
	if (self->timer >= 16) {
     472:	8c 81       	ldd	r24, Y+4	; 0x04
     474:	9d 81       	ldd	r25, Y+5	; 0x05
     476:	80 31       	cpi	r24, 0x10	; 16
     478:	91 05       	cpc	r25, r1
     47a:	0c f4       	brge	.+2      	; 0x47e <checkTimer+0x1e>
     47c:	5f c0       	rjmp	.+190    	; 0x53c <__stack+0x3d>
		self->timer = 0;
     47e:	1d 82       	std	Y+5, r1	; 0x05
     480:	1c 82       	std	Y+4, r1	; 0x04
		if (self->north->traf->n) {
     482:	a8 81       	ld	r26, Y
     484:	b9 81       	ldd	r27, Y+1	; 0x01
     486:	16 96       	adiw	r26, 0x06	; 6
     488:	ed 91       	ld	r30, X+
     48a:	fc 91       	ld	r31, X
     48c:	17 97       	sbiw	r26, 0x07	; 7
     48e:	85 81       	ldd	r24, Z+5	; 0x05
     490:	88 23       	and	r24, r24
     492:	f9 f0       	breq	.+62     	; 0x4d2 <checkTimer+0x72>
			SYNC(&self->north->traf, turnNorth, false);
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	65 e2       	ldi	r22, 0x25	; 37
     49a:	72 e1       	ldi	r23, 0x12	; 18
     49c:	cd 01       	movw	r24, r26
     49e:	06 96       	adiw	r24, 0x06	; 6
     4a0:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <sync>
			AFTER(SEC(5), &self->north->traf, turnSouth, true);
     4a4:	08 81       	ld	r16, Y
     4a6:	19 81       	ldd	r17, Y+1	; 0x01
     4a8:	0a 5f       	subi	r16, 0xFA	; 250
     4aa:	1f 4f       	sbci	r17, 0xFF	; 255
     4ac:	cc 24       	eor	r12, r12
     4ae:	c3 94       	inc	r12
     4b0:	d1 2c       	mov	r13, r1
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f8 e2       	ldi	r31, 0x28	; 40
     4b6:	ef 2e       	mov	r14, r31
     4b8:	f2 e1       	ldi	r31, 0x12	; 18
     4ba:	ff 2e       	mov	r15, r31
     4bc:	f0 2d       	mov	r31, r0
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	a9 01       	movw	r20, r18
     4c4:	6a e5       	ldi	r22, 0x5A	; 90
     4c6:	72 e6       	ldi	r23, 0x62	; 98
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
     4d0:	21 c0       	rjmp	.+66     	; 0x514 <__stack+0x15>
		} else if (self->north->traf->s) {
     4d2:	84 81       	ldd	r24, Z+4	; 0x04
     4d4:	88 23       	and	r24, r24
     4d6:	f1 f0       	breq	.+60     	; 0x514 <__stack+0x15>
			SYNC(&self->north->traf, turnSouth, false);
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	68 e2       	ldi	r22, 0x28	; 40
     4de:	72 e1       	ldi	r23, 0x12	; 18
     4e0:	cd 01       	movw	r24, r26
     4e2:	06 96       	adiw	r24, 0x06	; 6
     4e4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <sync>
			AFTER(SEC(5), &self->north->traf, turnNorth, true);
     4e8:	08 81       	ld	r16, Y
     4ea:	19 81       	ldd	r17, Y+1	; 0x01
     4ec:	0a 5f       	subi	r16, 0xFA	; 250
     4ee:	1f 4f       	sbci	r17, 0xFF	; 255
     4f0:	cc 24       	eor	r12, r12
     4f2:	c3 94       	inc	r12
     4f4:	d1 2c       	mov	r13, r1
     4f6:	0f 2e       	mov	r0, r31
     4f8:	f5 e2       	ldi	r31, 0x25	; 37
     4fa:	ef 2e       	mov	r14, r31
     4fc:	f2 e1       	ldi	r31, 0x12	; 18
     4fe:	ff 2e       	mov	r15, r31
     500:	f0 2d       	mov	r31, r0
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	a9 01       	movw	r20, r18
     508:	6a e5       	ldi	r22, 0x5A	; 90
     50a:	72 e6       	ldi	r23, 0x62	; 98
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
		}
		AFTER(SEC(5), self, updateAll, 1);
     514:	cc 24       	eor	r12, r12
     516:	c3 94       	inc	r12
     518:	d1 2c       	mov	r13, r1
     51a:	0f 2e       	mov	r0, r31
     51c:	fb e8       	ldi	r31, 0x8B	; 139
     51e:	ef 2e       	mov	r14, r31
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	ff 2e       	mov	r15, r31
     524:	f0 2d       	mov	r31, r0
     526:	8e 01       	movw	r16, r28
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	a9 01       	movw	r20, r18
     52e:	6a e5       	ldi	r22, 0x5A	; 90
     530:	72 e6       	ldi	r23, 0x62	; 98
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
     53a:	0e c0       	rjmp	.+28     	; 0x558 <__stack+0x59>
	} else if (self->north->traf->n || self->north->traf->s) {
     53c:	e8 81       	ld	r30, Y
     53e:	f9 81       	ldd	r31, Y+1	; 0x01
     540:	06 80       	ldd	r0, Z+6	; 0x06
     542:	f7 81       	ldd	r31, Z+7	; 0x07
     544:	e0 2d       	mov	r30, r0
     546:	25 81       	ldd	r18, Z+5	; 0x05
     548:	21 11       	cpse	r18, r1
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__stack+0x53>
     54c:	24 81       	ldd	r18, Z+4	; 0x04
     54e:	22 23       	and	r18, r18
     550:	19 f0       	breq	.+6      	; 0x558 <__stack+0x59>
		self->timer++;
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	9d 83       	std	Y+5, r25	; 0x05
     556:	8c 83       	std	Y+4, r24	; 0x04
	}
	updateAll(self, 0);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	ce 01       	movw	r24, r28
     55e:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	08 95       	ret

00000574 <sendDirectlyNorth>:
		updateAll(self, 0);
	}
}


void sendDirectlyNorth(Inter *self) {
     574:	cf 92       	push	r12
     576:	df 92       	push	r13
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	ec 01       	movw	r28, r24
	self->north->traf->bridge++;
     586:	e8 81       	ld	r30, Y
     588:	f9 81       	ldd	r31, Y+1	; 0x01
     58a:	06 80       	ldd	r0, Z+6	; 0x06
     58c:	f7 81       	ldd	r31, Z+7	; 0x07
     58e:	e0 2d       	mov	r30, r0
     590:	86 81       	ldd	r24, Z+6	; 0x06
     592:	97 81       	ldd	r25, Z+7	; 0x07
     594:	0a 96       	adiw	r24, 0x0a	; 10
     596:	97 83       	std	Z+7, r25	; 0x07
     598:	86 83       	std	Z+6, r24	; 0x06
	self->north->traf->bridge->nToS++;
     59a:	e8 81       	ld	r30, Y
     59c:	f9 81       	ldd	r31, Y+1	; 0x01
     59e:	06 80       	ldd	r0, Z+6	; 0x06
     5a0:	f7 81       	ldd	r31, Z+7	; 0x07
     5a2:	e0 2d       	mov	r30, r0
     5a4:	06 80       	ldd	r0, Z+6	; 0x06
     5a6:	f7 81       	ldd	r31, Z+7	; 0x07
     5a8:	e0 2d       	mov	r30, r0
     5aa:	86 81       	ldd	r24, Z+6	; 0x06
     5ac:	97 81       	ldd	r25, Z+7	; 0x07
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	97 83       	std	Z+7, r25	; 0x07
     5b2:	86 83       	std	Z+6, r24	; 0x06
	checkTimer(self);
     5b4:	ce 01       	movw	r24, r28
     5b6:	0e 94 30 02 	call	0x460	; 0x460 <checkTimer>
	AFTER(SEC(5), self, removeFromBridge, NULL);
     5ba:	c1 2c       	mov	r12, r1
     5bc:	d1 2c       	mov	r13, r1
     5be:	0f 2e       	mov	r0, r31
     5c0:	f0 eb       	ldi	r31, 0xB0	; 176
     5c2:	ef 2e       	mov	r14, r31
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	ff 2e       	mov	r15, r31
     5c8:	f0 2d       	mov	r31, r0
     5ca:	8e 01       	movw	r16, r28
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	a9 01       	movw	r20, r18
     5d2:	6a e5       	ldi	r22, 0x5A	; 90
     5d4:	72 e6       	ldi	r23, 0x62	; 98
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	08 95       	ret

000005f0 <sendDirectlySouth>:

void sendDirectlySouth(Inter *self) {
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ec 01       	movw	r28, r24
	self->north->traf->bridge++;
     602:	e8 81       	ld	r30, Y
     604:	f9 81       	ldd	r31, Y+1	; 0x01
     606:	06 80       	ldd	r0, Z+6	; 0x06
     608:	f7 81       	ldd	r31, Z+7	; 0x07
     60a:	e0 2d       	mov	r30, r0
     60c:	86 81       	ldd	r24, Z+6	; 0x06
     60e:	97 81       	ldd	r25, Z+7	; 0x07
     610:	0a 96       	adiw	r24, 0x0a	; 10
     612:	97 83       	std	Z+7, r25	; 0x07
     614:	86 83       	std	Z+6, r24	; 0x06
	self->north->traf->bridge->sToN++;
     616:	e8 81       	ld	r30, Y
     618:	f9 81       	ldd	r31, Y+1	; 0x01
     61a:	06 80       	ldd	r0, Z+6	; 0x06
     61c:	f7 81       	ldd	r31, Z+7	; 0x07
     61e:	e0 2d       	mov	r30, r0
     620:	06 80       	ldd	r0, Z+6	; 0x06
     622:	f7 81       	ldd	r31, Z+7	; 0x07
     624:	e0 2d       	mov	r30, r0
     626:	80 85       	ldd	r24, Z+8	; 0x08
     628:	91 85       	ldd	r25, Z+9	; 0x09
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	91 87       	std	Z+9, r25	; 0x09
     62e:	80 87       	std	Z+8, r24	; 0x08
	checkTimer(self);
     630:	ce 01       	movw	r24, r28
     632:	0e 94 30 02 	call	0x460	; 0x460 <checkTimer>
	AFTER(SEC(5), self, removeFromBridge, NULL);
     636:	c1 2c       	mov	r12, r1
     638:	d1 2c       	mov	r13, r1
     63a:	0f 2e       	mov	r0, r31
     63c:	f0 eb       	ldi	r31, 0xB0	; 176
     63e:	ef 2e       	mov	r14, r31
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	ff 2e       	mov	r15, r31
     644:	f0 2d       	mov	r31, r0
     646:	8e 01       	movw	r16, r28
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	a9 01       	movw	r20, r18
     64e:	6a e5       	ldi	r22, 0x5A	; 90
     650:	72 e6       	ldi	r23, 0x62	; 98
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
}
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	08 95       	ret

0000066c <interSignal>:
		updateTrafficSignal(self->north->traf);
	}
	update(self->north->carsInQ, self->south->carsInQ, self->north->traf->bridge->carsOnBridge);
}

void interSignal(Inter *self, int arg) {
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	dc 01       	movw	r26, r24
	if (self->running) {
     672:	16 96       	adiw	r26, 0x06	; 6
     674:	8c 91       	ld	r24, X
     676:	16 97       	sbiw	r26, 0x06	; 6
     678:	88 23       	and	r24, r24
     67a:	71 f1       	breq	.+92     	; 0x6d8 <interSignal+0x6c>
		while ( !(UCSR0A & (1 << RXC0)) ) {}  // Wait until data is received
     67c:	e0 ec       	ldi	r30, 0xC0	; 192
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	90 81       	ld	r25, Z
     682:	99 23       	and	r25, r25
     684:	ec f7       	brge	.-6      	; 0x680 <interSignal+0x14>
     686:	ed 01       	movw	r28, r26
										  // Read the data from the RX buffer
		//while ( !(UCSR0A & (1 << UDRE0)) ) // Wait until buffer is empty
			//UDR0 = ReceivedChar;                    // Send the data to the TX buffer
		if (UDR0 == 0x6E) {
     688:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     68c:	8e 36       	cpi	r24, 0x6E	; 110
     68e:	21 f4       	brne	.+8      	; 0x698 <interSignal+0x2c>
			addToNorthQueue(self);	
     690:	cd 01       	movw	r24, r26
     692:	0e 94 dd 01 	call	0x3ba	; 0x3ba <addToNorthQueue>
     696:	1b c0       	rjmp	.+54     	; 0x6ce <interSignal+0x62>
		} else if (UDR0 & 1) {
     698:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     69c:	80 ff       	sbrs	r24, 0
     69e:	04 c0       	rjmp	.+8      	; 0x6a8 <interSignal+0x3c>
			sendDirectlyNorth(self);
     6a0:	cd 01       	movw	r24, r26
     6a2:	0e 94 ba 02 	call	0x574	; 0x574 <sendDirectlyNorth>
     6a6:	13 c0       	rjmp	.+38     	; 0x6ce <interSignal+0x62>
		} else if (UDR0 == 0x73) {
     6a8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     6ac:	83 37       	cpi	r24, 0x73	; 115
     6ae:	21 f4       	brne	.+8      	; 0x6b8 <interSignal+0x4c>
			addToSouthQueue(self);
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <addToSouthQueue>
     6b6:	0b c0       	rjmp	.+22     	; 0x6ce <interSignal+0x62>
		} else if (UDR0 & 3) {
     6b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     6bc:	83 70       	andi	r24, 0x03	; 3
     6be:	21 f0       	breq	.+8      	; 0x6c8 <interSignal+0x5c>
			sendDirectlySouth(self);
     6c0:	cd 01       	movw	r24, r26
     6c2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sendDirectlySouth>
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <interSignal+0x62>
		} else {
			onExit(self);
     6c8:	cd 01       	movw	r24, r26
     6ca:	0e 94 12 02 	call	0x424	; 0x424 <onExit>
		}
		updateAll(self, 0);
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	ce 01       	movw	r24, r28
     6d4:	0e 94 8b 00 	call	0x116	; 0x116 <updateAll>
	}
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <initLCD>:
 */ 

#include "LCD.h"

void initLCD() {
	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
     6de:	86 e3       	ldi	r24, 0x36	; 54
     6e0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
     6e4:	87 e0       	ldi	r24, 0x07	; 7
     6e6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
     6ea:	8f e0       	ldi	r24, 0x0F	; 15
     6ec:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
     6f0:	80 ec       	ldi	r24, 0xC0	; 192
     6f2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
     6f6:	9d e0       	ldi	r25, 0x0D	; 13
     6f8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	UCSR0B = (1 << RXEN0)|(1<<TXEN0)|(1 << RXCIE0);
     6fc:	98 e9       	ldi	r25, 0x98	; 152
     6fe:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   // Set frame: 8data, 1 stp
     702:	96 e0       	ldi	r25, 0x06	; 6
     704:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UBRR0H = (MYUBRR >> 8);
     708:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = MYUBRR;
     70c:	93 e3       	ldi	r25, 0x33	; 51
     70e:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	    
	PCMSK0 = 0x0c;
     712:	9c e0       	ldi	r25, 0x0C	; 12
     714:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	PCMSK1 = 0xd0;
     718:	20 ed       	ldi	r18, 0xD0	; 208
     71a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	EIFR = 0xc0;
     71e:	8c bb       	out	0x1c, r24	; 28
	EIMSK = 0xc0;
     720:	8d bb       	out	0x1d, r24	; 29
	PORTB = (1 << PB7)|(1 << PB6)|(1 << PB4);
     722:	25 b9       	out	0x05, r18	; 5
	PORTE = (1 << PE3)|(1 << PE2);
     724:	9e b9       	out	0x0e, r25	; 14
	DDRB = (0<<DDB7)|(0<<DDB6);
     726:	14 b8       	out	0x04, r1	; 4
	MCUCR = (0 << PUD);
     728:	15 be       	out	0x35, r1	; 53
     72a:	08 95       	ret

0000072c <updateTrafficSignal>:
	printQS(n2);
	printOnBridge(n3);
}

void updateTrafficSignal(TrafficLight *traff) {
	UDR0 = (traff->n << 4)|(!(traff->n) << 5)|(traff->s << 6)|(!(traff->s) << 7);
     72c:	fc 01       	movw	r30, r24
     72e:	35 81       	ldd	r19, Z+5	; 0x05
     730:	84 81       	ldd	r24, Z+4	; 0x04
     732:	f0 e1       	ldi	r31, 0x10	; 16
     734:	3f 9f       	mul	r19, r31
     736:	b0 01       	movw	r22, r0
     738:	11 24       	eor	r1, r1
     73a:	90 e4       	ldi	r25, 0x40	; 64
     73c:	89 9f       	mul	r24, r25
     73e:	a0 01       	movw	r20, r0
     740:	11 24       	eor	r1, r1
     742:	46 2b       	or	r20, r22
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	39 27       	eor	r19, r25
     748:	e0 e2       	ldi	r30, 0x20	; 32
     74a:	3e 9f       	mul	r19, r30
     74c:	90 01       	movw	r18, r0
     74e:	11 24       	eor	r1, r1
     750:	24 2b       	or	r18, r20
     752:	98 27       	eor	r25, r24
     754:	f0 e8       	ldi	r31, 0x80	; 128
     756:	9f 9f       	mul	r25, r31
     758:	c0 01       	movw	r24, r0
     75a:	11 24       	eor	r1, r1
     75c:	82 2b       	or	r24, r18
     75e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     762:	08 95       	ret

00000764 <writeChar>:
	pp++;
	writeChar( num % 10 + '0', pp);
}

void writeChar(char ch, int pos) {
	DISABLE;
     764:	78 94       	sei
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	fc 01       	movw	r30, r24
     76a:	f0 97       	sbiw	r30, 0x30	; 48
     76c:	ea 30       	cpi	r30, 0x0A	; 10
     76e:	f1 05       	cpc	r31, r1
     770:	08 f0       	brcs	.+2      	; 0x774 <writeChar+0x10>
     772:	69 c1       	rjmp	.+722    	; 0xa46 <writeChar+0x2e2>
     774:	e2 5d       	subi	r30, 0xD2	; 210
     776:	ff 4f       	sbci	r31, 0xFF	; 255
     778:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__tablejump2__>
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     780:	41 e0       	ldi	r20, 0x01	; 1
     782:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
     784:	e1 e0       	ldi	r30, 0x01	; 1
     786:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	50 c0       	rjmp	.+160    	; 0x82e <writeChar+0xca>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
     78e:	21 e0       	ldi	r18, 0x01	; 1
     790:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
     792:	4e e0       	ldi	r20, 0x0E	; 14
     794:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     796:	e1 e0       	ldi	r30, 0x01	; 1
     798:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
     79e:	47 c0       	rjmp	.+142    	; 0x82e <writeChar+0xca>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
     7a4:	4b e0       	ldi	r20, 0x0B	; 11
     7a6:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     7a8:	e1 e0       	ldi	r30, 0x01	; 1
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     7b0:	3e c0       	rjmp	.+124    	; 0x82e <writeChar+0xca>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     7b6:	4b e0       	ldi	r20, 0x0B	; 11
     7b8:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
     7ba:	e5 e0       	ldi	r30, 0x05	; 5
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
     7c2:	35 c0       	rjmp	.+106    	; 0x82e <writeChar+0xca>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     7c4:	21 e0       	ldi	r18, 0x01	; 1
     7c6:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
     7c8:	4b e0       	ldi	r20, 0x0B	; 11
     7ca:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     7cc:	e4 e0       	ldi	r30, 0x04	; 4
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     7d4:	2c c0       	rjmp	.+88     	; 0x82e <writeChar+0xca>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
     7da:	4f e0       	ldi	r20, 0x0F	; 15
     7dc:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     7de:	e4 e0       	ldi	r30, 0x04	; 4
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     7e6:	23 c0       	rjmp	.+70     	; 0x82e <writeChar+0xca>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     7f0:	e1 e0       	ldi	r30, 0x01	; 1
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
     7f8:	1a c0       	rjmp	.+52     	; 0x82e <writeChar+0xca>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     7fa:	21 e0       	ldi	r18, 0x01	; 1
     7fc:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
     7fe:	4f e0       	ldi	r20, 0x0F	; 15
     800:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     80a:	11 c0       	rjmp	.+34     	; 0x82e <writeChar+0xca>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     810:	4b e0       	ldi	r20, 0x0B	; 11
     812:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     814:	e5 e0       	ldi	r30, 0x05	; 5
     816:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     81c:	08 c0       	rjmp	.+16     	; 0x82e <writeChar+0xca>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
     81e:	21 e0       	ldi	r18, 0x01	; 1
     820:	30 e0       	ldi	r19, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
     822:	45 e0       	ldi	r20, 0x05	; 5
     824:	50 e0       	ldi	r21, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     826:	e5 e0       	ldi	r30, 0x05	; 5
     828:	f0 e0       	ldi	r31, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
     82e:	62 30       	cpi	r22, 0x02	; 2
     830:	71 05       	cpc	r23, r1
     832:	09 f4       	brne	.+2      	; 0x836 <writeChar+0xd2>
     834:	67 c0       	rjmp	.+206    	; 0x904 <writeChar+0x1a0>
     836:	3c f4       	brge	.+14     	; 0x846 <writeChar+0xe2>
     838:	61 15       	cp	r22, r1
     83a:	71 05       	cpc	r23, r1
     83c:	79 f0       	breq	.+30     	; 0x85c <writeChar+0xf8>
     83e:	61 30       	cpi	r22, 0x01	; 1
     840:	71 05       	cpc	r23, r1
     842:	51 f1       	breq	.+84     	; 0x898 <writeChar+0x134>
     844:	fd c0       	rjmp	.+506    	; 0xa40 <writeChar+0x2dc>
     846:	64 30       	cpi	r22, 0x04	; 4
     848:	71 05       	cpc	r23, r1
     84a:	09 f4       	brne	.+2      	; 0x84e <writeChar+0xea>
     84c:	a5 c0       	rjmp	.+330    	; 0x998 <writeChar+0x234>
     84e:	0c f4       	brge	.+2      	; 0x852 <writeChar+0xee>
     850:	72 c0       	rjmp	.+228    	; 0x936 <writeChar+0x1d2>
     852:	65 30       	cpi	r22, 0x05	; 5
     854:	71 05       	cpc	r23, r1
     856:	09 f4       	brne	.+2      	; 0x85a <writeChar+0xf6>
     858:	bd c0       	rjmp	.+378    	; 0x9d4 <writeChar+0x270>
     85a:	f2 c0       	rjmp	.+484    	; 0xa40 <writeChar+0x2dc>
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
     85c:	ac ee       	ldi	r26, 0xEC	; 236
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	6c 91       	ld	r22, X
     862:	66 7f       	andi	r22, 0xF6	; 246
     864:	6c 93       	st	X, r22
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
     866:	6c 91       	ld	r22, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     868:	60 7f       	andi	r22, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
     86a:	7c 91       	ld	r23, X
     86c:	86 2b       	or	r24, r22
     86e:	87 2b       	or	r24, r23
     870:	8c 93       	st	X, r24
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     872:	a1 ef       	ldi	r26, 0xF1	; 241
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	8c 91       	ld	r24, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     878:	80 7f       	andi	r24, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     87a:	e8 2b       	or	r30, r24
     87c:	ec 93       	st	X, r30
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     87e:	e6 ef       	ldi	r30, 0xF6	; 246
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     884:	80 7f       	andi	r24, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     886:	48 2b       	or	r20, r24
     888:	40 83       	st	Z, r20
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     88a:	eb ef       	ldi	r30, 0xFB	; 251
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     890:	80 7f       	andi	r24, 0xF0	; 240
	case 0:
		LCDDR0 &= 0xF6;
		LCDDR0 |=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     892:	28 2b       	or	r18, r24
     894:	20 83       	st	Z, r18
		break;
     896:	d6 c0       	rjmp	.+428    	; 0xa44 <writeChar+0x2e0>
	case 1:
		LCDDR0 &= 0x6F;
     898:	ac ee       	ldi	r26, 0xEC	; 236
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	6c 91       	ld	r22, X
     89e:	6f 76       	andi	r22, 0x6F	; 111
     8a0:	6c 93       	st	X, r22
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
     8a2:	6c 91       	ld	r22, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     8a4:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
     8a6:	7c 91       	ld	r23, X
     8a8:	82 95       	swap	r24
     8aa:	92 95       	swap	r25
     8ac:	90 7f       	andi	r25, 0xF0	; 240
     8ae:	98 27       	eor	r25, r24
     8b0:	80 7f       	andi	r24, 0xF0	; 240
     8b2:	98 27       	eor	r25, r24
     8b4:	86 2b       	or	r24, r22
     8b6:	87 2b       	or	r24, r23
     8b8:	8c 93       	st	X, r24
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     8ba:	a1 ef       	ldi	r26, 0xF1	; 241
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	8c 91       	ld	r24, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     8c0:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     8c2:	e2 95       	swap	r30
     8c4:	f2 95       	swap	r31
     8c6:	f0 7f       	andi	r31, 0xF0	; 240
     8c8:	fe 27       	eor	r31, r30
     8ca:	e0 7f       	andi	r30, 0xF0	; 240
     8cc:	fe 27       	eor	r31, r30
     8ce:	e8 2b       	or	r30, r24
     8d0:	ec 93       	st	X, r30
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     8d2:	e6 ef       	ldi	r30, 0xF6	; 246
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     8d8:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     8da:	42 95       	swap	r20
     8dc:	52 95       	swap	r21
     8de:	50 7f       	andi	r21, 0xF0	; 240
     8e0:	54 27       	eor	r21, r20
     8e2:	40 7f       	andi	r20, 0xF0	; 240
     8e4:	54 27       	eor	r21, r20
     8e6:	48 2b       	or	r20, r24
     8e8:	40 83       	st	Z, r20
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     8ea:	eb ef       	ldi	r30, 0xFB	; 251
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     8f0:	8f 70       	andi	r24, 0x0F	; 15
	case 1:
		LCDDR0 &= 0x6F;
		LCDDR0|=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     8f2:	22 95       	swap	r18
     8f4:	32 95       	swap	r19
     8f6:	30 7f       	andi	r19, 0xF0	; 240
     8f8:	32 27       	eor	r19, r18
     8fa:	20 7f       	andi	r18, 0xF0	; 240
     8fc:	32 27       	eor	r19, r18
     8fe:	28 2b       	or	r18, r24
     900:	20 83       	st	Z, r18
		break;
     902:	a0 c0       	rjmp	.+320    	; 0xa44 <writeChar+0x2e0>
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     904:	ad ee       	ldi	r26, 0xED	; 237
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	6c 91       	ld	r22, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     90a:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     90c:	86 2b       	or	r24, r22
     90e:	8c 93       	st	X, r24
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     910:	a2 ef       	ldi	r26, 0xF2	; 242
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	8c 91       	ld	r24, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     916:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     918:	e8 2b       	or	r30, r24
     91a:	ec 93       	st	X, r30
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     91c:	e7 ef       	ldi	r30, 0xF7	; 247
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     922:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     924:	48 2b       	or	r20, r24
     926:	40 83       	st	Z, r20
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     928:	ec ef       	ldi	r30, 0xFC	; 252
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     92e:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     930:	28 2b       	or	r18, r24
     932:	20 83       	st	Z, r18
		break;
     934:	87 c0       	rjmp	.+270    	; 0xa44 <writeChar+0x2e0>
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     936:	ad ee       	ldi	r26, 0xED	; 237
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	6c 91       	ld	r22, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     93c:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     93e:	82 95       	swap	r24
     940:	92 95       	swap	r25
     942:	90 7f       	andi	r25, 0xF0	; 240
     944:	98 27       	eor	r25, r24
     946:	80 7f       	andi	r24, 0xF0	; 240
     948:	98 27       	eor	r25, r24
     94a:	86 2b       	or	r24, r22
     94c:	8c 93       	st	X, r24
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     94e:	a2 ef       	ldi	r26, 0xF2	; 242
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	8c 91       	ld	r24, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     954:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     956:	e2 95       	swap	r30
     958:	f2 95       	swap	r31
     95a:	f0 7f       	andi	r31, 0xF0	; 240
     95c:	fe 27       	eor	r31, r30
     95e:	e0 7f       	andi	r30, 0xF0	; 240
     960:	fe 27       	eor	r31, r30
     962:	e8 2b       	or	r30, r24
     964:	ec 93       	st	X, r30
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     966:	e7 ef       	ldi	r30, 0xF7	; 247
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     96c:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     96e:	42 95       	swap	r20
     970:	52 95       	swap	r21
     972:	50 7f       	andi	r21, 0xF0	; 240
     974:	54 27       	eor	r21, r20
     976:	40 7f       	andi	r20, 0xF0	; 240
     978:	54 27       	eor	r21, r20
     97a:	48 2b       	or	r20, r24
     97c:	40 83       	st	Z, r20
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     97e:	ec ef       	ldi	r30, 0xFC	; 252
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     984:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     986:	22 95       	swap	r18
     988:	32 95       	swap	r19
     98a:	30 7f       	andi	r19, 0xF0	; 240
     98c:	32 27       	eor	r19, r18
     98e:	20 7f       	andi	r18, 0xF0	; 240
     990:	32 27       	eor	r19, r18
     992:	28 2b       	or	r18, r24
     994:	20 83       	st	Z, r18
		break;
     996:	56 c0       	rjmp	.+172    	; 0xa44 <writeChar+0x2e0>
	case 4:
		LCDDR2 &= 0xF6;
     998:	ae ee       	ldi	r26, 0xEE	; 238
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	6c 91       	ld	r22, X
     99e:	66 7f       	andi	r22, 0xF6	; 246
     9a0:	6c 93       	st	X, r22
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     9a2:	6c 91       	ld	r22, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     9a4:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     9a6:	7c 91       	ld	r23, X
     9a8:	86 2b       	or	r24, r22
     9aa:	87 2b       	or	r24, r23
     9ac:	8c 93       	st	X, r24
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     9ae:	a3 ef       	ldi	r26, 0xF3	; 243
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	8c 91       	ld	r24, X
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     9b4:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     9b6:	e8 2b       	or	r30, r24
     9b8:	ec 93       	st	X, r30
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     9ba:	e8 ef       	ldi	r30, 0xF8	; 248
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     9c0:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     9c2:	48 2b       	or	r20, r24
     9c4:	40 83       	st	Z, r20
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     9c6:	ed ef       	ldi	r30, 0xFD	; 253
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
	return;
}

int writeReg(int num, int reg, bool shift) {
	if(!shift){
		reg &= 0xF0;
     9cc:	80 7f       	andi	r24, 0xF0	; 240
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     9ce:	28 2b       	or	r18, r24
     9d0:	20 83       	st	Z, r18
		break;
     9d2:	38 c0       	rjmp	.+112    	; 0xa44 <writeChar+0x2e0>
	case 5:
		LCDDR2 &= 0x6F;
     9d4:	ae ee       	ldi	r26, 0xEE	; 238
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	6c 91       	ld	r22, X
     9da:	6f 76       	andi	r22, 0x6F	; 111
     9dc:	6c 93       	st	X, r22
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
     9de:	6c 91       	ld	r22, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     9e0:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
     9e2:	7c 91       	ld	r23, X
     9e4:	82 95       	swap	r24
     9e6:	92 95       	swap	r25
     9e8:	90 7f       	andi	r25, 0xF0	; 240
     9ea:	98 27       	eor	r25, r24
     9ec:	80 7f       	andi	r24, 0xF0	; 240
     9ee:	98 27       	eor	r25, r24
     9f0:	86 2b       	or	r24, r22
     9f2:	87 2b       	or	r24, r23
     9f4:	8c 93       	st	X, r24
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     9f6:	a3 ef       	ldi	r26, 0xF3	; 243
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	8c 91       	ld	r24, X
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     9fc:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     9fe:	e2 95       	swap	r30
     a00:	f2 95       	swap	r31
     a02:	f0 7f       	andi	r31, 0xF0	; 240
     a04:	fe 27       	eor	r31, r30
     a06:	e0 7f       	andi	r30, 0xF0	; 240
     a08:	fe 27       	eor	r31, r30
     a0a:	e8 2b       	or	r30, r24
     a0c:	ec 93       	st	X, r30
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     a0e:	e8 ef       	ldi	r30, 0xF8	; 248
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     a14:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     a16:	42 95       	swap	r20
     a18:	52 95       	swap	r21
     a1a:	50 7f       	andi	r21, 0xF0	; 240
     a1c:	54 27       	eor	r21, r20
     a1e:	40 7f       	andi	r20, 0xF0	; 240
     a20:	54 27       	eor	r21, r20
     a22:	48 2b       	or	r20, r24
     a24:	40 83       	st	Z, r20
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     a26:	ed ef       	ldi	r30, 0xFD	; 253
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     a2c:	8f 70       	andi	r24, 0x0F	; 15
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     a2e:	22 95       	swap	r18
     a30:	32 95       	swap	r19
     a32:	30 7f       	andi	r19, 0xF0	; 240
     a34:	32 27       	eor	r19, r18
     a36:	20 7f       	andi	r18, 0xF0	; 240
     a38:	32 27       	eor	r19, r18
     a3a:	28 2b       	or	r18, r24
     a3c:	20 83       	st	Z, r18
		break;
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <writeChar+0x2e0>
	default:
		ENABLE;
     a40:	f8 94       	cli
		return;
     a42:	08 95       	ret
	}
	ENABLE;
     a44:	f8 94       	cli
     a46:	08 95       	ret

00000a48 <printAt>:

void printOnBridge(int num) {
	printAt(num, 4);
}

void printAt(int num, int pos) {
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	7c 01       	movw	r14, r24
     a56:	eb 01       	movw	r28, r22
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     a58:	64 e6       	ldi	r22, 0x64	; 100
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divmodhi4>
     a60:	0a e0       	ldi	r16, 0x0A	; 10
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	b8 01       	movw	r22, r16
     a66:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divmodhi4>
     a6a:	86 2f       	mov	r24, r22
     a6c:	be 01       	movw	r22, r28
     a6e:	80 5d       	subi	r24, 0xD0	; 208
     a70:	0e 94 b2 03 	call	0x764	; 0x764 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     a74:	21 96       	adiw	r28, 0x01	; 1
     a76:	c7 01       	movw	r24, r14
     a78:	b8 01       	movw	r22, r16
     a7a:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divmodhi4>
     a7e:	be 01       	movw	r22, r28
     a80:	80 5d       	subi	r24, 0xD0	; 208
     a82:	0e 94 b2 03 	call	0x764	; 0x764 <writeChar>
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	08 95       	ret

00000a94 <printQN>:
void updateTrafficSignal(TrafficLight *traff) {
	UDR0 = (traff->n << 4)|(!(traff->n) << 5)|(traff->s << 6)|(!(traff->s) << 7);
}

void printQN(int num) {
	printAt(num, 0);
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	0e 94 24 05 	call	0xa48	; 0xa48 <printAt>
     a9c:	08 95       	ret

00000a9e <printQS>:
}

void printQS(int num) {
	printAt(num, 2);
     a9e:	62 e0       	ldi	r22, 0x02	; 2
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	0e 94 24 05 	call	0xa48	; 0xa48 <printAt>
     aa6:	08 95       	ret

00000aa8 <printOnBridge>:
}

void printOnBridge(int num) {
	printAt(num, 4);
     aa8:	64 e0       	ldi	r22, 0x04	; 4
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	0e 94 24 05 	call	0xa48	; 0xa48 <printAt>
     ab0:	08 95       	ret

00000ab2 <update>:
	DDRB = (0<<DDB7)|(0<<DDB6);
	MCUCR = (0 << PUD);
	
}

void update(int n1, int n2, int n3) {
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	8b 01       	movw	r16, r22
     abc:	ea 01       	movw	r28, r20
	printQN(n1);
     abe:	0e 94 4a 05 	call	0xa94	; 0xa94 <printQN>
	printQS(n2);
     ac2:	c8 01       	movw	r24, r16
     ac4:	0e 94 4f 05 	call	0xa9e	; 0xa9e <printQS>
	printOnBridge(n3);
     ac8:	ce 01       	movw	r24, r28
     aca:	0e 94 54 05 	call	0xaa8	; 0xaa8 <printOnBridge>
}
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <main>:
#include <avr/io.h>
#include "TinyTimber.h"
#include "Inter.h"

int main(void)
{
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	a9 97       	sbiw	r28, 0x29	; 41
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
	initLCD();
     aec:	0e 94 6f 03 	call	0x6de	; 0x6de <initLCD>
	OnBridge bridge = initOnBridge();
     af0:	fe 01       	movw	r30, r28
     af2:	31 96       	adiw	r30, 0x01	; 1
     af4:	8a e0       	ldi	r24, 0x0A	; 10
     af6:	df 01       	movw	r26, r30
     af8:	1d 92       	st	X+, r1
     afa:	8a 95       	dec	r24
     afc:	e9 f7       	brne	.-6      	; 0xaf8 <main+0x20>
	TrafficLight tL = initTrafficLight(&bridge);
     afe:	1c 86       	std	Y+12, r1	; 0x0c
     b00:	1b 86       	std	Y+11, r1	; 0x0b
     b02:	1e 86       	std	Y+14, r1	; 0x0e
     b04:	1d 86       	std	Y+13, r1	; 0x0d
     b06:	1f 86       	std	Y+15, r1	; 0x0f
     b08:	18 8a       	std	Y+16, r1	; 0x10
     b0a:	fa 8b       	std	Y+18, r31	; 0x12
     b0c:	e9 8b       	std	Y+17, r30	; 0x11
	BeforeBridge norr = initBeforeBridge(&tL);
     b0e:	1c 8a       	std	Y+20, r1	; 0x14
     b10:	1b 8a       	std	Y+19, r1	; 0x13
     b12:	1e 8a       	std	Y+22, r1	; 0x16
     b14:	1d 8a       	std	Y+21, r1	; 0x15
     b16:	25 e0       	ldi	r18, 0x05	; 5
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	38 8f       	std	Y+24, r19	; 0x18
     b1c:	2f 8b       	std	Y+23, r18	; 0x17
     b1e:	ce 01       	movw	r24, r28
     b20:	0b 96       	adiw	r24, 0x0b	; 11
     b22:	9a 8f       	std	Y+26, r25	; 0x1a
     b24:	89 8f       	std	Y+25, r24	; 0x19
	BeforeBridge syd = initBeforeBridge(&tL);
     b26:	1c 8e       	std	Y+28, r1	; 0x1c
     b28:	1b 8e       	std	Y+27, r1	; 0x1b
     b2a:	1e 8e       	std	Y+30, r1	; 0x1e
     b2c:	1d 8e       	std	Y+29, r1	; 0x1d
     b2e:	38 a3       	std	Y+32, r19	; 0x20
     b30:	2f 8f       	std	Y+31, r18	; 0x1f
     b32:	9a a3       	std	Y+34, r25	; 0x22
     b34:	89 a3       	std	Y+33, r24	; 0x21
    Inter i = initInter(&norr, &syd);
     b36:	08 96       	adiw	r24, 0x08	; 8
     b38:	9c a3       	std	Y+36, r25	; 0x24
     b3a:	8b a3       	std	Y+35, r24	; 0x23
     b3c:	08 96       	adiw	r24, 0x08	; 8
     b3e:	9e a3       	std	Y+38, r25	; 0x26
     b40:	8d a3       	std	Y+37, r24	; 0x25
     b42:	18 a6       	std	Y+40, r1	; 0x28
     b44:	1f a2       	std	Y+39, r1	; 0x27
     b46:	19 a6       	std	Y+41, r1	; 0x29
	INSTALL(&i, interSignal, IRQ_USART0_RX);
     b48:	48 e0       	ldi	r20, 0x08	; 8
     b4a:	66 e3       	ldi	r22, 0x36	; 54
     b4c:	73 e0       	ldi	r23, 0x03	; 3
     b4e:	08 96       	adiw	r24, 0x08	; 8
     b50:	0e 94 ef 11 	call	0x23de	; 0x23de <install>
	INSTALL(&i, interSignal, IRQ_USART0_TX);
     b54:	4a e0       	ldi	r20, 0x0A	; 10
     b56:	66 e3       	ldi	r22, 0x36	; 54
     b58:	73 e0       	ldi	r23, 0x03	; 3
     b5a:	ce 01       	movw	r24, r28
     b5c:	83 96       	adiw	r24, 0x23	; 35
     b5e:	0e 94 ef 11 	call	0x23de	; 0x23de <install>
	INSTALL(&i, interSignal, IRQ_USART0_UDRE);
     b62:	49 e0       	ldi	r20, 0x09	; 9
     b64:	66 e3       	ldi	r22, 0x36	; 54
     b66:	73 e0       	ldi	r23, 0x03	; 3
     b68:	ce 01       	movw	r24, r28
     b6a:	83 96       	adiw	r24, 0x23	; 35
     b6c:	0e 94 ef 11 	call	0x23de	; 0x23de <install>
	return TINYTIMBER(&i, onStart, NULL);
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	72 e0       	ldi	r23, 0x02	; 2
     b78:	ce 01       	movw	r24, r28
     b7a:	83 96       	adiw	r24, 0x23	; 35
     b7c:	0e 94 09 12 	call	0x2412	; 0x2412 <tinytimber>
}
     b80:	a9 96       	adiw	r28, 0x29	; 41
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <subCar>:

void addCar(OnBridge *self) {
	self->carsOnBridge++;
}

void subCar(OnBridge *self) {
     b92:	fc 01       	movw	r30, r24
	self->carsOnBridge--;
     b94:	84 81       	ldd	r24, Z+4	; 0x04
     b96:	95 81       	ldd	r25, Z+5	; 0x05
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	95 83       	std	Z+5, r25	; 0x05
     b9c:	84 83       	std	Z+4, r24	; 0x04
	if (self->nToS > 0) {
     b9e:	86 81       	ldd	r24, Z+6	; 0x06
     ba0:	97 81       	ldd	r25, Z+7	; 0x07
     ba2:	18 16       	cp	r1, r24
     ba4:	19 06       	cpc	r1, r25
     ba6:	24 f4       	brge	.+8      	; 0xbb0 <subCar+0x1e>
		self->nToS--;
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	97 83       	std	Z+7, r25	; 0x07
     bac:	86 83       	std	Z+6, r24	; 0x06
     bae:	08 95       	ret
	} else if (self->sToN > 0) {
     bb0:	80 85       	ldd	r24, Z+8	; 0x08
     bb2:	91 85       	ldd	r25, Z+9	; 0x09
     bb4:	18 16       	cp	r1, r24
     bb6:	19 06       	cpc	r1, r25
     bb8:	1c f4       	brge	.+6      	; 0xbc0 <subCar+0x2e>
		self->sToN--;
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	91 87       	std	Z+9, r25	; 0x09
     bbe:	80 87       	std	Z+8, r24	; 0x08
     bc0:	08 95       	ret

00000bc2 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <initialize+0x6>
     bc8:	00 d0       	rcall	.+0      	; 0xbca <initialize+0x8>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	8b ef       	ldi	r24, 0xFB	; 251
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	2b ed       	ldi	r18, 0xDB	; 219
     bd4:	32 e0       	ldi	r19, 0x02	; 2
     bd6:	fc 01       	movw	r30, r24
     bd8:	70 97       	sbiw	r30, 0x10	; 16
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	80 83       	st	Z, r24
     bde:	40 96       	adiw	r24, 0x10	; 16
     be0:	82 17       	cp	r24, r18
     be2:	93 07       	cpc	r25, r19
     be4:	c1 f7       	brne	.-16     	; 0xbd6 <initialize+0x14>
     be6:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <messages+0xe1>
     bea:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <messages+0xe0>
     bee:	e6 e3       	ldi	r30, 0x36	; 54
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	83 e5       	ldi	r24, 0x53	; 83
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	91 83       	std	Z+1, r25	; 0x01
     bf8:	80 83       	st	Z, r24
     bfa:	80 e7       	ldi	r24, 0x70	; 112
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	96 8f       	std	Z+30, r25	; 0x1e
     c00:	85 8f       	std	Z+29, r24	; 0x1d
     c02:	ad e8       	ldi	r26, 0x8D	; 141
     c04:	b1 e0       	ldi	r27, 0x01	; 1
     c06:	b3 af       	std	Z+59, r27	; 0x3b
     c08:	a2 af       	std	Z+58, r26	; 0x3a
     c0a:	1d 92       	st	X+, r1
     c0c:	1c 92       	st	X, r1
     c0e:	fa 83       	std	Y+2, r31	; 0x02
     c10:	e9 83       	std	Y+1, r30	; 0x01
     c12:	e7 e3       	ldi	r30, 0x37	; 55
     c14:	f3 e0       	ldi	r31, 0x03	; 3
     c16:	fc 83       	std	Y+4, r31	; 0x04
     c18:	eb 83       	std	Y+3, r30	; 0x03
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	06 96       	adiw	r24, 0x06	; 6
     c20:	0e 94 59 12 	call	0x24b2	; 0x24b2 <setjmp>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	e9 81       	ldd	r30, Y+1	; 0x01
     c2a:	fa 81       	ldd	r31, Y+2	; 0x02
     c2c:	97 8b       	std	Z+23, r25	; 0x17
     c2e:	86 8b       	std	Z+22, r24	; 0x16
     c30:	91 8f       	std	Z+25, r25	; 0x19
     c32:	80 8f       	std	Z+24, r24	; 0x18
     c34:	81 e8       	ldi	r24, 0x81	; 129
     c36:	91 e1       	ldi	r25, 0x11	; 17
     c38:	94 8f       	std	Z+28, r25	; 0x1c
     c3a:	83 8f       	std	Z+27, r24	; 0x1b
     c3c:	15 82       	std	Z+5, r1	; 0x05
     c3e:	14 82       	std	Z+4, r1	; 0x04
     c40:	7d 96       	adiw	r30, 0x1d	; 29
     c42:	fa 83       	std	Y+2, r31	; 0x02
     c44:	e9 83       	std	Y+1, r30	; 0x01
     c46:	eb 81       	ldd	r30, Y+3	; 0x03
     c48:	fc 81       	ldd	r31, Y+4	; 0x04
     c4a:	e0 5a       	subi	r30, 0xA0	; 160
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	fc 83       	std	Y+4, r31	; 0x04
     c50:	eb 83       	std	Y+3, r30	; 0x03
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	8a 5a       	subi	r24, 0xAA	; 170
     c58:	91 40       	sbci	r25, 0x01	; 1
     c5a:	f9 f6       	brne	.-66     	; 0xc1a <initialize+0x58>
     c5c:	ee ec       	ldi	r30, 0xCE	; 206
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	11 82       	std	Z+1, r1	; 0x01
     c62:	10 82       	st	Z, r1
     c64:	15 82       	std	Z+5, r1	; 0x05
     c66:	14 82       	std	Z+4, r1	; 0x04
     c68:	13 82       	std	Z+3, r1	; 0x03
     c6a:	12 82       	std	Z+2, r1	; 0x02
     c6c:	e1 e6       	ldi	r30, 0x61	; 97
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 e8       	ldi	r24, 0x80	; 128
     c72:	80 83       	st	Z, r24
     c74:	10 82       	st	Z, r1
     c76:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c7a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c7e:	84 e0       	ldi	r24, 0x04	; 4
     c80:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <dispatch>:
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <dispatch+0x6>
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	9a 83       	std	Y+2, r25	; 0x02
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     caa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     cae:	06 96       	adiw	r24, 0x06	; 6
     cb0:	0e 94 59 12 	call	0x24b2	; 0x24b2 <setjmp>
     cb4:	89 2b       	or	r24, r25
     cb6:	59 f4       	brne	.+22     	; 0xcce <dispatch+0x36>
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     cc0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	06 96       	adiw	r24, 0x06	; 6
     cca:	0e 94 79 12 	call	0x24f2	; 0x24f2 <longjmp>
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <schedule>:
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <msgQ>
     ce4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <msgQ+0x1>
     ce8:	30 97       	sbiw	r30, 0x00	; 0
     cea:	61 f1       	breq	.+88     	; 0xd44 <schedule+0x6c>
     cec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     cf0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	31 f1       	breq	.+76     	; 0xd44 <schedule+0x6c>
     cf8:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     cfc:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     d00:	aa 81       	ldd	r26, Y+2	; 0x02
     d02:	bb 81       	ldd	r27, Y+3	; 0x03
     d04:	10 97       	sbiw	r26, 0x00	; 0
     d06:	79 f0       	breq	.+30     	; 0xd26 <schedule+0x4e>
     d08:	46 81       	ldd	r20, Z+6	; 0x06
     d0a:	57 81       	ldd	r21, Z+7	; 0x07
     d0c:	60 85       	ldd	r22, Z+8	; 0x08
     d0e:	71 85       	ldd	r23, Z+9	; 0x09
     d10:	16 96       	adiw	r26, 0x06	; 6
     d12:	0d 91       	ld	r16, X+
     d14:	1d 91       	ld	r17, X+
     d16:	2d 91       	ld	r18, X+
     d18:	3c 91       	ld	r19, X
     d1a:	19 97       	sbiw	r26, 0x09	; 9
     d1c:	40 1b       	sub	r20, r16
     d1e:	51 0b       	sbc	r21, r17
     d20:	62 0b       	sbc	r22, r18
     d22:	73 0b       	sbc	r23, r19
     d24:	7a f4       	brpl	.+30     	; 0xd44 <schedule+0x6c>
     d26:	fc 01       	movw	r30, r24
     d28:	20 81       	ld	r18, Z
     d2a:	31 81       	ldd	r19, Z+1	; 0x01
     d2c:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     d30:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     d34:	d1 83       	std	Z+1, r29	; 0x01
     d36:	c0 83       	st	Z, r28
     d38:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     d3c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     d40:	0e 94 4c 06 	call	0xc98	; 0xc98 <dispatch>
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	08 95       	ret

00000d4e <__vector_1>:
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
     d70:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     d74:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     d78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d80:	c9 01       	movw	r24, r18
     d82:	03 2e       	mov	r0, r19
     d84:	00 0c       	add	r0, r0
     d86:	aa 0b       	sbc	r26, r26
     d88:	bb 0b       	sbc	r27, r27
     d8a:	dc 01       	movw	r26, r24
     d8c:	99 27       	eor	r25, r25
     d8e:	88 27       	eor	r24, r24
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	84 2b       	or	r24, r20
     d96:	95 2b       	or	r25, r21
     d98:	a6 2b       	or	r26, r22
     d9a:	b7 2b       	or	r27, r23
     d9c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     da0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     da4:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     da8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     dac:	b0 9b       	sbis	0x16, 0	; 22
     dae:	1b c0       	rjmp	.+54     	; 0xde6 <__vector_1+0x98>
     db0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     db4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     db8:	c9 01       	movw	r24, r18
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	09 2e       	mov	r0, r25
     dbe:	00 0c       	add	r0, r0
     dc0:	aa 0b       	sbc	r26, r26
     dc2:	bb 0b       	sbc	r27, r27
     dc4:	dc 01       	movw	r26, r24
     dc6:	99 27       	eor	r25, r25
     dc8:	88 27       	eor	r24, r24
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	84 2b       	or	r24, r20
     dd0:	95 2b       	or	r25, r21
     dd2:	a6 2b       	or	r26, r22
     dd4:	b7 2b       	or	r27, r23
     dd6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     dda:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     dde:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     de2:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     de6:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <mtable>
     dea:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <mtable+0x1>
     dee:	30 97       	sbiw	r30, 0x00	; 0
     df0:	39 f0       	breq	.+14     	; 0xe00 <__vector_1+0xb2>
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <otable>
     dfa:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <otable+0x1>
     dfe:	09 95       	icall
     e00:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti

00000e26 <__vector_2>:
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
     e48:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     e4c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     e50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e58:	c9 01       	movw	r24, r18
     e5a:	03 2e       	mov	r0, r19
     e5c:	00 0c       	add	r0, r0
     e5e:	aa 0b       	sbc	r26, r26
     e60:	bb 0b       	sbc	r27, r27
     e62:	dc 01       	movw	r26, r24
     e64:	99 27       	eor	r25, r25
     e66:	88 27       	eor	r24, r24
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	84 2b       	or	r24, r20
     e6e:	95 2b       	or	r25, r21
     e70:	a6 2b       	or	r26, r22
     e72:	b7 2b       	or	r27, r23
     e74:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     e78:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     e7c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     e80:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     e84:	b0 9b       	sbis	0x16, 0	; 22
     e86:	1b c0       	rjmp	.+54     	; 0xebe <__vector_2+0x98>
     e88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e90:	c9 01       	movw	r24, r18
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	09 2e       	mov	r0, r25
     e96:	00 0c       	add	r0, r0
     e98:	aa 0b       	sbc	r26, r26
     e9a:	bb 0b       	sbc	r27, r27
     e9c:	dc 01       	movw	r26, r24
     e9e:	99 27       	eor	r25, r25
     ea0:	88 27       	eor	r24, r24
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	84 2b       	or	r24, r20
     ea8:	95 2b       	or	r25, r21
     eaa:	a6 2b       	or	r26, r22
     eac:	b7 2b       	or	r27, r23
     eae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     eb2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     eb6:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     eba:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     ebe:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <mtable+0x2>
     ec2:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <mtable+0x3>
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	39 f0       	breq	.+14     	; 0xed8 <__vector_2+0xb2>
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <otable+0x2>
     ed2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <otable+0x3>
     ed6:	09 95       	icall
     ed8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_3>:
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     f24:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     f28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f30:	c9 01       	movw	r24, r18
     f32:	03 2e       	mov	r0, r19
     f34:	00 0c       	add	r0, r0
     f36:	aa 0b       	sbc	r26, r26
     f38:	bb 0b       	sbc	r27, r27
     f3a:	dc 01       	movw	r26, r24
     f3c:	99 27       	eor	r25, r25
     f3e:	88 27       	eor	r24, r24
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	84 2b       	or	r24, r20
     f46:	95 2b       	or	r25, r21
     f48:	a6 2b       	or	r26, r22
     f4a:	b7 2b       	or	r27, r23
     f4c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     f50:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     f54:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     f58:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     f5c:	b0 9b       	sbis	0x16, 0	; 22
     f5e:	1b c0       	rjmp	.+54     	; 0xf96 <__vector_3+0x98>
     f60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f68:	c9 01       	movw	r24, r18
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	09 2e       	mov	r0, r25
     f6e:	00 0c       	add	r0, r0
     f70:	aa 0b       	sbc	r26, r26
     f72:	bb 0b       	sbc	r27, r27
     f74:	dc 01       	movw	r26, r24
     f76:	99 27       	eor	r25, r25
     f78:	88 27       	eor	r24, r24
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	84 2b       	or	r24, r20
     f80:	95 2b       	or	r25, r21
     f82:	a6 2b       	or	r26, r22
     f84:	b7 2b       	or	r27, r23
     f86:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
     f8a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
     f8e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
     f92:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
     f96:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <mtable+0x4>
     f9a:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <mtable+0x5>
     f9e:	30 97       	sbiw	r30, 0x00	; 0
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <__vector_3+0xb2>
     fa2:	62 e0       	ldi	r22, 0x02	; 2
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <otable+0x4>
     faa:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <otable+0x5>
     fae:	09 95       	icall
     fb0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_4>:
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     ffc:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1000:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1004:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1008:	c9 01       	movw	r24, r18
    100a:	03 2e       	mov	r0, r19
    100c:	00 0c       	add	r0, r0
    100e:	aa 0b       	sbc	r26, r26
    1010:	bb 0b       	sbc	r27, r27
    1012:	dc 01       	movw	r26, r24
    1014:	99 27       	eor	r25, r25
    1016:	88 27       	eor	r24, r24
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	84 2b       	or	r24, r20
    101e:	95 2b       	or	r25, r21
    1020:	a6 2b       	or	r26, r22
    1022:	b7 2b       	or	r27, r23
    1024:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1028:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    102c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1030:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1034:	b0 9b       	sbis	0x16, 0	; 22
    1036:	1b c0       	rjmp	.+54     	; 0x106e <__vector_4+0x98>
    1038:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    103c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1040:	c9 01       	movw	r24, r18
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	09 2e       	mov	r0, r25
    1046:	00 0c       	add	r0, r0
    1048:	aa 0b       	sbc	r26, r26
    104a:	bb 0b       	sbc	r27, r27
    104c:	dc 01       	movw	r26, r24
    104e:	99 27       	eor	r25, r25
    1050:	88 27       	eor	r24, r24
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	84 2b       	or	r24, r20
    1058:	95 2b       	or	r25, r21
    105a:	a6 2b       	or	r26, r22
    105c:	b7 2b       	or	r27, r23
    105e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1062:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1066:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    106a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    106e:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mtable+0x6>
    1072:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mtable+0x7>
    1076:	30 97       	sbiw	r30, 0x00	; 0
    1078:	39 f0       	breq	.+14     	; 0x1088 <__vector_4+0xb2>
    107a:	63 e0       	ldi	r22, 0x03	; 3
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <otable+0x6>
    1082:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <otable+0x7>
    1086:	09 95       	icall
    1088:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_5>:
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
    10d0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    10d4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    10d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10e0:	c9 01       	movw	r24, r18
    10e2:	03 2e       	mov	r0, r19
    10e4:	00 0c       	add	r0, r0
    10e6:	aa 0b       	sbc	r26, r26
    10e8:	bb 0b       	sbc	r27, r27
    10ea:	dc 01       	movw	r26, r24
    10ec:	99 27       	eor	r25, r25
    10ee:	88 27       	eor	r24, r24
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	84 2b       	or	r24, r20
    10f6:	95 2b       	or	r25, r21
    10f8:	a6 2b       	or	r26, r22
    10fa:	b7 2b       	or	r27, r23
    10fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1100:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1104:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1108:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    110c:	b0 9b       	sbis	0x16, 0	; 22
    110e:	1b c0       	rjmp	.+54     	; 0x1146 <__vector_5+0x98>
    1110:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1114:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1118:	c9 01       	movw	r24, r18
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	09 2e       	mov	r0, r25
    111e:	00 0c       	add	r0, r0
    1120:	aa 0b       	sbc	r26, r26
    1122:	bb 0b       	sbc	r27, r27
    1124:	dc 01       	movw	r26, r24
    1126:	99 27       	eor	r25, r25
    1128:	88 27       	eor	r24, r24
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	84 2b       	or	r24, r20
    1130:	95 2b       	or	r25, r21
    1132:	a6 2b       	or	r26, r22
    1134:	b7 2b       	or	r27, r23
    1136:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    113a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    113e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1142:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1146:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <mtable+0x8>
    114a:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <mtable+0x9>
    114e:	30 97       	sbiw	r30, 0x00	; 0
    1150:	39 f0       	breq	.+14     	; 0x1160 <__vector_5+0xb2>
    1152:	64 e0       	ldi	r22, 0x04	; 4
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <otable+0x8>
    115a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <otable+0x9>
    115e:	09 95       	icall
    1160:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_10>:
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
    11a8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    11ac:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    11b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11b8:	c9 01       	movw	r24, r18
    11ba:	03 2e       	mov	r0, r19
    11bc:	00 0c       	add	r0, r0
    11be:	aa 0b       	sbc	r26, r26
    11c0:	bb 0b       	sbc	r27, r27
    11c2:	dc 01       	movw	r26, r24
    11c4:	99 27       	eor	r25, r25
    11c6:	88 27       	eor	r24, r24
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	84 2b       	or	r24, r20
    11ce:	95 2b       	or	r25, r21
    11d0:	a6 2b       	or	r26, r22
    11d2:	b7 2b       	or	r27, r23
    11d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    11d8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    11dc:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    11e0:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    11e4:	b0 9b       	sbis	0x16, 0	; 22
    11e6:	1b c0       	rjmp	.+54     	; 0x121e <__vector_10+0x98>
    11e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11f0:	c9 01       	movw	r24, r18
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	09 2e       	mov	r0, r25
    11f6:	00 0c       	add	r0, r0
    11f8:	aa 0b       	sbc	r26, r26
    11fa:	bb 0b       	sbc	r27, r27
    11fc:	dc 01       	movw	r26, r24
    11fe:	99 27       	eor	r25, r25
    1200:	88 27       	eor	r24, r24
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	84 2b       	or	r24, r20
    1208:	95 2b       	or	r25, r21
    120a:	a6 2b       	or	r26, r22
    120c:	b7 2b       	or	r27, r23
    120e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1212:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1216:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    121a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    121e:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable+0xa>
    1222:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0xb>
    1226:	30 97       	sbiw	r30, 0x00	; 0
    1228:	39 f0       	breq	.+14     	; 0x1238 <__vector_10+0xb2>
    122a:	65 e0       	ldi	r22, 0x05	; 5
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable+0xa>
    1232:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0xb>
    1236:	09 95       	icall
    1238:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_11>:
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
    1280:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1284:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1288:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    128c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1290:	c9 01       	movw	r24, r18
    1292:	03 2e       	mov	r0, r19
    1294:	00 0c       	add	r0, r0
    1296:	aa 0b       	sbc	r26, r26
    1298:	bb 0b       	sbc	r27, r27
    129a:	dc 01       	movw	r26, r24
    129c:	99 27       	eor	r25, r25
    129e:	88 27       	eor	r24, r24
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	84 2b       	or	r24, r20
    12a6:	95 2b       	or	r25, r21
    12a8:	a6 2b       	or	r26, r22
    12aa:	b7 2b       	or	r27, r23
    12ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    12b0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    12b4:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    12b8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    12bc:	b0 9b       	sbis	0x16, 0	; 22
    12be:	1b c0       	rjmp	.+54     	; 0x12f6 <__vector_11+0x98>
    12c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12c8:	c9 01       	movw	r24, r18
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	09 2e       	mov	r0, r25
    12ce:	00 0c       	add	r0, r0
    12d0:	aa 0b       	sbc	r26, r26
    12d2:	bb 0b       	sbc	r27, r27
    12d4:	dc 01       	movw	r26, r24
    12d6:	99 27       	eor	r25, r25
    12d8:	88 27       	eor	r24, r24
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	84 2b       	or	r24, r20
    12e0:	95 2b       	or	r25, r21
    12e2:	a6 2b       	or	r26, r22
    12e4:	b7 2b       	or	r27, r23
    12e6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    12ea:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    12ee:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    12f2:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    12f6:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0xc>
    12fa:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0xd>
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	39 f0       	breq	.+14     	; 0x1310 <__vector_11+0xb2>
    1302:	66 e0       	ldi	r22, 0x06	; 6
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0xc>
    130a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0xd>
    130e:	09 95       	icall
    1310:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_12>:
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
    1358:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    135c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1360:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1364:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1368:	c9 01       	movw	r24, r18
    136a:	03 2e       	mov	r0, r19
    136c:	00 0c       	add	r0, r0
    136e:	aa 0b       	sbc	r26, r26
    1370:	bb 0b       	sbc	r27, r27
    1372:	dc 01       	movw	r26, r24
    1374:	99 27       	eor	r25, r25
    1376:	88 27       	eor	r24, r24
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	84 2b       	or	r24, r20
    137e:	95 2b       	or	r25, r21
    1380:	a6 2b       	or	r26, r22
    1382:	b7 2b       	or	r27, r23
    1384:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1388:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    138c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1390:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1394:	b0 9b       	sbis	0x16, 0	; 22
    1396:	1b c0       	rjmp	.+54     	; 0x13ce <__vector_12+0x98>
    1398:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    139c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13a0:	c9 01       	movw	r24, r18
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	09 2e       	mov	r0, r25
    13a6:	00 0c       	add	r0, r0
    13a8:	aa 0b       	sbc	r26, r26
    13aa:	bb 0b       	sbc	r27, r27
    13ac:	dc 01       	movw	r26, r24
    13ae:	99 27       	eor	r25, r25
    13b0:	88 27       	eor	r24, r24
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	84 2b       	or	r24, r20
    13b8:	95 2b       	or	r25, r21
    13ba:	a6 2b       	or	r26, r22
    13bc:	b7 2b       	or	r27, r23
    13be:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    13c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    13c6:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    13ca:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    13ce:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0xe>
    13d2:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0xf>
    13d6:	30 97       	sbiw	r30, 0x00	; 0
    13d8:	39 f0       	breq	.+14     	; 0x13e8 <__vector_12+0xb2>
    13da:	67 e0       	ldi	r22, 0x07	; 7
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0xe>
    13e2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0xf>
    13e6:	09 95       	icall
    13e8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_13>:
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1434:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1438:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    143c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1440:	c9 01       	movw	r24, r18
    1442:	03 2e       	mov	r0, r19
    1444:	00 0c       	add	r0, r0
    1446:	aa 0b       	sbc	r26, r26
    1448:	bb 0b       	sbc	r27, r27
    144a:	dc 01       	movw	r26, r24
    144c:	99 27       	eor	r25, r25
    144e:	88 27       	eor	r24, r24
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	84 2b       	or	r24, r20
    1456:	95 2b       	or	r25, r21
    1458:	a6 2b       	or	r26, r22
    145a:	b7 2b       	or	r27, r23
    145c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1460:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1464:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1468:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    146c:	b0 9b       	sbis	0x16, 0	; 22
    146e:	1b c0       	rjmp	.+54     	; 0x14a6 <__vector_13+0x98>
    1470:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1474:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1478:	c9 01       	movw	r24, r18
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	09 2e       	mov	r0, r25
    147e:	00 0c       	add	r0, r0
    1480:	aa 0b       	sbc	r26, r26
    1482:	bb 0b       	sbc	r27, r27
    1484:	dc 01       	movw	r26, r24
    1486:	99 27       	eor	r25, r25
    1488:	88 27       	eor	r24, r24
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	84 2b       	or	r24, r20
    1490:	95 2b       	or	r25, r21
    1492:	a6 2b       	or	r26, r22
    1494:	b7 2b       	or	r27, r23
    1496:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    149a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    149e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    14a2:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    14a6:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x10>
    14aa:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x11>
    14ae:	30 97       	sbiw	r30, 0x00	; 0
    14b0:	39 f0       	breq	.+14     	; 0x14c0 <__vector_13+0xb2>
    14b2:	68 e0       	ldi	r22, 0x08	; 8
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x10>
    14ba:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x11>
    14be:	09 95       	icall
    14c0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    14c4:	ff 91       	pop	r31
    14c6:	ef 91       	pop	r30
    14c8:	bf 91       	pop	r27
    14ca:	af 91       	pop	r26
    14cc:	9f 91       	pop	r25
    14ce:	8f 91       	pop	r24
    14d0:	7f 91       	pop	r23
    14d2:	6f 91       	pop	r22
    14d4:	5f 91       	pop	r21
    14d6:	4f 91       	pop	r20
    14d8:	3f 91       	pop	r19
    14da:	2f 91       	pop	r18
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0
    14e2:	1f 90       	pop	r1
    14e4:	18 95       	reti

000014e6 <__vector_14>:
    14e6:	1f 92       	push	r1
    14e8:	0f 92       	push	r0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	0f 92       	push	r0
    14ee:	11 24       	eor	r1, r1
    14f0:	2f 93       	push	r18
    14f2:	3f 93       	push	r19
    14f4:	4f 93       	push	r20
    14f6:	5f 93       	push	r21
    14f8:	6f 93       	push	r22
    14fa:	7f 93       	push	r23
    14fc:	8f 93       	push	r24
    14fe:	9f 93       	push	r25
    1500:	af 93       	push	r26
    1502:	bf 93       	push	r27
    1504:	ef 93       	push	r30
    1506:	ff 93       	push	r31
    1508:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    150c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1510:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1514:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1518:	c9 01       	movw	r24, r18
    151a:	03 2e       	mov	r0, r19
    151c:	00 0c       	add	r0, r0
    151e:	aa 0b       	sbc	r26, r26
    1520:	bb 0b       	sbc	r27, r27
    1522:	dc 01       	movw	r26, r24
    1524:	99 27       	eor	r25, r25
    1526:	88 27       	eor	r24, r24
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	84 2b       	or	r24, r20
    152e:	95 2b       	or	r25, r21
    1530:	a6 2b       	or	r26, r22
    1532:	b7 2b       	or	r27, r23
    1534:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1538:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    153c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1540:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1544:	b0 9b       	sbis	0x16, 0	; 22
    1546:	1b c0       	rjmp	.+54     	; 0x157e <__vector_14+0x98>
    1548:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    154c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1550:	c9 01       	movw	r24, r18
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	09 2e       	mov	r0, r25
    1556:	00 0c       	add	r0, r0
    1558:	aa 0b       	sbc	r26, r26
    155a:	bb 0b       	sbc	r27, r27
    155c:	dc 01       	movw	r26, r24
    155e:	99 27       	eor	r25, r25
    1560:	88 27       	eor	r24, r24
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	84 2b       	or	r24, r20
    1568:	95 2b       	or	r25, r21
    156a:	a6 2b       	or	r26, r22
    156c:	b7 2b       	or	r27, r23
    156e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1572:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1576:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    157a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    157e:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x12>
    1582:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x13>
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	39 f0       	breq	.+14     	; 0x1598 <__vector_14+0xb2>
    158a:	69 e0       	ldi	r22, 0x09	; 9
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x12>
    1592:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x13>
    1596:	09 95       	icall
    1598:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_15>:
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
    15e0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    15e4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    15e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15f0:	c9 01       	movw	r24, r18
    15f2:	03 2e       	mov	r0, r19
    15f4:	00 0c       	add	r0, r0
    15f6:	aa 0b       	sbc	r26, r26
    15f8:	bb 0b       	sbc	r27, r27
    15fa:	dc 01       	movw	r26, r24
    15fc:	99 27       	eor	r25, r25
    15fe:	88 27       	eor	r24, r24
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	84 2b       	or	r24, r20
    1606:	95 2b       	or	r25, r21
    1608:	a6 2b       	or	r26, r22
    160a:	b7 2b       	or	r27, r23
    160c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1610:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1614:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1618:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    161c:	b0 9b       	sbis	0x16, 0	; 22
    161e:	1b c0       	rjmp	.+54     	; 0x1656 <__vector_15+0x98>
    1620:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1624:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1628:	c9 01       	movw	r24, r18
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	09 2e       	mov	r0, r25
    162e:	00 0c       	add	r0, r0
    1630:	aa 0b       	sbc	r26, r26
    1632:	bb 0b       	sbc	r27, r27
    1634:	dc 01       	movw	r26, r24
    1636:	99 27       	eor	r25, r25
    1638:	88 27       	eor	r24, r24
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	84 2b       	or	r24, r20
    1640:	95 2b       	or	r25, r21
    1642:	a6 2b       	or	r26, r22
    1644:	b7 2b       	or	r27, r23
    1646:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    164a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    164e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1652:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1656:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0x14>
    165a:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x15>
    165e:	30 97       	sbiw	r30, 0x00	; 0
    1660:	39 f0       	breq	.+14     	; 0x1670 <__vector_15+0xb2>
    1662:	6a e0       	ldi	r22, 0x0A	; 10
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0x14>
    166a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x15>
    166e:	09 95       	icall
    1670:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	7f 91       	pop	r23
    1682:	6f 91       	pop	r22
    1684:	5f 91       	pop	r21
    1686:	4f 91       	pop	r20
    1688:	3f 91       	pop	r19
    168a:	2f 91       	pop	r18
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <__vector_16>:
    1696:	1f 92       	push	r1
    1698:	0f 92       	push	r0
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	0f 92       	push	r0
    169e:	11 24       	eor	r1, r1
    16a0:	2f 93       	push	r18
    16a2:	3f 93       	push	r19
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
    16b8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    16bc:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    16c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16c8:	c9 01       	movw	r24, r18
    16ca:	03 2e       	mov	r0, r19
    16cc:	00 0c       	add	r0, r0
    16ce:	aa 0b       	sbc	r26, r26
    16d0:	bb 0b       	sbc	r27, r27
    16d2:	dc 01       	movw	r26, r24
    16d4:	99 27       	eor	r25, r25
    16d6:	88 27       	eor	r24, r24
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	84 2b       	or	r24, r20
    16de:	95 2b       	or	r25, r21
    16e0:	a6 2b       	or	r26, r22
    16e2:	b7 2b       	or	r27, r23
    16e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    16e8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    16ec:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    16f0:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    16f4:	b0 9b       	sbis	0x16, 0	; 22
    16f6:	1b c0       	rjmp	.+54     	; 0x172e <__vector_16+0x98>
    16f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1700:	c9 01       	movw	r24, r18
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	09 2e       	mov	r0, r25
    1706:	00 0c       	add	r0, r0
    1708:	aa 0b       	sbc	r26, r26
    170a:	bb 0b       	sbc	r27, r27
    170c:	dc 01       	movw	r26, r24
    170e:	99 27       	eor	r25, r25
    1710:	88 27       	eor	r24, r24
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	84 2b       	or	r24, r20
    1718:	95 2b       	or	r25, r21
    171a:	a6 2b       	or	r26, r22
    171c:	b7 2b       	or	r27, r23
    171e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1722:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1726:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    172a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    172e:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x16>
    1732:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x17>
    1736:	30 97       	sbiw	r30, 0x00	; 0
    1738:	39 f0       	breq	.+14     	; 0x1748 <__vector_16+0xb2>
    173a:	6b e0       	ldi	r22, 0x0B	; 11
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x16>
    1742:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x17>
    1746:	09 95       	icall
    1748:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_17>:
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1794:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1798:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    179c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17a0:	c9 01       	movw	r24, r18
    17a2:	03 2e       	mov	r0, r19
    17a4:	00 0c       	add	r0, r0
    17a6:	aa 0b       	sbc	r26, r26
    17a8:	bb 0b       	sbc	r27, r27
    17aa:	dc 01       	movw	r26, r24
    17ac:	99 27       	eor	r25, r25
    17ae:	88 27       	eor	r24, r24
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	84 2b       	or	r24, r20
    17b6:	95 2b       	or	r25, r21
    17b8:	a6 2b       	or	r26, r22
    17ba:	b7 2b       	or	r27, r23
    17bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    17c0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    17c4:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    17c8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    17cc:	b0 9b       	sbis	0x16, 0	; 22
    17ce:	1b c0       	rjmp	.+54     	; 0x1806 <__vector_17+0x98>
    17d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17d8:	c9 01       	movw	r24, r18
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	09 2e       	mov	r0, r25
    17de:	00 0c       	add	r0, r0
    17e0:	aa 0b       	sbc	r26, r26
    17e2:	bb 0b       	sbc	r27, r27
    17e4:	dc 01       	movw	r26, r24
    17e6:	99 27       	eor	r25, r25
    17e8:	88 27       	eor	r24, r24
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	84 2b       	or	r24, r20
    17f0:	95 2b       	or	r25, r21
    17f2:	a6 2b       	or	r26, r22
    17f4:	b7 2b       	or	r27, r23
    17f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    17fa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    17fe:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1802:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1806:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x18>
    180a:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x19>
    180e:	30 97       	sbiw	r30, 0x00	; 0
    1810:	39 f0       	breq	.+14     	; 0x1820 <__vector_17+0xb2>
    1812:	6c e0       	ldi	r22, 0x0C	; 12
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x18>
    181a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x19>
    181e:	09 95       	icall
    1820:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    1824:	ff 91       	pop	r31
    1826:	ef 91       	pop	r30
    1828:	bf 91       	pop	r27
    182a:	af 91       	pop	r26
    182c:	9f 91       	pop	r25
    182e:	8f 91       	pop	r24
    1830:	7f 91       	pop	r23
    1832:	6f 91       	pop	r22
    1834:	5f 91       	pop	r21
    1836:	4f 91       	pop	r20
    1838:	3f 91       	pop	r19
    183a:	2f 91       	pop	r18
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	0f 90       	pop	r0
    1842:	1f 90       	pop	r1
    1844:	18 95       	reti

00001846 <__vector_18>:
    1846:	1f 92       	push	r1
    1848:	0f 92       	push	r0
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	0f 92       	push	r0
    184e:	11 24       	eor	r1, r1
    1850:	2f 93       	push	r18
    1852:	3f 93       	push	r19
    1854:	4f 93       	push	r20
    1856:	5f 93       	push	r21
    1858:	6f 93       	push	r22
    185a:	7f 93       	push	r23
    185c:	8f 93       	push	r24
    185e:	9f 93       	push	r25
    1860:	af 93       	push	r26
    1862:	bf 93       	push	r27
    1864:	ef 93       	push	r30
    1866:	ff 93       	push	r31
    1868:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    186c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1870:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1874:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1878:	c9 01       	movw	r24, r18
    187a:	03 2e       	mov	r0, r19
    187c:	00 0c       	add	r0, r0
    187e:	aa 0b       	sbc	r26, r26
    1880:	bb 0b       	sbc	r27, r27
    1882:	dc 01       	movw	r26, r24
    1884:	99 27       	eor	r25, r25
    1886:	88 27       	eor	r24, r24
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	84 2b       	or	r24, r20
    188e:	95 2b       	or	r25, r21
    1890:	a6 2b       	or	r26, r22
    1892:	b7 2b       	or	r27, r23
    1894:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1898:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    189c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    18a0:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    18a4:	b0 9b       	sbis	0x16, 0	; 22
    18a6:	1b c0       	rjmp	.+54     	; 0x18de <__vector_18+0x98>
    18a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18b0:	c9 01       	movw	r24, r18
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	09 2e       	mov	r0, r25
    18b6:	00 0c       	add	r0, r0
    18b8:	aa 0b       	sbc	r26, r26
    18ba:	bb 0b       	sbc	r27, r27
    18bc:	dc 01       	movw	r26, r24
    18be:	99 27       	eor	r25, r25
    18c0:	88 27       	eor	r24, r24
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	84 2b       	or	r24, r20
    18c8:	95 2b       	or	r25, r21
    18ca:	a6 2b       	or	r26, r22
    18cc:	b7 2b       	or	r27, r23
    18ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    18d2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    18d6:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    18da:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    18de:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x1a>
    18e2:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x1b>
    18e6:	30 97       	sbiw	r30, 0x00	; 0
    18e8:	39 f0       	breq	.+14     	; 0x18f8 <__vector_18+0xb2>
    18ea:	6d e0       	ldi	r22, 0x0D	; 13
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x1a>
    18f2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x1b>
    18f6:	09 95       	icall
    18f8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <__vector_19>:
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	2f 93       	push	r18
    192a:	3f 93       	push	r19
    192c:	4f 93       	push	r20
    192e:	5f 93       	push	r21
    1930:	6f 93       	push	r22
    1932:	7f 93       	push	r23
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	af 93       	push	r26
    193a:	bf 93       	push	r27
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
    1940:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1944:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1948:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    194c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1950:	c9 01       	movw	r24, r18
    1952:	03 2e       	mov	r0, r19
    1954:	00 0c       	add	r0, r0
    1956:	aa 0b       	sbc	r26, r26
    1958:	bb 0b       	sbc	r27, r27
    195a:	dc 01       	movw	r26, r24
    195c:	99 27       	eor	r25, r25
    195e:	88 27       	eor	r24, r24
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	84 2b       	or	r24, r20
    1966:	95 2b       	or	r25, r21
    1968:	a6 2b       	or	r26, r22
    196a:	b7 2b       	or	r27, r23
    196c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1970:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1974:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1978:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    197c:	b0 9b       	sbis	0x16, 0	; 22
    197e:	1b c0       	rjmp	.+54     	; 0x19b6 <__vector_19+0x98>
    1980:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1984:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1988:	c9 01       	movw	r24, r18
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	09 2e       	mov	r0, r25
    198e:	00 0c       	add	r0, r0
    1990:	aa 0b       	sbc	r26, r26
    1992:	bb 0b       	sbc	r27, r27
    1994:	dc 01       	movw	r26, r24
    1996:	99 27       	eor	r25, r25
    1998:	88 27       	eor	r24, r24
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	84 2b       	or	r24, r20
    19a0:	95 2b       	or	r25, r21
    19a2:	a6 2b       	or	r26, r22
    19a4:	b7 2b       	or	r27, r23
    19a6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    19aa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    19ae:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    19b2:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    19b6:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x1c>
    19ba:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x1d>
    19be:	30 97       	sbiw	r30, 0x00	; 0
    19c0:	39 f0       	breq	.+14     	; 0x19d0 <__vector_19+0xb2>
    19c2:	6e e0       	ldi	r22, 0x0E	; 14
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x1c>
    19ca:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x1d>
    19ce:	09 95       	icall
    19d0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    19d4:	ff 91       	pop	r31
    19d6:	ef 91       	pop	r30
    19d8:	bf 91       	pop	r27
    19da:	af 91       	pop	r26
    19dc:	9f 91       	pop	r25
    19de:	8f 91       	pop	r24
    19e0:	7f 91       	pop	r23
    19e2:	6f 91       	pop	r22
    19e4:	5f 91       	pop	r21
    19e6:	4f 91       	pop	r20
    19e8:	3f 91       	pop	r19
    19ea:	2f 91       	pop	r18
    19ec:	0f 90       	pop	r0
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	0f 90       	pop	r0
    19f2:	1f 90       	pop	r1
    19f4:	18 95       	reti

000019f6 <__vector_20>:
    19f6:	1f 92       	push	r1
    19f8:	0f 92       	push	r0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	0f 92       	push	r0
    19fe:	11 24       	eor	r1, r1
    1a00:	2f 93       	push	r18
    1a02:	3f 93       	push	r19
    1a04:	4f 93       	push	r20
    1a06:	5f 93       	push	r21
    1a08:	6f 93       	push	r22
    1a0a:	7f 93       	push	r23
    1a0c:	8f 93       	push	r24
    1a0e:	9f 93       	push	r25
    1a10:	af 93       	push	r26
    1a12:	bf 93       	push	r27
    1a14:	ef 93       	push	r30
    1a16:	ff 93       	push	r31
    1a18:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1a1c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1a20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a28:	c9 01       	movw	r24, r18
    1a2a:	03 2e       	mov	r0, r19
    1a2c:	00 0c       	add	r0, r0
    1a2e:	aa 0b       	sbc	r26, r26
    1a30:	bb 0b       	sbc	r27, r27
    1a32:	dc 01       	movw	r26, r24
    1a34:	99 27       	eor	r25, r25
    1a36:	88 27       	eor	r24, r24
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	84 2b       	or	r24, r20
    1a3e:	95 2b       	or	r25, r21
    1a40:	a6 2b       	or	r26, r22
    1a42:	b7 2b       	or	r27, r23
    1a44:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1a48:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1a4c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1a50:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1a54:	b0 9b       	sbis	0x16, 0	; 22
    1a56:	1b c0       	rjmp	.+54     	; 0x1a8e <__vector_20+0x98>
    1a58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a60:	c9 01       	movw	r24, r18
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	09 2e       	mov	r0, r25
    1a66:	00 0c       	add	r0, r0
    1a68:	aa 0b       	sbc	r26, r26
    1a6a:	bb 0b       	sbc	r27, r27
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	99 27       	eor	r25, r25
    1a70:	88 27       	eor	r24, r24
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	84 2b       	or	r24, r20
    1a78:	95 2b       	or	r25, r21
    1a7a:	a6 2b       	or	r26, r22
    1a7c:	b7 2b       	or	r27, r23
    1a7e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1a82:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1a86:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1a8a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1a8e:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x1e>
    1a92:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x1f>
    1a96:	30 97       	sbiw	r30, 0x00	; 0
    1a98:	39 f0       	breq	.+14     	; 0x1aa8 <__vector_20+0xb2>
    1a9a:	6f e0       	ldi	r22, 0x0F	; 15
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x1e>
    1aa2:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x1f>
    1aa6:	09 95       	icall
    1aa8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    1aac:	ff 91       	pop	r31
    1aae:	ef 91       	pop	r30
    1ab0:	bf 91       	pop	r27
    1ab2:	af 91       	pop	r26
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	7f 91       	pop	r23
    1aba:	6f 91       	pop	r22
    1abc:	5f 91       	pop	r21
    1abe:	4f 91       	pop	r20
    1ac0:	3f 91       	pop	r19
    1ac2:	2f 91       	pop	r18
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <__vector_21>:
    1ace:	1f 92       	push	r1
    1ad0:	0f 92       	push	r0
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	0f 92       	push	r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	2f 93       	push	r18
    1ada:	3f 93       	push	r19
    1adc:	4f 93       	push	r20
    1ade:	5f 93       	push	r21
    1ae0:	6f 93       	push	r22
    1ae2:	7f 93       	push	r23
    1ae4:	8f 93       	push	r24
    1ae6:	9f 93       	push	r25
    1ae8:	af 93       	push	r26
    1aea:	bf 93       	push	r27
    1aec:	ef 93       	push	r30
    1aee:	ff 93       	push	r31
    1af0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1af4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1af8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1afc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b00:	c9 01       	movw	r24, r18
    1b02:	03 2e       	mov	r0, r19
    1b04:	00 0c       	add	r0, r0
    1b06:	aa 0b       	sbc	r26, r26
    1b08:	bb 0b       	sbc	r27, r27
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	99 27       	eor	r25, r25
    1b0e:	88 27       	eor	r24, r24
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	84 2b       	or	r24, r20
    1b16:	95 2b       	or	r25, r21
    1b18:	a6 2b       	or	r26, r22
    1b1a:	b7 2b       	or	r27, r23
    1b1c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1b20:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1b24:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1b28:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1b2c:	b0 9b       	sbis	0x16, 0	; 22
    1b2e:	1b c0       	rjmp	.+54     	; 0x1b66 <__vector_21+0x98>
    1b30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b38:	c9 01       	movw	r24, r18
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	09 2e       	mov	r0, r25
    1b3e:	00 0c       	add	r0, r0
    1b40:	aa 0b       	sbc	r26, r26
    1b42:	bb 0b       	sbc	r27, r27
    1b44:	dc 01       	movw	r26, r24
    1b46:	99 27       	eor	r25, r25
    1b48:	88 27       	eor	r24, r24
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	84 2b       	or	r24, r20
    1b50:	95 2b       	or	r25, r21
    1b52:	a6 2b       	or	r26, r22
    1b54:	b7 2b       	or	r27, r23
    1b56:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1b5a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1b5e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1b62:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1b66:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x20>
    1b6a:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x21>
    1b6e:	30 97       	sbiw	r30, 0x00	; 0
    1b70:	39 f0       	breq	.+14     	; 0x1b80 <__vector_21+0xb2>
    1b72:	60 e1       	ldi	r22, 0x10	; 16
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x20>
    1b7a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x21>
    1b7e:	09 95       	icall
    1b80:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	7f 91       	pop	r23
    1b92:	6f 91       	pop	r22
    1b94:	5f 91       	pop	r21
    1b96:	4f 91       	pop	r20
    1b98:	3f 91       	pop	r19
    1b9a:	2f 91       	pop	r18
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <__vector_22>:
    1ba6:	1f 92       	push	r1
    1ba8:	0f 92       	push	r0
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	0f 92       	push	r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	af 93       	push	r26
    1bc2:	bf 93       	push	r27
    1bc4:	ef 93       	push	r30
    1bc6:	ff 93       	push	r31
    1bc8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1bcc:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1bd0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bd4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bd8:	c9 01       	movw	r24, r18
    1bda:	03 2e       	mov	r0, r19
    1bdc:	00 0c       	add	r0, r0
    1bde:	aa 0b       	sbc	r26, r26
    1be0:	bb 0b       	sbc	r27, r27
    1be2:	dc 01       	movw	r26, r24
    1be4:	99 27       	eor	r25, r25
    1be6:	88 27       	eor	r24, r24
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	84 2b       	or	r24, r20
    1bee:	95 2b       	or	r25, r21
    1bf0:	a6 2b       	or	r26, r22
    1bf2:	b7 2b       	or	r27, r23
    1bf4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1bf8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1bfc:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1c00:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1c04:	b0 9b       	sbis	0x16, 0	; 22
    1c06:	1b c0       	rjmp	.+54     	; 0x1c3e <__vector_22+0x98>
    1c08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c10:	c9 01       	movw	r24, r18
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	09 2e       	mov	r0, r25
    1c16:	00 0c       	add	r0, r0
    1c18:	aa 0b       	sbc	r26, r26
    1c1a:	bb 0b       	sbc	r27, r27
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	99 27       	eor	r25, r25
    1c20:	88 27       	eor	r24, r24
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	84 2b       	or	r24, r20
    1c28:	95 2b       	or	r25, r21
    1c2a:	a6 2b       	or	r26, r22
    1c2c:	b7 2b       	or	r27, r23
    1c2e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timestamp>
    1c32:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timestamp+0x1>
    1c36:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timestamp+0x2>
    1c3a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timestamp+0x3>
    1c3e:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0x22>
    1c42:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0x23>
    1c46:	30 97       	sbiw	r30, 0x00	; 0
    1c48:	39 f0       	breq	.+14     	; 0x1c58 <__vector_22+0xb2>
    1c4a:	61 e1       	ldi	r22, 0x11	; 17
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0x22>
    1c52:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0x23>
    1c56:	09 95       	icall
    1c58:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    1c5c:	ff 91       	pop	r31
    1c5e:	ef 91       	pop	r30
    1c60:	bf 91       	pop	r27
    1c62:	af 91       	pop	r26
    1c64:	9f 91       	pop	r25
    1c66:	8f 91       	pop	r24
    1c68:	7f 91       	pop	r23
    1c6a:	6f 91       	pop	r22
    1c6c:	5f 91       	pop	r21
    1c6e:	4f 91       	pop	r20
    1c70:	3f 91       	pop	r19
    1c72:	2f 91       	pop	r18
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	0f 90       	pop	r0
    1c7a:	1f 90       	pop	r1
    1c7c:	18 95       	reti

00001c7e <enqueueByDeadline>:
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	7b 01       	movw	r14, r22
    1c8c:	eb 01       	movw	r28, r22
    1c8e:	a8 81       	ld	r26, Y
    1c90:	b9 81       	ldd	r27, Y+1	; 0x01
    1c92:	10 97       	sbiw	r26, 0x00	; 0
    1c94:	61 f1       	breq	.+88     	; 0x1cee <enqueueByDeadline+0x70>
    1c96:	fc 01       	movw	r30, r24
    1c98:	06 81       	ldd	r16, Z+6	; 0x06
    1c9a:	17 81       	ldd	r17, Z+7	; 0x07
    1c9c:	20 85       	ldd	r18, Z+8	; 0x08
    1c9e:	31 85       	ldd	r19, Z+9	; 0x09
    1ca0:	16 96       	adiw	r26, 0x06	; 6
    1ca2:	4d 91       	ld	r20, X+
    1ca4:	5d 91       	ld	r21, X+
    1ca6:	6d 91       	ld	r22, X+
    1ca8:	7c 91       	ld	r23, X
    1caa:	19 97       	sbiw	r26, 0x09	; 9
    1cac:	04 17       	cp	r16, r20
    1cae:	15 07       	cpc	r17, r21
    1cb0:	26 07       	cpc	r18, r22
    1cb2:	37 07       	cpc	r19, r23
    1cb4:	14 f4       	brge	.+4      	; 0x1cba <enqueueByDeadline+0x3c>
    1cb6:	1b c0       	rjmp	.+54     	; 0x1cee <enqueueByDeadline+0x70>
    1cb8:	df 01       	movw	r26, r30
    1cba:	ed 91       	ld	r30, X+
    1cbc:	fc 91       	ld	r31, X
    1cbe:	11 97       	sbiw	r26, 0x01	; 1
    1cc0:	30 97       	sbiw	r30, 0x00	; 0
    1cc2:	49 f0       	breq	.+18     	; 0x1cd6 <enqueueByDeadline+0x58>
    1cc4:	46 81       	ldd	r20, Z+6	; 0x06
    1cc6:	57 81       	ldd	r21, Z+7	; 0x07
    1cc8:	60 85       	ldd	r22, Z+8	; 0x08
    1cca:	71 85       	ldd	r23, Z+9	; 0x09
    1ccc:	04 17       	cp	r16, r20
    1cce:	15 07       	cpc	r17, r21
    1cd0:	26 07       	cpc	r18, r22
    1cd2:	37 07       	cpc	r19, r23
    1cd4:	8c f7       	brge	.-30     	; 0x1cb8 <enqueueByDeadline+0x3a>
    1cd6:	ec 01       	movw	r28, r24
    1cd8:	f9 83       	std	Y+1, r31	; 0x01
    1cda:	e8 83       	st	Y, r30
    1cdc:	10 97       	sbiw	r26, 0x00	; 0
    1cde:	21 f4       	brne	.+8      	; 0x1ce8 <enqueueByDeadline+0x6a>
    1ce0:	f7 01       	movw	r30, r14
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <enqueueByDeadline+0x78>
    1ce8:	8d 93       	st	X+, r24
    1cea:	9c 93       	st	X, r25
    1cec:	04 c0       	rjmp	.+8      	; 0x1cf6 <enqueueByDeadline+0x78>
    1cee:	ec 01       	movw	r28, r24
    1cf0:	b9 83       	std	Y+1, r27	; 0x01
    1cf2:	a8 83       	st	Y, r26
    1cf4:	f5 cf       	rjmp	.-22     	; 0x1ce0 <enqueueByDeadline+0x62>
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	ff 90       	pop	r15
    1d00:	ef 90       	pop	r14
    1d02:	08 95       	ret

00001d04 <enqueueByBaseline>:
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	7b 01       	movw	r14, r22
    1d12:	eb 01       	movw	r28, r22
    1d14:	a8 81       	ld	r26, Y
    1d16:	b9 81       	ldd	r27, Y+1	; 0x01
    1d18:	10 97       	sbiw	r26, 0x00	; 0
    1d1a:	61 f1       	breq	.+88     	; 0x1d74 <enqueueByBaseline+0x70>
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	02 81       	ldd	r16, Z+2	; 0x02
    1d20:	13 81       	ldd	r17, Z+3	; 0x03
    1d22:	24 81       	ldd	r18, Z+4	; 0x04
    1d24:	35 81       	ldd	r19, Z+5	; 0x05
    1d26:	12 96       	adiw	r26, 0x02	; 2
    1d28:	4d 91       	ld	r20, X+
    1d2a:	5d 91       	ld	r21, X+
    1d2c:	6d 91       	ld	r22, X+
    1d2e:	7c 91       	ld	r23, X
    1d30:	15 97       	sbiw	r26, 0x05	; 5
    1d32:	04 17       	cp	r16, r20
    1d34:	15 07       	cpc	r17, r21
    1d36:	26 07       	cpc	r18, r22
    1d38:	37 07       	cpc	r19, r23
    1d3a:	14 f4       	brge	.+4      	; 0x1d40 <enqueueByBaseline+0x3c>
    1d3c:	1b c0       	rjmp	.+54     	; 0x1d74 <enqueueByBaseline+0x70>
    1d3e:	df 01       	movw	r26, r30
    1d40:	ed 91       	ld	r30, X+
    1d42:	fc 91       	ld	r31, X
    1d44:	11 97       	sbiw	r26, 0x01	; 1
    1d46:	30 97       	sbiw	r30, 0x00	; 0
    1d48:	49 f0       	breq	.+18     	; 0x1d5c <enqueueByBaseline+0x58>
    1d4a:	42 81       	ldd	r20, Z+2	; 0x02
    1d4c:	53 81       	ldd	r21, Z+3	; 0x03
    1d4e:	64 81       	ldd	r22, Z+4	; 0x04
    1d50:	75 81       	ldd	r23, Z+5	; 0x05
    1d52:	04 17       	cp	r16, r20
    1d54:	15 07       	cpc	r17, r21
    1d56:	26 07       	cpc	r18, r22
    1d58:	37 07       	cpc	r19, r23
    1d5a:	8c f7       	brge	.-30     	; 0x1d3e <enqueueByBaseline+0x3a>
    1d5c:	ec 01       	movw	r28, r24
    1d5e:	f9 83       	std	Y+1, r31	; 0x01
    1d60:	e8 83       	st	Y, r30
    1d62:	10 97       	sbiw	r26, 0x00	; 0
    1d64:	21 f4       	brne	.+8      	; 0x1d6e <enqueueByBaseline+0x6a>
    1d66:	f7 01       	movw	r30, r14
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	07 c0       	rjmp	.+14     	; 0x1d7c <enqueueByBaseline+0x78>
    1d6e:	8d 93       	st	X+, r24
    1d70:	9c 93       	st	X, r25
    1d72:	04 c0       	rjmp	.+8      	; 0x1d7c <enqueueByBaseline+0x78>
    1d74:	ec 01       	movw	r28, r24
    1d76:	b9 83       	std	Y+1, r27	; 0x01
    1d78:	a8 83       	st	Y, r26
    1d7a:	f5 cf       	rjmp	.-22     	; 0x1d66 <enqueueByBaseline+0x62>
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	ff 90       	pop	r15
    1d86:	ef 90       	pop	r14
    1d88:	08 95       	ret

00001d8a <dequeue>:
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	ed 91       	ld	r30, X+
    1d8e:	fc 91       	ld	r31, X
    1d90:	11 97       	sbiw	r26, 0x01	; 1
    1d92:	30 97       	sbiw	r30, 0x00	; 0
    1d94:	59 f4       	brne	.+22     	; 0x1dac <dequeue+0x22>
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1d9c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1da0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	83 bf       	out	0x33, r24	; 51
    1da8:	88 95       	sleep
    1daa:	fd cf       	rjmp	.-6      	; 0x1da6 <dequeue+0x1c>
    1dac:	20 81       	ld	r18, Z
    1dae:	31 81       	ldd	r19, Z+1	; 0x01
    1db0:	2d 93       	st	X+, r18
    1db2:	3c 93       	st	X, r19
    1db4:	cf 01       	movw	r24, r30
    1db6:	08 95       	ret

00001db8 <__vector_9>:
    1db8:	1f 92       	push	r1
    1dba:	0f 92       	push	r0
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	0f 92       	push	r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	2f 93       	push	r18
    1dc4:	3f 93       	push	r19
    1dc6:	4f 93       	push	r20
    1dc8:	5f 93       	push	r21
    1dca:	6f 93       	push	r22
    1dcc:	7f 93       	push	r23
    1dce:	8f 93       	push	r24
    1dd0:	9f 93       	push	r25
    1dd2:	ef 93       	push	r30
    1dd4:	ff 93       	push	r31
    1dd6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
    1dda:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
    1de4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
    1de8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1dec:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1df0:	30 97       	sbiw	r30, 0x00	; 0
    1df2:	01 f1       	breq	.+64     	; 0x1e34 <__vector_9+0x7c>
    1df4:	42 81       	ldd	r20, Z+2	; 0x02
    1df6:	53 81       	ldd	r21, Z+3	; 0x03
    1df8:	64 81       	ldd	r22, Z+4	; 0x04
    1dfa:	75 81       	ldd	r23, Z+5	; 0x05
    1dfc:	86 17       	cp	r24, r22
    1dfe:	97 07       	cpc	r25, r23
    1e00:	c9 f4       	brne	.+50     	; 0x1e34 <__vector_9+0x7c>
    1e02:	ca 01       	movw	r24, r20
    1e04:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e08:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e0c:	42 1b       	sub	r20, r18
    1e0e:	53 0b       	sbc	r21, r19
    1e10:	41 30       	cpi	r20, 0x01	; 1
    1e12:	51 05       	cpc	r21, r1
    1e14:	29 f4       	brne	.+10     	; 0x1e20 <__vector_9+0x68>
    1e16:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e1a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1e24:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1e28:	ef e6       	ldi	r30, 0x6F	; 111
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	82 60       	ori	r24, 0x02	; 2
    1e30:	80 83       	st	Z, r24
    1e32:	05 c0       	rjmp	.+10     	; 0x1e3e <__vector_9+0x86>
    1e34:	ef e6       	ldi	r30, 0x6F	; 111
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8d 7f       	andi	r24, 0xFD	; 253
    1e3c:	80 83       	st	Z, r24
    1e3e:	ff 91       	pop	r31
    1e40:	ef 91       	pop	r30
    1e42:	9f 91       	pop	r25
    1e44:	8f 91       	pop	r24
    1e46:	7f 91       	pop	r23
    1e48:	6f 91       	pop	r22
    1e4a:	5f 91       	pop	r21
    1e4c:	4f 91       	pop	r20
    1e4e:	3f 91       	pop	r19
    1e50:	2f 91       	pop	r18
    1e52:	0f 90       	pop	r0
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	0f 90       	pop	r0
    1e58:	1f 90       	pop	r1
    1e5a:	18 95       	reti

00001e5c <__vector_7>:
    1e5c:	1f 92       	push	r1
    1e5e:	0f 92       	push	r0
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	0f 92       	push	r0
    1e64:	11 24       	eor	r1, r1
    1e66:	cf 92       	push	r12
    1e68:	df 92       	push	r13
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	2f 93       	push	r18
    1e70:	3f 93       	push	r19
    1e72:	4f 93       	push	r20
    1e74:	5f 93       	push	r21
    1e76:	6f 93       	push	r22
    1e78:	7f 93       	push	r23
    1e7a:	8f 93       	push	r24
    1e7c:	9f 93       	push	r25
    1e7e:	af 93       	push	r26
    1e80:	bf 93       	push	r27
    1e82:	ef 93       	push	r30
    1e84:	ff 93       	push	r31
    1e86:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <__data_end>
    1e8a:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <__data_end+0x1>
    1e8e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e92:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e96:	b0 99       	sbic	0x16, 0	; 22
    1e98:	0f c0       	rjmp	.+30     	; 0x1eb8 <__vector_7+0x5c>
    1e9a:	0d 2c       	mov	r0, r13
    1e9c:	00 0c       	add	r0, r0
    1e9e:	ee 08       	sbc	r14, r14
    1ea0:	ff 08       	sbc	r15, r15
    1ea2:	d6 01       	movw	r26, r12
    1ea4:	99 27       	eor	r25, r25
    1ea6:	88 27       	eor	r24, r24
    1ea8:	69 01       	movw	r12, r18
    1eaa:	e1 2c       	mov	r14, r1
    1eac:	f1 2c       	mov	r15, r1
    1eae:	c8 2a       	or	r12, r24
    1eb0:	d9 2a       	or	r13, r25
    1eb2:	ea 2a       	or	r14, r26
    1eb4:	fb 2a       	or	r15, r27
    1eb6:	15 c0       	rjmp	.+42     	; 0x1ee2 <__vector_7+0x86>
    1eb8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ebc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ec0:	8f ef       	ldi	r24, 0xFF	; 255
    1ec2:	c8 1a       	sub	r12, r24
    1ec4:	d8 0a       	sbc	r13, r24
    1ec6:	0d 2c       	mov	r0, r13
    1ec8:	00 0c       	add	r0, r0
    1eca:	ee 08       	sbc	r14, r14
    1ecc:	ff 08       	sbc	r15, r15
    1ece:	d6 01       	movw	r26, r12
    1ed0:	99 27       	eor	r25, r25
    1ed2:	88 27       	eor	r24, r24
    1ed4:	69 01       	movw	r12, r18
    1ed6:	e1 2c       	mov	r14, r1
    1ed8:	f1 2c       	mov	r15, r1
    1eda:	c8 2a       	or	r12, r24
    1edc:	d9 2a       	or	r13, r25
    1ede:	ea 2a       	or	r14, r26
    1ee0:	fb 2a       	or	r15, r27
    1ee2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1ee6:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1eea:	30 97       	sbiw	r30, 0x00	; 0
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__vector_7+0x94>
    1eee:	42 c0       	rjmp	.+132    	; 0x1f74 <__vector_7+0x118>
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	a4 81       	ldd	r26, Z+4	; 0x04
    1ef6:	b5 81       	ldd	r27, Z+5	; 0x05
    1ef8:	8c 19       	sub	r24, r12
    1efa:	9d 09       	sbc	r25, r13
    1efc:	ae 09       	sbc	r26, r14
    1efe:	bf 09       	sbc	r27, r15
    1f00:	18 16       	cp	r1, r24
    1f02:	19 06       	cpc	r1, r25
    1f04:	1a 06       	cpc	r1, r26
    1f06:	1b 06       	cpc	r1, r27
    1f08:	ec f1       	brlt	.+122    	; 0x1f84 <__vector_7+0x128>
    1f0a:	8e e0       	ldi	r24, 0x0E	; 14
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <dequeue>
    1f12:	60 e1       	ldi	r22, 0x10	; 16
    1f14:	71 e0       	ldi	r23, 0x01	; 1
    1f16:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <enqueueByDeadline>
    1f1a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    1f1e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    1f22:	30 97       	sbiw	r30, 0x00	; 0
    1f24:	39 f1       	breq	.+78     	; 0x1f74 <__vector_7+0x118>
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	a4 81       	ldd	r26, Z+4	; 0x04
    1f2c:	b5 81       	ldd	r27, Z+5	; 0x05
    1f2e:	8c 19       	sub	r24, r12
    1f30:	9d 09       	sbc	r25, r13
    1f32:	ae 09       	sbc	r26, r14
    1f34:	bf 09       	sbc	r27, r15
    1f36:	18 16       	cp	r1, r24
    1f38:	19 06       	cpc	r1, r25
    1f3a:	1a 06       	cpc	r1, r26
    1f3c:	1b 06       	cpc	r1, r27
    1f3e:	2c f7       	brge	.-54     	; 0x1f0a <__vector_7+0xae>
    1f40:	21 c0       	rjmp	.+66     	; 0x1f84 <__vector_7+0x128>
    1f42:	9c 01       	movw	r18, r24
    1f44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1f48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f4c:	84 1b       	sub	r24, r20
    1f4e:	95 0b       	sbc	r25, r21
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	31 f4       	brne	.+12     	; 0x1f60 <__vector_7+0x104>
    1f54:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1f58:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f5c:	2f 5f       	subi	r18, 0xFF	; 255
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f60:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1f64:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1f68:	ef e6       	ldi	r30, 0x6F	; 111
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	82 60       	ori	r24, 0x02	; 2
    1f70:	80 83       	st	Z, r24
    1f72:	05 c0       	rjmp	.+10     	; 0x1f7e <__vector_7+0x122>
    1f74:	ef e6       	ldi	r30, 0x6F	; 111
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	8d 7f       	andi	r24, 0xFD	; 253
    1f7c:	80 83       	st	Z, r24
    1f7e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    1f82:	0c c0       	rjmp	.+24     	; 0x1f9c <__vector_7+0x140>
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	a4 81       	ldd	r26, Z+4	; 0x04
    1f8a:	b5 81       	ldd	r27, Z+5	; 0x05
    1f8c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    1f90:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1f94:	2a 17       	cp	r18, r26
    1f96:	3b 07       	cpc	r19, r27
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <__vector_7+0x118>
    1f9a:	d3 cf       	rjmp	.-90     	; 0x1f42 <__vector_7+0xe6>
    1f9c:	ff 91       	pop	r31
    1f9e:	ef 91       	pop	r30
    1fa0:	bf 91       	pop	r27
    1fa2:	af 91       	pop	r26
    1fa4:	9f 91       	pop	r25
    1fa6:	8f 91       	pop	r24
    1fa8:	7f 91       	pop	r23
    1faa:	6f 91       	pop	r22
    1fac:	5f 91       	pop	r21
    1fae:	4f 91       	pop	r20
    1fb0:	3f 91       	pop	r19
    1fb2:	2f 91       	pop	r18
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	df 90       	pop	r13
    1fba:	cf 90       	pop	r12
    1fbc:	0f 90       	pop	r0
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	0f 90       	pop	r0
    1fc2:	1f 90       	pop	r1
    1fc4:	18 95       	reti

00001fc6 <async>:
    1fc6:	3f 92       	push	r3
    1fc8:	4f 92       	push	r4
    1fca:	5f 92       	push	r5
    1fcc:	6f 92       	push	r6
    1fce:	7f 92       	push	r7
    1fd0:	8f 92       	push	r8
    1fd2:	9f 92       	push	r9
    1fd4:	af 92       	push	r10
    1fd6:	bf 92       	push	r11
    1fd8:	cf 92       	push	r12
    1fda:	df 92       	push	r13
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	2b 01       	movw	r4, r22
    1fea:	3c 01       	movw	r6, r24
    1fec:	49 01       	movw	r8, r18
    1fee:	5a 01       	movw	r10, r20
    1ff0:	8f b7       	in	r24, 0x3f	; 63
    1ff2:	80 78       	andi	r24, 0x80	; 128
    1ff4:	38 2e       	mov	r3, r24
    1ff6:	f8 94       	cli
    1ff8:	86 e0       	ldi	r24, 0x06	; 6
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <dequeue>
    2000:	ec 01       	movw	r28, r24
    2002:	1b 87       	std	Y+11, r17	; 0x0b
    2004:	0a 87       	std	Y+10, r16	; 0x0a
    2006:	fd 86       	std	Y+13, r15	; 0x0d
    2008:	ec 86       	std	Y+12, r14	; 0x0c
    200a:	df 86       	std	Y+15, r13	; 0x0f
    200c:	ce 86       	std	Y+14, r12	; 0x0e
    200e:	33 20       	and	r3, r3
    2010:	61 f0       	breq	.+24     	; 0x202a <async+0x64>
    2012:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    2016:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    201a:	02 80       	ldd	r0, Z+2	; 0x02
    201c:	f3 81       	ldd	r31, Z+3	; 0x03
    201e:	e0 2d       	mov	r30, r0
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	a4 81       	ldd	r26, Z+4	; 0x04
    2026:	b5 81       	ldd	r27, Z+5	; 0x05
    2028:	08 c0       	rjmp	.+16     	; 0x203a <async+0x74>
    202a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timestamp>
    202e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timestamp+0x1>
    2032:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <timestamp+0x2>
    2036:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <timestamp+0x3>
    203a:	48 0e       	add	r4, r24
    203c:	59 1e       	adc	r5, r25
    203e:	6a 1e       	adc	r6, r26
    2040:	7b 1e       	adc	r7, r27
    2042:	4a 82       	std	Y+2, r4	; 0x02
    2044:	5b 82       	std	Y+3, r5	; 0x03
    2046:	6c 82       	std	Y+4, r6	; 0x04
    2048:	7d 82       	std	Y+5, r7	; 0x05
    204a:	18 14       	cp	r1, r8
    204c:	19 04       	cpc	r1, r9
    204e:	1a 04       	cpc	r1, r10
    2050:	1b 04       	cpc	r1, r11
    2052:	44 f0       	brlt	.+16     	; 0x2064 <async+0x9e>
    2054:	0f 2e       	mov	r0, r31
    2056:	88 24       	eor	r8, r8
    2058:	8a 94       	dec	r8
    205a:	98 2c       	mov	r9, r8
    205c:	a8 2c       	mov	r10, r8
    205e:	ff e7       	ldi	r31, 0x7F	; 127
    2060:	bf 2e       	mov	r11, r31
    2062:	f0 2d       	mov	r31, r0
    2064:	84 0c       	add	r8, r4
    2066:	95 1c       	adc	r9, r5
    2068:	a6 1c       	adc	r10, r6
    206a:	b7 1c       	adc	r11, r7
    206c:	8e 82       	std	Y+6, r8	; 0x06
    206e:	9f 82       	std	Y+7, r9	; 0x07
    2070:	a8 86       	std	Y+8, r10	; 0x08
    2072:	b9 86       	std	Y+9, r11	; 0x09
    2074:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
    2078:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
    207c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    2080:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    2084:	b0 99       	sbic	0x16, 0	; 22
    2086:	0e c0       	rjmp	.+28     	; 0x20a4 <async+0xde>
    2088:	09 2e       	mov	r0, r25
    208a:	00 0c       	add	r0, r0
    208c:	aa 0b       	sbc	r26, r26
    208e:	bb 0b       	sbc	r27, r27
    2090:	dc 01       	movw	r26, r24
    2092:	99 27       	eor	r25, r25
    2094:	88 27       	eor	r24, r24
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	84 2b       	or	r24, r20
    209c:	95 2b       	or	r25, r21
    209e:	a6 2b       	or	r26, r22
    20a0:	b7 2b       	or	r27, r23
    20a2:	13 c0       	rjmp	.+38     	; 0x20ca <async+0x104>
    20a4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    20a8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	09 2e       	mov	r0, r25
    20b0:	00 0c       	add	r0, r0
    20b2:	aa 0b       	sbc	r26, r26
    20b4:	bb 0b       	sbc	r27, r27
    20b6:	dc 01       	movw	r26, r24
    20b8:	99 27       	eor	r25, r25
    20ba:	88 27       	eor	r24, r24
    20bc:	a9 01       	movw	r20, r18
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	84 2b       	or	r24, r20
    20c4:	95 2b       	or	r25, r21
    20c6:	a6 2b       	or	r26, r22
    20c8:	b7 2b       	or	r27, r23
    20ca:	48 1a       	sub	r4, r24
    20cc:	59 0a       	sbc	r5, r25
    20ce:	6a 0a       	sbc	r6, r26
    20d0:	7b 0a       	sbc	r7, r27
    20d2:	14 14       	cp	r1, r4
    20d4:	15 04       	cpc	r1, r5
    20d6:	16 04       	cpc	r1, r6
    20d8:	17 04       	cpc	r1, r7
    20da:	ac f5       	brge	.+106    	; 0x2146 <async+0x180>
    20dc:	6e e0       	ldi	r22, 0x0E	; 14
    20de:	71 e0       	ldi	r23, 0x01	; 1
    20e0:	ce 01       	movw	r24, r28
    20e2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <enqueueByBaseline>
    20e6:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <timerQ>
    20ea:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <timerQ+0x1>
    20ee:	30 97       	sbiw	r30, 0x00	; 0
    20f0:	21 f1       	breq	.+72     	; 0x213a <async+0x174>
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	a4 81       	ldd	r26, Z+4	; 0x04
    20f8:	b5 81       	ldd	r27, Z+5	; 0x05
    20fa:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
    20fe:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    2102:	2a 17       	cp	r18, r26
    2104:	3b 07       	cpc	r19, r27
    2106:	c9 f4       	brne	.+50     	; 0x213a <async+0x174>
    2108:	9c 01       	movw	r18, r24
    210a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    210e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    2112:	84 1b       	sub	r24, r20
    2114:	95 0b       	sbc	r25, r21
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	31 f4       	brne	.+12     	; 0x2126 <async+0x160>
    211a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    211e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    2122:	2f 5f       	subi	r18, 0xFF	; 255
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
    2126:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    212a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    212e:	ef e6       	ldi	r30, 0x6F	; 111
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	82 60       	ori	r24, 0x02	; 2
    2136:	80 83       	st	Z, r24
    2138:	41 c0       	rjmp	.+130    	; 0x21bc <async+0x1f6>
    213a:	ef e6       	ldi	r30, 0x6F	; 111
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	8d 7f       	andi	r24, 0xFD	; 253
    2142:	80 83       	st	Z, r24
    2144:	3b c0       	rjmp	.+118    	; 0x21bc <async+0x1f6>
    2146:	60 e1       	ldi	r22, 0x10	; 16
    2148:	71 e0       	ldi	r23, 0x01	; 1
    214a:	ce 01       	movw	r24, r28
    214c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <enqueueByDeadline>
    2150:	33 20       	and	r3, r3
    2152:	b9 f1       	breq	.+110    	; 0x21c2 <async+0x1fc>
    2154:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    2158:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	81 f1       	breq	.+96     	; 0x21c0 <async+0x1fa>
    2160:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2164:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2168:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <msgQ>
    216c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <msgQ+0x1>
    2170:	02 81       	ldd	r16, Z+2	; 0x02
    2172:	13 81       	ldd	r17, Z+3	; 0x03
    2174:	d9 01       	movw	r26, r18
    2176:	16 96       	adiw	r26, 0x06	; 6
    2178:	4d 91       	ld	r20, X+
    217a:	5d 91       	ld	r21, X+
    217c:	6d 91       	ld	r22, X+
    217e:	7c 91       	ld	r23, X
    2180:	19 97       	sbiw	r26, 0x09	; 9
    2182:	d8 01       	movw	r26, r16
    2184:	16 96       	adiw	r26, 0x06	; 6
    2186:	0d 91       	ld	r16, X+
    2188:	1d 91       	ld	r17, X+
    218a:	2d 91       	ld	r18, X+
    218c:	3c 91       	ld	r19, X
    218e:	19 97       	sbiw	r26, 0x09	; 9
    2190:	40 1b       	sub	r20, r16
    2192:	51 0b       	sbc	r21, r17
    2194:	62 0b       	sbc	r22, r18
    2196:	73 0b       	sbc	r23, r19
    2198:	9a f4       	brpl	.+38     	; 0x21c0 <async+0x1fa>
    219a:	dc 01       	movw	r26, r24
    219c:	2d 91       	ld	r18, X+
    219e:	3c 91       	ld	r19, X
    21a0:	11 97       	sbiw	r26, 0x01	; 1
    21a2:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    21a6:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    21aa:	ed 93       	st	X+, r30
    21ac:	fc 93       	st	X, r31
    21ae:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    21b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    21b6:	0e 94 4c 06 	call	0xc98	; 0xc98 <dispatch>
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <async+0x1fa>
    21bc:	33 20       	and	r3, r3
    21be:	09 f0       	breq	.+2      	; 0x21c2 <async+0x1fc>
    21c0:	78 94       	sei
    21c2:	ce 01       	movw	r24, r28
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
    21d0:	df 90       	pop	r13
    21d2:	cf 90       	pop	r12
    21d4:	bf 90       	pop	r11
    21d6:	af 90       	pop	r10
    21d8:	9f 90       	pop	r9
    21da:	8f 90       	pop	r8
    21dc:	7f 90       	pop	r7
    21de:	6f 90       	pop	r6
    21e0:	5f 90       	pop	r5
    21e2:	4f 90       	pop	r4
    21e4:	3f 90       	pop	r3
    21e6:	08 95       	ret

000021e8 <sync>:
    21e8:	cf 92       	push	r12
    21ea:	df 92       	push	r13
    21ec:	ef 92       	push	r14
    21ee:	ff 92       	push	r15
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	ec 01       	movw	r28, r24
    21fa:	7b 01       	movw	r14, r22
    21fc:	6a 01       	movw	r12, r20
    21fe:	1f b7       	in	r17, 0x3f	; 63
    2200:	10 78       	andi	r17, 0x80	; 128
    2202:	f8 94       	cli
    2204:	a8 81       	ld	r26, Y
    2206:	b9 81       	ldd	r27, Y+1	; 0x01
    2208:	10 97       	sbiw	r26, 0x00	; 0
    220a:	61 f1       	breq	.+88     	; 0x2264 <sync+0x7c>
    220c:	14 96       	adiw	r26, 0x04	; 4
    220e:	ed 91       	ld	r30, X+
    2210:	fc 91       	ld	r31, X
    2212:	15 97       	sbiw	r26, 0x05	; 5
    2214:	30 97       	sbiw	r30, 0x00	; 0
    2216:	41 f0       	breq	.+16     	; 0x2228 <sync+0x40>
    2218:	a0 81       	ld	r26, Z
    221a:	b1 81       	ldd	r27, Z+1	; 0x01
    221c:	14 96       	adiw	r26, 0x04	; 4
    221e:	ed 91       	ld	r30, X+
    2220:	fc 91       	ld	r31, X
    2222:	15 97       	sbiw	r26, 0x05	; 5
    2224:	30 97       	sbiw	r30, 0x00	; 0
    2226:	c1 f7       	brne	.-16     	; 0x2218 <sync+0x30>
    2228:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    222c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2230:	2a 17       	cp	r18, r26
    2232:	3b 07       	cpc	r19, r27
    2234:	21 f0       	breq	.+8      	; 0x223e <sync+0x56>
    2236:	11 23       	and	r17, r17
    2238:	09 f4       	brne	.+2      	; 0x223c <sync+0x54>
    223a:	3d c0       	rjmp	.+122    	; 0x22b6 <sync+0xce>
    223c:	07 c0       	rjmp	.+14     	; 0x224c <sync+0x64>
    223e:	11 23       	and	r17, r17
    2240:	09 f4       	brne	.+2      	; 0x2244 <sync+0x5c>
    2242:	3c c0       	rjmp	.+120    	; 0x22bc <sync+0xd4>
    2244:	78 94       	sei
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	9f ef       	ldi	r25, 0xFF	; 255
    224a:	52 c0       	rjmp	.+164    	; 0x22f0 <sync+0x108>
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	9b 81       	ldd	r25, Y+3	; 0x03
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	d1 f1       	breq	.+116    	; 0x22c8 <sync+0xe0>
    2254:	fc 01       	movw	r30, r24
    2256:	15 82       	std	Z+5, r1	; 0x05
    2258:	14 82       	std	Z+4, r1	; 0x04
    225a:	36 c0       	rjmp	.+108    	; 0x22c8 <sync+0xe0>
    225c:	78 94       	sei
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	46 c0       	rjmp	.+140    	; 0x22f0 <sync+0x108>
    2264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    226c:	99 83       	std	Y+1, r25	; 0x01
    226e:	88 83       	st	Y, r24
    2270:	11 23       	and	r17, r17
    2272:	29 f0       	breq	.+10     	; 0x227e <sync+0x96>
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	9b 81       	ldd	r25, Y+3	; 0x03
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	09 f0       	breq	.+2      	; 0x227e <sync+0x96>
    227c:	78 94       	sei
    227e:	b6 01       	movw	r22, r12
    2280:	ce 01       	movw	r24, r28
    2282:	f7 01       	movw	r30, r14
    2284:	09 95       	icall
    2286:	f8 2e       	mov	r15, r24
    2288:	09 2f       	mov	r16, r25
    228a:	8f b7       	in	r24, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	19 82       	std	Y+1, r1	; 0x01
    2290:	18 82       	st	Y, r1
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	9b 81       	ldd	r25, Y+3	; 0x03
    2296:	82 30       	cpi	r24, 0x02	; 2
    2298:	91 05       	cpc	r25, r1
    229a:	38 f0       	brcs	.+14     	; 0x22aa <sync+0xc2>
    229c:	1b 82       	std	Y+3, r1	; 0x03
    229e:	1a 82       	std	Y+2, r1	; 0x02
    22a0:	fc 01       	movw	r30, r24
    22a2:	15 82       	std	Z+5, r1	; 0x05
    22a4:	14 82       	std	Z+4, r1	; 0x04
    22a6:	0e 94 4c 06 	call	0xc98	; 0xc98 <dispatch>
    22aa:	11 23       	and	r17, r17
    22ac:	51 f0       	breq	.+20     	; 0x22c2 <sync+0xda>
    22ae:	78 94       	sei
    22b0:	8f 2d       	mov	r24, r15
    22b2:	90 2f       	mov	r25, r16
    22b4:	1d c0       	rjmp	.+58     	; 0x22f0 <sync+0x108>
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	1a c0       	rjmp	.+52     	; 0x22f0 <sync+0x108>
    22bc:	8f ef       	ldi	r24, 0xFF	; 255
    22be:	9f ef       	ldi	r25, 0xFF	; 255
    22c0:	17 c0       	rjmp	.+46     	; 0x22f0 <sync+0x108>
    22c2:	8f 2d       	mov	r24, r15
    22c4:	90 2f       	mov	r25, r16
    22c6:	14 c0       	rjmp	.+40     	; 0x22f0 <sync+0x108>
    22c8:	3b 83       	std	Y+3, r19	; 0x03
    22ca:	2a 83       	std	Y+2, r18	; 0x02
    22cc:	f9 01       	movw	r30, r18
    22ce:	d5 83       	std	Z+5, r29	; 0x05
    22d0:	c4 83       	std	Z+4, r28	; 0x04
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 4c 06 	call	0xc98	; 0xc98 <dispatch>
    22d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    22dc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	89 2b       	or	r24, r25
    22e6:	09 f4       	brne	.+2      	; 0x22ea <sync+0x102>
    22e8:	b9 cf       	rjmp	.-142    	; 0x225c <sync+0x74>
    22ea:	f9 83       	std	Y+1, r31	; 0x01
    22ec:	e8 83       	st	Y, r30
    22ee:	c2 cf       	rjmp	.-124    	; 0x2274 <sync+0x8c>
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	ff 90       	pop	r15
    22fa:	ef 90       	pop	r14
    22fc:	df 90       	pop	r13
    22fe:	cf 90       	pop	r12
    2300:	08 95       	ret

00002302 <run>:
    2302:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
    2306:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
    230a:	80 e1       	ldi	r24, 0x10	; 16
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <dequeue>
    2312:	ec 01       	movw	r28, r24
    2314:	d8 01       	movw	r26, r16
    2316:	13 96       	adiw	r26, 0x03	; 3
    2318:	9c 93       	st	X, r25
    231a:	8e 93       	st	-X, r24
    231c:	12 97       	sbiw	r26, 0x02	; 2
    231e:	78 94       	sei
    2320:	4e 85       	ldd	r20, Y+14	; 0x0e
    2322:	5f 85       	ldd	r21, Y+15	; 0x0f
    2324:	6c 85       	ldd	r22, Y+12	; 0x0c
    2326:	7d 85       	ldd	r23, Y+13	; 0x0d
    2328:	8a 85       	ldd	r24, Y+10	; 0x0a
    232a:	9b 85       	ldd	r25, Y+11	; 0x0b
    232c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <sync>
    2330:	8f b7       	in	r24, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    2338:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    233c:	99 83       	std	Y+1, r25	; 0x01
    233e:	88 83       	st	Y, r24
    2340:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    2344:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    2348:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    234c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2350:	00 81       	ld	r16, Z
    2352:	11 81       	ldd	r17, Z+1	; 0x01
    2354:	e8 01       	movw	r28, r16
    2356:	2a 81       	ldd	r18, Y+2	; 0x02
    2358:	3b 81       	ldd	r19, Y+3	; 0x03
    235a:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <msgQ>
    235e:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <msgQ+0x1>
    2362:	10 97       	sbiw	r26, 0x00	; 0
    2364:	c1 f0       	breq	.+48     	; 0x2396 <run+0x94>
    2366:	21 15       	cp	r18, r1
    2368:	31 05       	cpc	r19, r1
    236a:	59 f2       	breq	.-106    	; 0x2302 <run>
    236c:	16 96       	adiw	r26, 0x06	; 6
    236e:	8d 91       	ld	r24, X+
    2370:	9d 91       	ld	r25, X+
    2372:	0d 90       	ld	r0, X+
    2374:	bc 91       	ld	r27, X
    2376:	a0 2d       	mov	r26, r0
    2378:	e9 01       	movw	r28, r18
    237a:	4e 81       	ldd	r20, Y+6	; 0x06
    237c:	5f 81       	ldd	r21, Y+7	; 0x07
    237e:	68 85       	ldd	r22, Y+8	; 0x08
    2380:	79 85       	ldd	r23, Y+9	; 0x09
    2382:	84 1b       	sub	r24, r20
    2384:	95 0b       	sbc	r25, r21
    2386:	a6 0b       	sbc	r26, r22
    2388:	b7 0b       	sbc	r27, r23
    238a:	18 16       	cp	r1, r24
    238c:	19 06       	cpc	r1, r25
    238e:	1a 06       	cpc	r1, r26
    2390:	1b 06       	cpc	r1, r27
    2392:	0c f0       	brlt	.+2      	; 0x2396 <run+0x94>
    2394:	b6 cf       	rjmp	.-148    	; 0x2302 <run>
    2396:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <activeStack+0x1>
    239a:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <activeStack>
    239e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    23a2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
    23aa:	f0 93 05 01 	sts	0x0105, r31	; 0x800105 <threadPool+0x1>
    23ae:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <threadPool>
    23b2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    23b6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    23ba:	14 96       	adiw	r26, 0x04	; 4
    23bc:	ed 91       	ld	r30, X+
    23be:	fc 91       	ld	r31, X
    23c0:	15 97       	sbiw	r26, 0x05	; 5
    23c2:	30 97       	sbiw	r30, 0x00	; 0
    23c4:	41 f0       	breq	.+16     	; 0x23d6 <run+0xd4>
    23c6:	a0 81       	ld	r26, Z
    23c8:	b1 81       	ldd	r27, Z+1	; 0x01
    23ca:	14 96       	adiw	r26, 0x04	; 4
    23cc:	ed 91       	ld	r30, X+
    23ce:	fc 91       	ld	r31, X
    23d0:	15 97       	sbiw	r26, 0x05	; 5
    23d2:	30 97       	sbiw	r30, 0x00	; 0
    23d4:	c1 f7       	brne	.-16     	; 0x23c6 <run+0xc4>
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 4c 06 	call	0xc98	; 0xc98 <dispatch>
    23dc:	92 cf       	rjmp	.-220    	; 0x2302 <run>

000023de <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    23de:	42 31       	cpi	r20, 0x12	; 18
    23e0:	b8 f4       	brcc	.+46     	; 0x2410 <install+0x32>
        char status;
        DISABLE(status);
    23e2:	2f b7       	in	r18, 0x3f	; 63
    23e4:	f8 94       	cli
        otable[i] = obj;
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	44 0f       	add	r20, r20
    23ea:	55 1f       	adc	r21, r21
    23ec:	fa 01       	movw	r30, r20
    23ee:	ee 5e       	subi	r30, 0xEE	; 238
    23f0:	fe 4f       	sbci	r31, 0xFE	; 254
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
        mtable[i] = m;
    23f6:	fa 01       	movw	r30, r20
    23f8:	e6 55       	subi	r30, 0x56	; 86
    23fa:	fe 4f       	sbci	r31, 0xFE	; 254
    23fc:	71 83       	std	Z+1, r23	; 0x01
    23fe:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	fc 01       	movw	r30, r24
    2406:	53 83       	std	Z+3, r21	; 0x03
    2408:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    240a:	22 23       	and	r18, r18
    240c:	0c f4       	brge	.+2      	; 0x2410 <install+0x32>
    240e:	78 94       	sei
    2410:	08 95       	ret

00002412 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2412:	8c 01       	movw	r16, r24
    2414:	7b 01       	movw	r14, r22
    2416:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2418:	8f b7       	in	r24, 0x3f	; 63
    241a:	f8 94       	cli
    initialize();
    241c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <initialize>
    ENABLE(1);
    2420:	78 94       	sei
    if (m != NULL)
    2422:	e1 14       	cp	r14, r1
    2424:	f1 04       	cpc	r15, r1
    2426:	41 f0       	breq	.+16     	; 0x2438 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	a9 01       	movw	r20, r18
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	70 e0       	ldi	r23, 0x00	; 0
    2432:	cb 01       	movw	r24, r22
    2434:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <async>
    DISABLE(status);
    2438:	8f b7       	in	r24, 0x3f	; 63
    243a:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    243c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <schedule>
    ENABLE(1);
    2440:	78 94       	sei
    while (1) {
        SLEEP();
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	83 bf       	out	0x33, r24	; 51
    2446:	88 95       	sleep
    2448:	fd cf       	rjmp	.-6      	; 0x2444 <tinytimber+0x32>

0000244a <turnNorth>:
 */ 

#include "TrafficLight.h"

void turnNorth(TrafficLight *self, bool val) {
	self->n = val;
    244a:	fc 01       	movw	r30, r24
    244c:	65 83       	std	Z+5, r22	; 0x05
    244e:	08 95       	ret

00002450 <turnSouth>:
}

void turnSouth(TrafficLight *self, bool val) {
	self->s = val;
    2450:	fc 01       	movw	r30, r24
    2452:	64 83       	std	Z+4, r22	; 0x04
    2454:	08 95       	ret

00002456 <__divmodhi4>:
    2456:	97 fb       	bst	r25, 7
    2458:	07 2e       	mov	r0, r23
    245a:	16 f4       	brtc	.+4      	; 0x2460 <__divmodhi4+0xa>
    245c:	00 94       	com	r0
    245e:	07 d0       	rcall	.+14     	; 0x246e <__divmodhi4_neg1>
    2460:	77 fd       	sbrc	r23, 7
    2462:	09 d0       	rcall	.+18     	; 0x2476 <__divmodhi4_neg2>
    2464:	0e 94 45 12 	call	0x248a	; 0x248a <__udivmodhi4>
    2468:	07 fc       	sbrc	r0, 7
    246a:	05 d0       	rcall	.+10     	; 0x2476 <__divmodhi4_neg2>
    246c:	3e f4       	brtc	.+14     	; 0x247c <__divmodhi4_exit>

0000246e <__divmodhi4_neg1>:
    246e:	90 95       	com	r25
    2470:	81 95       	neg	r24
    2472:	9f 4f       	sbci	r25, 0xFF	; 255
    2474:	08 95       	ret

00002476 <__divmodhi4_neg2>:
    2476:	70 95       	com	r23
    2478:	61 95       	neg	r22
    247a:	7f 4f       	sbci	r23, 0xFF	; 255

0000247c <__divmodhi4_exit>:
    247c:	08 95       	ret

0000247e <__tablejump2__>:
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	05 90       	lpm	r0, Z+
    2484:	f4 91       	lpm	r31, Z
    2486:	e0 2d       	mov	r30, r0
    2488:	09 94       	ijmp

0000248a <__udivmodhi4>:
    248a:	aa 1b       	sub	r26, r26
    248c:	bb 1b       	sub	r27, r27
    248e:	51 e1       	ldi	r21, 0x11	; 17
    2490:	07 c0       	rjmp	.+14     	; 0x24a0 <__udivmodhi4_ep>

00002492 <__udivmodhi4_loop>:
    2492:	aa 1f       	adc	r26, r26
    2494:	bb 1f       	adc	r27, r27
    2496:	a6 17       	cp	r26, r22
    2498:	b7 07       	cpc	r27, r23
    249a:	10 f0       	brcs	.+4      	; 0x24a0 <__udivmodhi4_ep>
    249c:	a6 1b       	sub	r26, r22
    249e:	b7 0b       	sbc	r27, r23

000024a0 <__udivmodhi4_ep>:
    24a0:	88 1f       	adc	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	5a 95       	dec	r21
    24a6:	a9 f7       	brne	.-22     	; 0x2492 <__udivmodhi4_loop>
    24a8:	80 95       	com	r24
    24aa:	90 95       	com	r25
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	08 95       	ret

000024b2 <setjmp>:
    24b2:	dc 01       	movw	r26, r24
    24b4:	2d 92       	st	X+, r2
    24b6:	3d 92       	st	X+, r3
    24b8:	4d 92       	st	X+, r4
    24ba:	5d 92       	st	X+, r5
    24bc:	6d 92       	st	X+, r6
    24be:	7d 92       	st	X+, r7
    24c0:	8d 92       	st	X+, r8
    24c2:	9d 92       	st	X+, r9
    24c4:	ad 92       	st	X+, r10
    24c6:	bd 92       	st	X+, r11
    24c8:	cd 92       	st	X+, r12
    24ca:	dd 92       	st	X+, r13
    24cc:	ed 92       	st	X+, r14
    24ce:	fd 92       	st	X+, r15
    24d0:	0d 93       	st	X+, r16
    24d2:	1d 93       	st	X+, r17
    24d4:	cd 93       	st	X+, r28
    24d6:	dd 93       	st	X+, r29
    24d8:	ff 91       	pop	r31
    24da:	ef 91       	pop	r30
    24dc:	8d b7       	in	r24, 0x3d	; 61
    24de:	8d 93       	st	X+, r24
    24e0:	8e b7       	in	r24, 0x3e	; 62
    24e2:	8d 93       	st	X+, r24
    24e4:	8f b7       	in	r24, 0x3f	; 63
    24e6:	8d 93       	st	X+, r24
    24e8:	ed 93       	st	X+, r30
    24ea:	fd 93       	st	X+, r31
    24ec:	88 27       	eor	r24, r24
    24ee:	99 27       	eor	r25, r25
    24f0:	09 94       	ijmp

000024f2 <longjmp>:
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	81 30       	cpi	r24, 0x01	; 1
    24f8:	91 05       	cpc	r25, r1
    24fa:	81 1d       	adc	r24, r1
    24fc:	2d 90       	ld	r2, X+
    24fe:	3d 90       	ld	r3, X+
    2500:	4d 90       	ld	r4, X+
    2502:	5d 90       	ld	r5, X+
    2504:	6d 90       	ld	r6, X+
    2506:	7d 90       	ld	r7, X+
    2508:	8d 90       	ld	r8, X+
    250a:	9d 90       	ld	r9, X+
    250c:	ad 90       	ld	r10, X+
    250e:	bd 90       	ld	r11, X+
    2510:	cd 90       	ld	r12, X+
    2512:	dd 90       	ld	r13, X+
    2514:	ed 90       	ld	r14, X+
    2516:	fd 90       	ld	r15, X+
    2518:	0d 91       	ld	r16, X+
    251a:	1d 91       	ld	r17, X+
    251c:	cd 91       	ld	r28, X+
    251e:	dd 91       	ld	r29, X+
    2520:	ed 91       	ld	r30, X+
    2522:	fd 91       	ld	r31, X+
    2524:	0d 90       	ld	r0, X+
    2526:	f8 94       	cli
    2528:	fe bf       	out	0x3e, r31	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	ed bf       	out	0x3d, r30	; 61
    252e:	ed 91       	ld	r30, X+
    2530:	fd 91       	ld	r31, X+
    2532:	09 94       	ijmp

00002534 <_exit>:
    2534:	f8 94       	cli

00002536 <__stop_program>:
    2536:	ff cf       	rjmp	.-2      	; 0x2536 <__stop_program>
